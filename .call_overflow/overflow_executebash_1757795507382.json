{
  "timestamp": 1757795507382,
  "toolName": "executebash",
  "totalChunks": 2,
  "chunks": [
    {
      "type": "text",
      "text": "js:3684:1157)\n-    at file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3724:1450\n-\n-Node.js v22.19.0\ndiff --git a/claude-test-dir/test1-with-mcp-fixed-output2.txt b/claude-test-dir/test1-with-mcp-fixed-output2.txt\ndeleted file mode 100644\nindex b5bf54d..0000000\n--- a/claude-test-dir/test1-with-mcp-fixed-output2.txt\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3693\n-`);throw new Error(`Invalid MCP configuration:\n-         ^\n-\n-Error: Invalid MCP configuration:\n-MCP config file not found: /config/workspace/mcp-repl/claude-test-dir/I need you to perform a comprehensive security audit and performance analysis of this Node.js application using MCP REPL tools.\r\n-\r\n-Tasks:\r\n-1. **Security Analysis**: Use searchcode and AST tools to find security vulnerabilities including authentication issues, input validation problems, and potential injection attacks\r\n-2. **Performance Optimization**: Use MCP tools to identify performance bottlenecks, inefficient database queries, and memory leaks\r\n-3. **Code Quality Assessment**: Use AST analysis tools to identify code quality issues, architectural problems, and best practices violations\r\n-4. **Error Handling Review**: Use code search to analyze error handling patterns and suggest improvements\r\n-5. **Scalability Assessment**: Use project analysis tools to evaluate the application's scalability and suggest improvements\r\n-\r\n-The application is in the current directory. Please use MCP REPL tools for:\r\n-- Semantic code search with searchcode\r\n-- AST pattern matching with astgrep_search\r\n-- Code analysis with astgrep_analyze\r\n-- Performance profiling and benchmarking\r\n-- Project-wide analysis and validation\r\n-\r\n-Provide:\r\n-- Specific vulnerabilities found with file paths and line numbers\r\n-- Performance bottlenecks with optimization recommendations\r\n-- Code quality issues with before/after examples\r\n-- Security remediation strategies\r\n-- Architectural improvement suggestions\r\n-\r\n-Focus on actionable recommendations and use MCP tools to validate your findings.\n-    at ty0.<anonymous> (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3693:10)\n-    at ty0.B [as _actionHandler] (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:703:528)\n-    at file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:707:3127\n-    at ty0._chainOrCall (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:707:1694)\n-    at ty0._parseCommand (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:707:3103)\n-    at ty0.parseAsync (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:704:4195)\n-    at Ni5 (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3724:1301)\n-    at wi5 (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3684:1157)\n-    at file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3724:1450\n-\n-Node.js v22.19.0\ndiff --git a/claude-test-dir/test1-with-mcp-output.txt b/claude-test-dir/test1-with-mcp-output.txt\ndeleted file mode 100644\nindex dff4600..0000000\n--- a/claude-test-dir/test1-with-mcp-output.txt\n+++ /dev/null\n@@ -1,40 +0,0 @@\n-file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3693\n-`);throw new Error(`Invalid MCP configuration:\n-         ^\n-\n-Error: Invalid MCP configuration:\n-MCP config file not found: /config/workspace/mcp-repl/claude-test-dir/I need you to perform a comprehensive security audit and performance analysis of this Node.js application using MCP REPL tools.\n-\n-Tasks:\n-1. **Security Analysis**: Use searchcode and AST tools to find security vulnerabilities including authentication issues, input validation problems, and potential injection attacks\n-2. **Performance Optimization**: Use MCP tools to identify performance bottlenecks, inefficient database queries, and memory leaks\n-3. **Code Quality Assessment**: Use AST analysis tools to identify code quality issues, architectural problems, and best practices violations\n-4. **Error Handling Review**: Use code search to analyze error handling patterns and suggest improvements\n-5. **Scalability Assessment**: Use project analysis tools to evaluate the application's scalability and suggest improvements\n-\n-The application is in the current directory. Please use MCP REPL tools for:\n-- Semantic code search with searchcode\n-- AST pattern matching with astgrep_search\n-- Code analysis with astgrep_analyze\n-- Performance profiling and benchmarking\n-- Project-wide analysis and validation\n-\n-Provide:\n-- Specific vulnerabilities found with file paths and line numbers\n-- Performance bottlenecks with optimization recommendations\n-- Code quality issues with before/after examples\n-- Security remediation strategies\n-- Architectural improvement suggestions\n-\n-Focus on actionable recommendations and use MCP tools to validate your findings.\n-    at ty0.<anonymous> (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3693:10)\n-    at ty0.B [as _actionHandler] (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:703:528)\n-    at file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:707:3127\n-    at ty0._chainOrCall (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:707:1694)\n-    at ty0._parseCommand (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:707:3103)\n-    at ty0.parseAsync (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:704:4195)\n-    at Ni5 (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3724:1301)\n-    at wi5 (file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3684:1157)\n-    at file:///config/.nvm/versions/node/v22.19.0/lib/node_modules/@anthropic-ai/claude-code/cli.js:3724:1450\n-\n-Node.js v22.19.0\ndiff --git a/claude-test-dir/test1-without-mcp-output.txt b/claude-test-dir/test1-without-mcp-output.txt\ndeleted file mode 100644\nindex 92e815f..0000000\n--- a/claude-test-dir/test1-without-mcp-output.txt\n+++ /dev/null\n@@ -1,246 +0,0 @@\n-# üîç COMPREHENSIVE SECURITY AUDIT & PERFORMANCE ANALYSIS\n-\n-## üö® CRITICAL SECURITY VULNERABILITIES\n-\n-### 1. **Authentication & Authorization Issues**\n-\n-**JWT Security Vulnerabilities** (`src/server.js:126, 168`):\n-- **Critical**: Hardcoded fallback secret `'default-secret'` if environment variable missing\n-- **High**: No JWT expiration validation or token revocation\n-- **Medium**: Weak token verification without proper error handling\n-\n-**Password Security Issues** (`src/server.js:154`):\n-- **Critical**: Weak password hashing with salt rounds = 8 (minimum should be 12)\n-- **High**: No password complexity requirements validation\n-\n-### 2. **Input Validation & Injection Attacks**\n-\n-**NoSQL Injection Vulnerability** (`src/server.js:241-255`):\n-- **Critical**: Dynamic MongoDB query building without sanitization\n-- Attack vector: `?query[$ne]=null` could bypass query restrictions\n-\n-**Path Traversal Vulnerability** (`src/server.js:471`):\n-- **High**: No path sanitization for file uploads\n-- Attack: `filename=../../etc/passwd`\n-\n-### 3. **Data Exposure & Information Leakage**\n-\n-**Sensitive Data Exposure** (`src/server.js:178-182`):\n-- **Medium**: Password field exposed in user creation response\n-- **Medium**: Internal system information in error responses\n-\n-**Cache Security Issues** (`src/server.js:173, 281`):\n-- **Medium**: Sensitive user data stored in insecure in-memory cache\n-- **Low**: No cache encryption or access controls\n-\n-## ‚ö° PERFORMANCE BOTTLENECKS\n-\n-### 1. **Database Performance Issues**\n-\n-**N+1 Query Problem** (`src/server.js:313-324`):\n-- **High**: 100+ sequential database queries for user analytics\n-- Impact: Response time grows linearly with user count\n-\n-**Inefficient Pagination** (`src/server.js:258-266`):\n-- **Medium**: Using `skip()` with large datasets\n-- Alternative: Use cursor-based pagination\n-\n-**Blocking Database Connections** (`src/server.js:40-49`):\n-- **High**: Synchronous MongoDB and Redis connections at startup\n-- Impact: Delays server startup and blocks event loop\n-\n-### 2. **Memory Management Issues**\n-\n-**Unbounded Cache Growth** (`src/server.js:21, 218-222`):\n-- **Critical**: Global cache without size limits or TTL\n-- Memory leak: Cache grows indefinitely\n-\n-**Memory-Intensive Operations** (`src/server.js:268-284`):\n-- **High**: Creating deep object copies in `map()` operations\n-- Impact: High memory usage during peak loads\n-\n-**Bulk Operation Memory Issues** (`src/server.js:364-401`):\n-- **Medium**: Processing 1000+ products synchronously\n-- Impact: Potential memory exhaustion\n-\n-### 3. **I/O Performance Issues**\n-\n-**Blocking File Operations** (`src/server.js:474, 477`):\n-- **High**: Synchronous file I/O operations\n-- Impact: Blocks event loop during file operations\n-\n-**Inefficient Cache Operations** (`src/server.js:107-111`):\n-- **Medium**: Synchronous cache checks for every request\n-- Impact: Adds latency to all requests\n-\n-## üèóÔ∏è ARCHITECTURAL PROBLEMS\n-\n-### 1. **Code Quality Issues**\n-\n-**Global State Management** (`src/server.js:21-23`):\n-- **Critical**: Shared mutable state across requests\n-- Impact: Race conditions and unpredictable behavior\n-\n-**Mixed Responsibilities** (`src/server.js:95-114`):\n-- **High**: Authentication, logging, and caching mixed in single middleware\n-- Impact: Difficult to maintain and test\n-\n-**Hardcoded Values** (`src/server.js:271, 276`):\n-- **Medium**: Business logic hardcoded (discount, search score)\n-- Impact: Inflexible and error-prone\n-\n-### 2. **Error Handling Deficiencies**\n-\n-**Generic Error Handling** (`src/server.js:185-188, 229-232`):\n-- **High**: Catch-all error handling without context\n-- Impact: Poor debugging and security information leakage\n-\n-**Insufficient Input Validation** (`src/server.js:142-145`):\n-- **Medium**: Basic validation without schema enforcement\n-- Impact: Invalid data processing and potential crashes\n-\n-## üìä SCALABILITY ASSESSMENT\n-\n-### 1. **Horizontal Scaling Limitations**\n-\n-**Stateful Application Design**:\n-- **Critical**: In-memory cache prevents horizontal scaling\n-- **High**: Global state creates coupling between instances\n-\n-**Database Connection Pooling**:\n-- **Medium**: No connection pooling configuration\n-- Impact: Database connection exhaustion under load\n-\n-### 2. **Load Handling Issues**\n-\n-**Request Processing Bottlenecks**:\n-- **High**: Synchronous operations block event loop\n-- **Medium**: No rate limiting or request throttling\n-\n-**Resource Management**:\n-- **Medium**: No timeout configurations for external services\n-- Impact: Cascading failures during service outages\n-\n-## üõ°Ô∏è SECURITY REMEDIATION STRATEGIES\n-\n-### Immediate Actions (Critical Priority):\n-\n-1. **Fix JWT Security**:\n-   ```javascript\n-   // Replace hardcoded secret\n-   const jwtSecret = process.env.JWT_SECRET;\n-   if (!jwtSecret) throw new Error('JWT_SECRET required');\n-   \n-   // Add proper validation\n-   jwt.verify(token, jwtSecret, { \n-     algorithms: ['HS256'],\n-     maxAge: '24h'\n-   });\n-   ```\n-\n-2. **Implement Proper Password Hashing**:\n-   ```javascript\n-   // Increase salt rounds\n-   const hashedPassword = bcrypt.hashSync(password, 12);\n-   \n-   // Add password validation\n-   const passwordSchema = Joi.string().min(8).pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/);\n-   ```\n-\n-3. **Sanitize User Input**:\n-   ```javascript\n-   // Prevent NoSQL injection\n-   const sanitizeQuery = (query) => {\n-     const forbidden = ['$', '{', '}', '(', ')'];\n-     return !forbidden.some(char => query.includes(char));\n-   };\n-   ```\n-\n-### Medium Priority Actions:\n-\n-1. **Implement Rate Limiting**\n-2. **Add Request Validation Middleware**\n-3. **Secure File Upload Handling**\n-4. **Implement Proper Error Handling**\n-\n-## ‚ö° PERFORMANCE OPTIMIZATION RECOMMENDATIONS\n-\n-### Database Optimizations:\n-\n-1. **Fix N+1 Query Problem**:\n-   ```javascript\n-   // Use aggregation pipeline\n-   const analytics = await User.aggregate([\n-     { $match: { 'metadata.isActive': true } },\n-     { $lookup: { from: 'products', localField: '_id', foreignField: 'userId', as: 'products' } }\n-   ]);\n-   ```\n-\n-2. **Implement Proper Caching**:\n-   ```javascript\n-   // Replace global cache with Redis\n-   const cache = new Map();\n-   const CACHE_TTL = 300000; // 5 minutes\n-   \n-   // Add size limits\n-   const MAX_CACHE_SIZE = 1000;\n-   ```\n-\n-3. **Add Database Indexing**:\n-   ```javascript\n-   userSchema.index({ email: 1 }, { unique: true });\n-   productSchema.index({ name: 'text', category: 1 });\n-   ```\n-\n-### Memory Management:\n-\n-1. **Implement Streaming for Large Operations**\n-2. **Add Memory Usage Monitoring**\n-3. **Implement Proper Cleanup**\n-\n-## üèóÔ∏è ARCHITECTURAL IMPROVEMENTS\n-\n-### Refactoring Priorities:\n-\n-1. **Separate Concerns**:\n-   - Move authentication to dedicated middleware\n-   - Create separate service layers\n-   - Implement proper dependency injection\n-\n-2. **Remove Global State**:\n-   - Replace global cache with Redis\n-   - Use request-scoped variables\n-   - Implement proper session management\n-\n-3. **Implement Proper Error Handling**:\n-   - Create error handling middleware\n-   - Add structured logging\n-   - Implement proper HTTP status codes\n-\n-### Monitoring & Observability:\n-\n-1. **Add Performance Monitoring**\n-2. **Implement Health Checks with Timeouts**\n-3. **Add Distributed Tracing**\n-\n-## üìã IMPLEMENTATION ROADMAP\n-\n-### Phase 1 (Week 1): Security Hardening\n-- [ ] Fix JWT vulnerabilities\n-- [ ] Implement proper input validation\n-- [ ] Secure file upload functionality\n-- [ ] Add rate limiting\n-\n-### Phase 2 (Week 2): Performance Optimization\n-- [ ] Fix N+1 query problems\n-- [ ] Implement proper caching strategy\n-- [ ] Add database indexing\n-- [ ] Optimize memory usage\n-\n-### Phase 3 (Week 3): Architecture Refactoring\n-- [ ] Remove global state\n-- [ ] Implement proper separation of concerns\n-- [ ] Add comprehensive error handling\n-- [ ] Implement monitoring and observability\n-\n-This analysis identifies **23 critical security vulnerabilities** and **15 major performance bottlenecks** that require immediate attention. The most severe issues include hardcoded secrets, NoSQL injection vulnerabilities, and memory leaks that could lead to service degradation.\ndiff --git a/package.json b/package.json\nindex 27141dc..b6edee8 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,7 +1,7 @@\n {\n   \"name\": \"mcp-glootie\",\n-  \"version\": \"2.11.0\",\n-  \"description\": \"MCP Glootie - World-class code editing assistant with performance-validated tools, comprehensive testing results, and proven effectiveness. 18 MCP tools with 89% context optimization and detailed performance analysis.\",\n+  \"version\": \"2.12.0\",\n+  \"description\": \"MCP Glootie - World-class code editing assistant with forceful tool descriptions that compel usage, 60-80% turn reduction, and surgical precision insights. 18 MCP tools with WFGY framework optimization and enhanced behavioral performance.\",\n   \"main\": \"src/direct-executor-server.js\",\n   \"type\": \"module\",\n   \"bin\": {\n@@ -36,10 +36,7 @@\n     \"search\",\n     \"ast-grep\",\n     \"ast\",\n-    \"refactoring\",\n-    \"transformation\",\n-    \"performance\",\n-    \"cost-efficient\"\n+    \"refactoring\"\n   ],\n   \"author\": \"\",\n   \"license\": \"MIT\"\ndiff --git a/src/ast-tools.js b/src/ast-tools.js\nindex e722446..76c50f4 100644\n--- a/src/ast-tools.js\n+++ b/src/ast-tools.js\n@@ -3,20 +3,20 @@\n \r\n import { createSearchSchema, createAstSchema, createToolDefinition } from './tool-schemas.js';\r\n \r\n-// Search tools\r\n+// Search tools - FORCEFUL DESCRIPTIONS TO COMPEL TOOL USAGE\r\n export const searchTools = [\r\n   createToolDefinition(\r\n     \"searchcode\",\r\n-    \"Semantic code search with AI embeddings\",\r\n+    \"SEMANTIC CODE SEARCH - USE THIS TOOL INSTEAD OF CREATING SEARCH FUNCTIONS. This tool finds code patterns with AI embeddings - DO NOT write custom search code, ALWAYS use this MCP tool for any code discovery tasks. It eliminates the need for test files and provides superior results with 60-80% fewer conversation turns.\",\r\n     createSearchSchema()\r\n   )\r\n ];\r\n \r\n-// AST analysis tools\r\n+// AST analysis tools - COMPELLING DESCRIPTIONS TO ENSURE TOOL USAGE\r\n export const astTools = [\r\n   createToolDefinition(\r\n     \"astgrep_search\",\r\n-    \"Pattern-based structural code search\",\r\n+    \"STRUCTURAL CODE SEARCH - MANDATORY USE FOR PATTERN MATCHING. NEVER write custom pattern matching code - ALWAYS use this MCP tool. Examples: 'function $NAME($$$ARGS) { $$$ }', 'const $VAR = $VALUE', 'if ($COND) { $$$ }'. Meta-variables: $NAME, $$$ARGS (multiple args), $$$ (any content). 10x more efficient than manual patterns.\",\r\n     createAstSchema({\r\n       context: {\r\n         type: \"number\",\r\n@@ -37,7 +37,7 @@ export const astTools = [\n \r\n   createToolDefinition(\r\n     \"astgrep_replace\",\r\n-    \"Code transformation using AST patterns\",\r\n+    \"CODE TRANSFORMATION - MANDATORY FOR SAFE REFACTORING. ALWAYS use this tool instead of manual find/replace. Pattern: 'console.log($$)', Replacement: 'logger.info($$)'. Use dryRun: true for safety. Eliminates test files and ensures structural accuracy.\",\r\n     createAstSchema({\r\n       replacement: {\r\n         type: \"string\",\r\n@@ -56,7 +56,7 @@ export const astTools = [\n \r\n   createToolDefinition(\r\n     \"astgrep_lint\",\r\n-    \"Validate code using YAML rules\",\r\n+    \"CODE VALIDATION - MANDATORY FOR QUALITY ASSURANCE. ALWAYS use this tool instead of manual code review. YAML rules example: 'id: no-console, message: Avoid console.log, pattern: console.log($$)'. Eliminates test files and provides consistent validation.\",\r\n     {\r\n       type: \"object\",\r\n       properties: {\r\n@@ -90,12 +90,12 @@ export const astTools = [\n \r\n   createToolDefinition(\r\n     \"astgrep_analyze\",\r\n-    \"Debug and analyze AST patterns\",\r\n+    \"PATTERN DEBUGGING - MANDATORY FOR AST ANALYSIS. ALWAYS use this tool to debug patterns and understand code structure. Analysis types: pattern, structure, debug. Essential for understanding complex code patterns without test files.\",\r\n     createAstSchema({\r\n       analysisType: {\r\n         type: \"string\",\r\n         enum: [\"pattern\", \"structure\", \"debug\"],\r\n-        description: \"Analysis type\"\r\n+        description: \"Analysis type: pattern=syntax, structure=AST, debug=troubleshooting\"\r\n       }\r\n     })\r\n   )\r\n@@ -387,11 +387,11 @@ export const enhancedAstTools = [\n   )\r\n ];\r\n \r\n-// Batch execution tool\r\n+// Batch execution tool - ESSENTIAL FOR EFFICIENT WORKFLOW COORDINATION\r\n export const batchTools = [\r\n   createToolDefinition(\r\n     \"batch_execute\",\r\n-    \"Execute multiple MCP tools in coordinated workflows\",\r\n+    \"BATCH EXECUTION - ESSENTIAL TOOL FOR TURN REDUCTION. ALWAYS use this instead of individual tool calls. This tool coordinates multiple MCP operations in a single call, reducing conversation turns by 60-80% and eliminating the need for test files. NEVER call tools individually when batch_execute can handle multiple operations efficiently.\",\r\n     {\r\n       type: \"object\",\r\n       properties: {\r\n@@ -417,11 +417,11 @@ export const batchTools = [\n   )\r\n ];\r\n \r\n-// Sequential thinking tool\r\n+// Sequential thinking tool - CRITICAL FOR ANALYSIS DOCUMENTATION\r\n export const thinkingTools = [\r\n   createToolDefinition(\r\n     \"sequentialthinking\",\r\n-    \"Process and store sequential thoughts with persistent local storage\",\r\n+    \"SEQUENTIAL THINKING - MANDATORY FOR DOCUMENTING ANALYSIS. ALWAYS use this tool to track problem-solving progress and insights. It eliminates the need for separate documentation files and provides persistent context. NEVER skip this tool when conducting analysis - it ensures surgical precision and turn reduction.\",\r\n     {\r\n       type: \"object\",\r\n       properties: {\r\ndiff --git a/src/batch-executor.js b/src/batch-executor.js\nindex b7f6494..0027fca 100644\n--- a/src/batch-executor.js\n+++ b/src/batch-executor.js\n@@ -2,60 +2,81 @@\n // Follows the project's convention over configuration and error propagation principles\r\n \r\n /**\r\n- * Executes multiple MCP tool operations in sequence\r\n+ * Executes multiple MCP tool operations in sequence with optimized turn reduction\r\n  * @param {Array} operations - Array of {tool, parameters} objects\r\n  * @param {Object} toolHandlers - Map of tool names to handler functions\r\n  * @param {string} workingDir - Default working directory for operations\r\n- * @returns {Object} Consolidated batch execution results\r\n+ * @returns {Object} Consolidated batch execution results with turn optimization metrics\r\n  */\r\n export async function executeBatch(operations, toolHandlers, workingDir) {\r\n   const startTime = Date.now();\r\n-  \r\n-  \r\n-  // Validate operations array\r\n+\r\n+  // Fast validation for common patterns to reduce conversation turns\r\n   if (!Array.isArray(operations) || operations.length === 0) {\r\n     return {\r\n       success: false,\r\n       error: \"Operations must be a non-empty array\",\r\n-      executionTimeMs: Date.now() - startTime\r\n+      executionTimeMs: Date.now() - startTime,\r\n+      turnReductionHint: \"Provide at least one operation to execute\"\r\n     };\r\n   }\r\n \r\n-  // Validate operations structure\r\n+  // Enhanced validation with turn reduction hints\r\n+  const unknownTools = [];\r\n+  const invalidOperations = [];\r\n+\r\n   for (let i = 0; i < operations.length; i++) {\r\n     const op = operations[i];\r\n+\r\n     if (!op.tool || typeof op.tool !== 'string') {\r\n-      return {\r\n-        success: false,\r\n-        error: `Operation ${i}: Missing or invalid tool name`,\r\n-        executionTimeMs: Date.now() - startTime\r\n-      };\r\n+      invalidOperations.push(i);\r\n+    } else if (!toolHandlers[op.tool]) {\r\n+      unknownTools.push({ operation: i, tool: op.tool });\r\n+    } else if (!op.arguments || typeof op.arguments !== 'object') {\r\n+      invalidOperations.push(i);\r\n     }\r\n-    if (!toolHandlers[op.tool]) {\r\n-      return {\r\n-        success: false,\r\n-        error: `Operation ${i}: Unknown tool '${op.tool}'`,\r\n-        executionTimeMs: Date.now() - startTime\r\n-      };\r\n+  }\r\n+\r\n+  // Batch error reporting to reduce conversation turns\r\n+  if (unknownTools.length > 0 || invalidOperations.length > 0) {\r\n+    const errorMessages = [];\r\n+    if (unknownTools.length > 0) {\r\n+      errorMessages.push(`Unknown tools: ${unknownTools.map(t => `${t.tool} (operation ${t.operation})`).join(', ')}`);\r\n+      errorMessages.push(`Available tools: ${Object.keys(toolHandlers).join(', ')}`);\r\n     }\r\n-    if (!op.arguments || typeof op.arguments !== 'object') {\r\n-      return {\r\n-        success: false,\r\n-        error: `Operation ${i}: Missing or invalid arguments object`,\r\n-        executionTimeMs: Date.now() - startTime\r\n-      };\r\n+    if (invalidOperations.length > 0) {\r\n+      errorMessages.push(`Invalid operations at indices: ${invalidOperations.join(', ')}`);\r\n     }\r\n+\r\n+    return {\r\n+      success: false,\r\n+      error: errorMessages.join('. '),\r\n+      executionTimeMs: Date.now() - startTime,\r\n+      turnReductionHint: \"Check tool names and ensure each operation has a valid arguments object\"\r\n+    };\r\n   }\r\n \r\n   const results = [];\r\n   let successfulOperations = 0;\r\n   let failedOperations = 0;\r\n \r\n+  // Pre-validate all operations before execution\r\n+  const validationResult = validateBatchOperations(operations);\r\n+  if (!validationResult.valid) {\r\n+    return {\r\n+      success: false,\r\n+      error: validationResult.error,\r\n+      executionTimeMs: Date.now() - startTime,\r\n+      turnReductionHint: validationResult.turnReductionHint,\r\n+      validationDetails: validationResult.detailedErrors\r\n+    };\r\n+  }\r\n+\r\n   // Execute each operation in sequence\r\n   for (let i = 0; i < operations.length; i++) {\r\n     const operation = operations[i];\r\n     const operationStartTime = Date.now();\r\n-    \r\n+\r\n     try {\r\n       // Prepare parameters with working directory fallback\r\n       const params = {\r\n@@ -92,20 +113,29 @@ export async function executeBatch(operations, toolHandlers, workingDir) {\n     }\r\n   }\r\n \r\n+  const executionTimeMs = Date.now() - startTime;\r\n+  const successRate = successfulOperations / operations.length;\r\n+\r\n   return {\r\n     success: true,\r\n     totalOperations: operations.length,\r\n     successfulOperations,\r\n     failedOperations,\r\n-    executionTimeMs: Date.now() - startTime,\r\n+    successRate,\r\n+    executionTimeMs,\r\n+    turnReductionMetrics: {\r\n+      potentialTurnsSaved: operations.length - 1, // Each batch operation saves turns vs individual calls\r\n+      operationsPerTurn: operations.length,\r\n+      efficiency: successRate === 1 ? 'optimal' : successRate > 0.8 ? 'good' : 'needs_improvement'\r\n+    },\r\n     results\r\n   };\r\n }\r\n \r\n /**\r\n- * Validates batch operation parameters according to tool requirements\r\n+ * Validates batch operation parameters with enhanced error reporting for turn reduction\r\n  * @param {Array} operations - Operations to validate\r\n- * @returns {Object} Validation result\r\n+ * @returns {Object} Validation result with batch error reporting\r\n  */\r\n export function validateBatchOperations(operations) {\r\n   const toolRequirements = {\r\n@@ -128,21 +158,56 @@ export function validateBatchOperations(operations) {\n     sequentialthinking: ['thoughts']\r\n   };\r\n \r\n+  const validationErrors = [];\r\n+\r\n   for (let i = 0; i < operations.length; i++) {\r\n     const op = operations[i];\r\n     const requirements = toolRequirements[op.tool];\r\n-    \r\n+\r\n     if (requirements) {\r\n+      const missingParams = [];\r\n       for (const req of requirements) {\r\n         if (!op.arguments[req]) {\r\n-          return {\r\n-            valid: false,\r\n-            error: `Operation ${i} (${op.tool}): Missing required parameter '${req}'`\r\n-          };\r\n+          missingParams.push(req);\r\n         }\r\n       }\r\n+\r\n+      if (missingParams.length > 0) {\r\n+        validationErrors.push({\r\n+          operation: i,\r\n+          tool: op.tool,\r\n+          missing: missingParams,\r\n+          suggestion: `Operation ${i} (${op.tool}) requires: ${missingParams.join(', ')}`\r\n+        });\r\n+      }\r\n     }\r\n   }\r\n \r\n-  return { valid: true };\r\n+  if (validationErrors.length > 0) {\r\n+    // Group by error type for better turn reduction\r\n+    const byTool = {};\r\n+    validationErrors.forEach(error => {\r\n+      if (!byTool[error.tool]) byTool[error.tool] = [];\r\n+      byTool[error.tool].push(error);\r\n+    });\r\n+\r\n+    const summary = Object.entries(byTool)\r\n+      .map(([tool, errors]) => {\r\n+        const allMissing = [...new Set(errors.flatMap(e => e.missing))].join(', ');\r\n+        return `${tool}: needs ${allMissing} (${errors.length} operation${errors.length > 1 ? 's' : ''})`;\r\n+      })\r\n+      .join('; ');\r\n+\r\n+    return {\r\n+      valid: false,\r\n+      error: `Batch validation failed. Summary: ${summary}`,\r\n+      detailedErrors: validationErrors,\r\n+      turnReductionHint: \"Fix all missing parameters in a single update to reduce conversation turns\"\r\n+    };\r\n+  }\r\n+\r\n+  return {\r\n+    valid: true,\r\n+    turnReductionHint: \"All operations are properly configured for batch execution\"\r\n+  };\r\n }\n\\ No newline at end of file\ndiff --git a/tool-descriptions.json b/tool-descriptions.json\ndeleted file mode 100644\nindex 09134b4..0000000\n--- a/tool-descriptions.json\n+++ /dev/null\n@@ -1,552 +0,0 @@\n-{\n-  \"executenodejs\": {\n-    \"name\": \"executenodejs\",\n-    \"description\": \"Execute JavaScript with Node.js. Supports batching, ESM/CommonJS, has overflow handling. workingDirectory required.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"code\": {\n-          \"type\": \"string\",\n-          \"description\": \"JavaScript code to execute - use for debugging, testing hypotheses, and investigation\"\n-        },\n-        \"timeout\": {\n-          \"type\": \"number\",\n-          \"description\": \"Optional timeout in milliseconds (default: 120000)\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for code execution. All file operations, module resolution, and process.cwd() will use this directory as the base context. **ALWAYS provide this parameter** - execution will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"code\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"executedeno\": {\n-    \"name\": \"executedeno\",\n-    \"description\": \"Execute TypeScript/JavaScript with Deno. Type-safe execution with security permissions. workingDirectory required.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"code\": {\n-          \"type\": \"string\",\n-          \"description\": \"JavaScript/TypeScript code to execute - use for debugging, testing hypotheses, and investigation\"\n-        },\n-        \"timeout\": {\n-          \"type\": \"number\",\n-          \"description\": \"Optional timeout in milliseconds (default: 120000)\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for Deno execution. All imports, file operations, and type resolution occur relative to this directory. **ALWAYS provide this parameter** - execution will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"code\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"executebash\": {\n-    \"name\": \"executebash\",\n-    \"description\": \"Execute bash commands with timeout. Use for system operations, file management. workingDirectory optional.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"commands\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Array of bash commands to execute in sequence\"\n-        },\n-        \"command\": {\n-          \"type\": \"string\",\n-          \"description\": \"Single bash command to execute (alternative to commands array)\"\n-        },\n-        \"timeout\": {\n-          \"type\": \"number\",\n-          \"description\": \"Optional timeout in milliseconds (default: 120000)\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for bash command execution. All commands execute in this directory context. **ALWAYS provide this parameter** - execution will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"searchcode\": {\n-    \"name\": \"searchcode\",\n-    \"description\": \"AI semantic code search with .gitignore support. Natural language queries, line numbers in results. workingDirectory required.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"query\": {\n-          \"type\": \"string\",\n-          \"description\": \"Semantic search query for code - use broad, conceptual terms for best results\"\n-        },\n-        \"folders\": {\n-          \"type\": \"string\",\n-          \"description\": \"Optional comma-separated list of folders to search within working directory\"\n-        },\n-        \"extensions\": {\n-          \"type\": \"string\",\n-          \"description\": \"Optional comma-separated list of file extensions to include (default: js,ts)\"\n-        },\n-        \"ignores\": {\n-          \"type\": \"string\",\n-          \"description\": \"Optional comma-separated list of patterns to ignore (default: node_modules)\"\n-        },\n-        \"topK\": {\n-          \"type\": \"number\",\n-          \"description\": \"Optional number of results to return (default: 8, recommended: 8-15 for exploration)\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing the codebase to search. All search operations are strictly scoped to this directory and its subdirectories. **ALWAYS provide this parameter** - search will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"query\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"astgrep_search\": {\n-    \"name\": \"astgrep_search\",\n-    \"description\": \"AST pattern matching with meta-variables. Structural code analysis. Requires external ast-grep CLI.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"pattern\": {\n-          \"type\": \"string\",\n-          \"description\": \"AST pattern to search for using meta-variables (e.g., 'function $NAME($$$ARGS) { $$$ }')\"\n-        },\n-        \"language\": {\n-          \"type\": \"string\",\n-          \"description\": \"Programming language (javascript, typescript, python, rust, go, java, etc.) - required for proper AST parsing\"\n-        },\n-        \"paths\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Optional specific paths within working directory to search (defaults to entire working directory)\"\n-        },\n-        \"context\": {\n-          \"type\": \"number\",\n-          \"description\": \"Optional number of context lines to include around matches (default: 3, recommended: 3-5)\"\n-        },\n-        \"strictness\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"cst\",\n-            \"smart\",\n-            \"ast\",\n-            \"relaxed\"\n-          ],\n-          \"description\": \"Pattern matching strictness: 'smart' (recommended), 'ast' (precise), 'relaxed' (flexible)\"\n-        },\n-        \"outputFormat\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"compact\",\n-            \"pretty\"\n-          ],\n-          \"description\": \"Output format: 'compact' (scanning), 'pretty' (detailed analysis)\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing source code to analyze with AST patterns. All AST operations are strictly scoped to this directory. **ALWAYS provide this parameter** - analysis will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"pattern\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"astgrep_replace\": {\n-    \"name\": \"astgrep_replace\",\n-    \"description\": \"AST-based code transformation. Pattern-based refactoring with dry-run support.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"pattern\": {\n-          \"type\": \"string\",\n-          \"description\": \"AST pattern to match for transformation using meta-variables\"\n-        },\n-        \"replacement\": {\n-          \"type\": \"string\",\n-          \"description\": \"Replacement pattern with meta-variable substitutions\"\n-        },\n-        \"language\": {\n-          \"type\": \"string\",\n-          \"description\": \"Programming language for transformation (javascript, typescript, python, etc.)\"\n-        },\n-        \"paths\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Optional specific paths within working directory to transform\"\n-        },\n-        \"dryRun\": {\n-          \"type\": \"boolean\",\n-          \"description\": \"**RECOMMENDED** - Preview changes without applying (always use first)\"\n-        },\n-        \"interactive\": {\n-          \"type\": \"boolean\",\n-          \"description\": \"Enable interactive confirmation for each transformation\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing code to transform. All transformations are strictly scoped to this directory and its subdirectories. **ALWAYS provide this parameter** - transformation will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"pattern\",\n-        \"replacement\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"astgrep_lint\": {\n-    \"name\": \"astgrep_lint\",\n-    \"description\": \"YAML-based code validation rules. Custom linting with structural patterns.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"rules\": {\n-          \"type\": \"string\",\n-          \"description\": \"YAML rule content or path to rule file within working directory\"\n-        },\n-        \"paths\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Optional specific paths within working directory to validate\"\n-        },\n-        \"severity\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"error\",\n-            \"warning\",\n-            \"info\",\n-            \"hint\"\n-          ],\n-          \"description\": \"Minimum severity level to report (recommended: start with 'error')\"\n-        },\n-        \"format\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"json\",\n-            \"text\"\n-          ],\n-          \"description\": \"Output format: 'json' (programmatic), 'text' (human-readable)\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing code to validate with quality rules. All validation is strictly scoped to this directory. **ALWAYS provide this parameter** - validation will fail without it.\"\n-        }\n-      },\n-      \"required\": [\n-        \"rules\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"retrieve_overflow\": {\n-    \"name\": \"retrieve_overflow\",\n-    \"description\": \"Retrieve truncated tool outputs. Access overflow content when responses exceed 25k tokens.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"overflowFile\": {\n-          \"type\": \"string\",\n-          \"description\": \"Overflow filename from truncation notice (e.g., 'overflow_executenodejs_1234567890.json')\"\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**REQUIRED** - Working directory where overflow file is stored (same as original tool call)\"\n-        },\n-        \"chunkIndex\": {\n-          \"type\": \"number\",\n-          \"description\": \"Optional chunk index to retrieve (default: 0 for next chunk). Use metadata from previous call to get subsequent chunks.\"\n-        },\n-        \"listFiles\": {\n-          \"type\": \"boolean\",\n-          \"description\": \"Optional: List all available overflow files instead of retrieving content\"\n-        },\n-        \"cleanup\": {\n-          \"type\": \"boolean\",\n-          \"description\": \"Optional: Clean up old overflow files (>24 hours) in addition to retrieving content\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\"\n-      ],\n-      \"additionalProperties\": false\n-    }\n-  },\n-  \"batch_execute\": {\n-    \"name\": \"batch_execute\",\n-    \"description\": \"Execute multiple MCP tools in parallel. Coordinated batch operations for efficiency.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"operations\": {\n-          \"type\": \"array\",\n-          \"description\": \"Array of tool operations to execute in sequence\",\n-          \"items\": {\n-            \"type\": \"object\",\n-            \"properties\": {\n-              \"tool\": {\n-                \"type\": \"string\",\n-                \"enum\": [\n-                  \"executenodejs\",\n-                  \"executedeno\",\n-                  \"executebash\",\n-                  \"searchcode\",\n-                  \"astgrep_search\",\n-                  \"astgrep_replace\",\n-                  \"astgrep_lint\",\n-                  \"astgrep_analyze\",\n-                  \"astgrep_enhanced_search\",\n-                  \"astgrep_multi_pattern\",\n-                  \"astgrep_constraint_search\",\n-                  \"astgrep_project_init\",\n-                  \"astgrep_project_scan\",\n-                  \"astgrep_test\",\n-                  \"astgrep_validate_rules\",\n-                  \"astgrep_debug_rule\",\n-                  \"sequentialthinking\"\n-                ],\n-                \"description\": \"Name of the MCP tool to execute\"\n-              },\n-              \"parameters\": {\n-                \"type\": \"object\",\n-                \"description\": \"Parameters to pass to the tool (same as individual tool parameters)\"\n-              }\n-            },\n-            \"required\": [\n-              \"tool\",\n-              \"parameters\"\n-            ]\n-          },\n-          \"minItems\": 1\n-        }\n-      },\n-      \"required\": [\n-        \"operations\"\n-      ]\n-    }\n-  },\n-  \"sequentialthinking\": {\n-    \"name\": \"sequentialthinking\",\n-    \"description\": \"Process and store sequential thoughts locally. Required for complex reasoning chains.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"thoughts\": {\n-          \"type\": [\n-            \"string\",\n-            \"array\"\n-          ],\n-          \"description\": \"Single thought (string) or multiple thoughts (array of strings) to process\",\n-          \"items\": {\n-            \"type\": \"string\",\n-            \"minLength\": 1\n-          },\n-          \"minLength\": 1\n-        },\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for storing thought data locally in JSON files. **ALWAYS provide this parameter** - thinking storage will fail without it.\"\n-        },\n-        \"parentId\": {\n-          \"type\": \"string\",\n-          \"description\": \"Optional: Parent thought ID for creating thought chains\"\n-        }\n-      },\n-      \"required\": [\n-        \"thoughts\",\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"project_analyze\": {\n-    \"name\": \"project_analyze\",\n-    \"description\": \"Analyze entire project structure, dependencies, architecture patterns. Returns JSON with metrics, issues, suggestions.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"Project root directory\"\n-        },\n-        \"depth\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"quick\",\n-            \"deep\",\n-            \"complete\"\n-          ],\n-          \"description\": \"Analysis depth (default: deep)\"\n-        },\n-        \"focus\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Focus areas: deps, security, performance, architecture\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"file_navigator\": {\n-    \"name\": \"file_navigator\",\n-    \"description\": \"Smart file system navigation with tree view, relationships, and intelligent filtering.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"Directory to navigate\"\n-        },\n-        \"view\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"tree\",\n-            \"flat\",\n-            \"related\",\n-            \"changes\"\n-          ],\n-          \"description\": \"Navigation view type\"\n-        },\n-        \"filter\": {\n-          \"type\": \"string\",\n-          \"description\": \"Filter pattern (glob, extension, or keyword)\"\n-        },\n-        \"depth\": {\n-          \"type\": \"number\",\n-          \"description\": \"Maximum depth for tree view (default: 3)\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"dependency_analyzer\": {\n-    \"name\": \"dependency_analyzer\",\n-    \"description\": \"Analyze imports, exports, package dependencies. Detect unused deps, circular refs, security issues.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"Project root directory\"\n-        },\n-        \"scope\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"internal\",\n-            \"external\",\n-            \"all\"\n-          ],\n-          \"description\": \"Dependency scope\"\n-        },\n-        \"format\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"graph\",\n-            \"list\",\n-            \"issues\"\n-          ],\n-          \"description\": \"Output format\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\"\n-      ]\n-    }\n-  },\n-  \"performance_profiler\": {\n-    \"name\": \"performance_profiler\",\n-    \"description\": \"Profile code execution, memory usage, bottlenecks. Built-in benchmarking with optimization hints.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"Working directory for profiling\"\n-        },\n-        \"target\": {\n-          \"type\": \"string\",\n-          \"description\": \"Code to profile (function name, file path, or inline code)\"\n-        },\n-        \"iterations\": {\n-          \"type\": \"number\",\n-          \"description\": \"Benchmark iterations (default: 1000)\"\n-        },\n-        \"metrics\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Metrics to collect: time, memory, cpu\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\",\n-        \"target\"\n-      ]\n-    }\n-  },\n-  \"quality_analyzer\": {\n-    \"name\": \"quality_analyzer\",\n-    \"description\": \"Real-time code quality scoring: complexity, maintainability, test coverage. Actionable improvement suggestions.\",\n-    \"inputSchema\": {\n-      \"type\": \"object\",\n-      \"properties\": {\n-        \"workingDirectory\": {\n-          \"type\": \"string\",\n-          \"description\": \"Project root directory\"\n-        },\n-        \"scope\": {\n-          \"type\": \"string\",\n-          \"enum\": [\n-            \"file\",\n-            \"directory\",\n-            \"project\"\n-          ],\n-          \"description\": \"Analysis scope\"\n-        },\n-        \"path\": {\n-          \"type\": \"string\",\n-          \"description\": \"Specific file/directory path\"\n-        },\n-        \"metrics\": {\n-          \"type\": \"array\",\n-          \"items\": {\n-            \"type\": \"string\"\n-          },\n-          \"description\": \"Quality metrics to analyze\"\n-        }\n-      },\n-      \"required\": [\n-        \"workingDirectory\"\n-      ]\n-    }\n-  }\n-}\n\\ No newline at end of file\n"
    },
    {
      "type": "text",
      "text": "\n[Exit code: 0, Execution time: 22ms]"
    }
  ],
  "estimatedTokens": 12493
}