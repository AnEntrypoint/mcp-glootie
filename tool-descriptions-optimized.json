{
  "executenodejs": {
    "name": "executenodejs",
    "description": "Execute JavaScript with Node.js. Supports batching, ESM/CommonJS, has overflow handling. workingDirectory required.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "JavaScript code to execute - use for debugging, testing hypotheses, and investigation"
        },
        "timeout": {
          "type": "number",
          "description": "Optional timeout in milliseconds (default: 120000)"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for code execution. All file operations, module resolution, and process.cwd() will use this directory as the base context. **ALWAYS provide this parameter** - execution will fail without it."
        }
      },
      "required": [
        "code",
        "workingDirectory"
      ]
    }
  },
  "executedeno": {
    "name": "executedeno",
    "description": "Execute TypeScript/JavaScript with Deno. Type-safe execution with security permissions. workingDirectory required.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "JavaScript/TypeScript code to execute - use for debugging, testing hypotheses, and investigation"
        },
        "timeout": {
          "type": "number",
          "description": "Optional timeout in milliseconds (default: 120000)"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for Deno execution. All imports, file operations, and type resolution occur relative to this directory. **ALWAYS provide this parameter** - execution will fail without it."
        }
      },
      "required": [
        "code",
        "workingDirectory"
      ]
    }
  },
  "executebash": {
    "name": "executebash",
    "description": "Execute bash commands with timeout. Use for system operations, file management. workingDirectory optional.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of bash commands to execute in sequence"
        },
        "command": {
          "type": "string",
          "description": "Single bash command to execute (alternative to commands array)"
        },
        "timeout": {
          "type": "number",
          "description": "Optional timeout in milliseconds (default: 120000)"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for bash command execution. All commands execute in this directory context. **ALWAYS provide this parameter** - execution will fail without it."
        }
      },
      "required": [
        "workingDirectory"
      ]
    }
  },
  "searchcode": {
    "name": "searchcode",
    "description": "AI semantic code search with .gitignore support. Natural language queries, line numbers in results. workingDirectory required.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Semantic search query for code - use broad, conceptual terms for best results"
        },
        "folders": {
          "type": "string",
          "description": "Optional comma-separated list of folders to search within working directory"
        },
        "extensions": {
          "type": "string",
          "description": "Optional comma-separated list of file extensions to include (default: js,ts)"
        },
        "ignores": {
          "type": "string",
          "description": "Optional comma-separated list of patterns to ignore (default: node_modules)"
        },
        "topK": {
          "type": "number",
          "description": "Optional number of results to return (default: 8, recommended: 8-15 for exploration)"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing the codebase to search. All search operations are strictly scoped to this directory and its subdirectories. **ALWAYS provide this parameter** - search will fail without it."
        }
      },
      "required": [
        "query",
        "workingDirectory"
      ]
    }
  },
  "astgrep_search": {
    "name": "astgrep_search",
    "description": "AST pattern matching with meta-variables. Structural code analysis. Requires external ast-grep CLI.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "AST pattern to search for using meta-variables (e.g., 'function $NAME($$$ARGS) { $$$ }')"
        },
        "language": {
          "type": "string",
          "description": "Programming language (javascript, typescript, python, rust, go, java, etc.) - required for proper AST parsing"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional specific paths within working directory to search (defaults to entire working directory)"
        },
        "context": {
          "type": "number",
          "description": "Optional number of context lines to include around matches (default: 3, recommended: 3-5)"
        },
        "strictness": {
          "type": "string",
          "enum": [
            "cst",
            "smart",
            "ast",
            "relaxed"
          ],
          "description": "Pattern matching strictness: 'smart' (recommended), 'ast' (precise), 'relaxed' (flexible)"
        },
        "outputFormat": {
          "type": "string",
          "enum": [
            "compact",
            "pretty"
          ],
          "description": "Output format: 'compact' (scanning), 'pretty' (detailed analysis)"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing source code to analyze with AST patterns. All AST operations are strictly scoped to this directory. **ALWAYS provide this parameter** - analysis will fail without it."
        }
      },
      "required": [
        "pattern",
        "workingDirectory"
      ]
    }
  },
  "astgrep_replace": {
    "name": "astgrep_replace",
    "description": "AST-based code transformation. Pattern-based refactoring with dry-run support.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "AST pattern to match for transformation using meta-variables"
        },
        "replacement": {
          "type": "string",
          "description": "Replacement pattern with meta-variable substitutions"
        },
        "language": {
          "type": "string",
          "description": "Programming language for transformation (javascript, typescript, python, etc.)"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional specific paths within working directory to transform"
        },
        "dryRun": {
          "type": "boolean",
          "description": "**RECOMMENDED** - Preview changes without applying (always use first)"
        },
        "interactive": {
          "type": "boolean",
          "description": "Enable interactive confirmation for each transformation"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing code to transform. All transformations are strictly scoped to this directory and its subdirectories. **ALWAYS provide this parameter** - transformation will fail without it."
        }
      },
      "required": [
        "pattern",
        "replacement",
        "workingDirectory"
      ]
    }
  },
  "astgrep_lint": {
    "name": "astgrep_lint",
    "description": "YAML-based code validation rules. Custom linting with structural patterns.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "string",
          "description": "YAML rule content or path to rule file within working directory"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional specific paths within working directory to validate"
        },
        "severity": {
          "type": "string",
          "enum": [
            "error",
            "warning",
            "info",
            "hint"
          ],
          "description": "Minimum severity level to report (recommended: start with 'error')"
        },
        "format": {
          "type": "string",
          "enum": [
            "json",
            "text"
          ],
          "description": "Output format: 'json' (programmatic), 'text' (human-readable)"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path containing code to validate with quality rules. All validation is strictly scoped to this directory. **ALWAYS provide this parameter** - validation will fail without it."
        }
      },
      "required": [
        "rules",
        "workingDirectory"
      ]
    }
  },
  "retrieve_overflow": {
    "name": "retrieve_overflow",
    "description": "Retrieve truncated tool outputs. Access overflow content when responses exceed 25k tokens.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "overflowFile": {
          "type": "string",
          "description": "Overflow filename from truncation notice (e.g., 'overflow_executenodejs_1234567890.json')"
        },
        "workingDirectory": {
          "type": "string",
          "description": "**REQUIRED** - Working directory where overflow file is stored (same as original tool call)"
        },
        "chunkIndex": {
          "type": "number",
          "description": "Optional chunk index to retrieve (default: 0 for next chunk). Use metadata from previous call to get subsequent chunks."
        },
        "listFiles": {
          "type": "boolean",
          "description": "Optional: List all available overflow files instead of retrieving content"
        },
        "cleanup": {
          "type": "boolean",
          "description": "Optional: Clean up old overflow files (>24 hours) in addition to retrieving content"
        }
      },
      "required": [
        "workingDirectory"
      ],
      "additionalProperties": false
    }
  },
  "batch_execute": {
    "name": "batch_execute",
    "description": "Execute multiple MCP tools in parallel. Coordinated batch operations for efficiency.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "description": "Array of tool operations to execute in sequence",
          "items": {
            "type": "object",
            "properties": {
              "tool": {
                "type": "string",
                "enum": [
                  "executenodejs",
                  "executedeno",
                  "executebash",
                  "searchcode",
                  "astgrep_search",
                  "astgrep_replace",
                  "astgrep_lint",
                  "astgrep_analyze",
                  "astgrep_enhanced_search",
                  "astgrep_multi_pattern",
                  "astgrep_constraint_search",
                  "astgrep_project_init",
                  "astgrep_project_scan",
                  "astgrep_test",
                  "astgrep_validate_rules",
                  "astgrep_debug_rule",
                  "sequentialthinking"
                ],
                "description": "Name of the MCP tool to execute"
              },
              "parameters": {
                "type": "object",
                "description": "Parameters to pass to the tool (same as individual tool parameters)"
              }
            },
            "required": [
              "tool",
              "parameters"
            ]
          },
          "minItems": 1
        }
      },
      "required": [
        "operations"
      ]
    }
  },
  "sequentialthinking": {
    "name": "sequentialthinking",
    "description": "Process and store sequential thoughts locally. Required for complex reasoning chains.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "thoughts": {
          "type": [
            "string",
            "array"
          ],
          "description": "Single thought (string) or multiple thoughts (array of strings) to process",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "minLength": 1
        },
        "workingDirectory": {
          "type": "string",
          "description": "**MANDATORY WORKING DIRECTORY** - workingDirectory parameter is **REQUIRED** and **MUST BE SET**. Specify the exact directory path for storing thought data locally in JSON files. **ALWAYS provide this parameter** - thinking storage will fail without it."
        },
        "parentId": {
          "type": "string",
          "description": "Optional: Parent thought ID for creating thought chains"
        }
      },
      "required": [
        "thoughts",
        "workingDirectory"
      ]
    }
  },
  "project_analyze": {
    "name": "project_analyze",
    "description": "Analyze entire project structure, dependencies, architecture patterns. Returns JSON with metrics, issues, suggestions.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "workingDirectory": {
          "type": "string",
          "description": "Project root directory"
        },
        "depth": {
          "type": "string",
          "enum": [
            "quick",
            "deep",
            "complete"
          ],
          "description": "Analysis depth (default: deep)"
        },
        "focus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Focus areas: deps, security, performance, architecture"
        }
      },
      "required": [
        "workingDirectory"
      ]
    }
  },
  "git_intelligence": {
    "name": "git_intelligence",
    "description": "Git operations: blame, history, diff, branch analysis. Smart git workflow integration with insights.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "workingDirectory": {
          "type": "string",
          "description": "Git repository root"
        },
        "operation": {
          "type": "string",
          "enum": [
            "blame",
            "history",
            "diff",
            "branches",
            "status",
            "insights"
          ],
          "description": "Git operation"
        },
        "path": {
          "type": "string",
          "description": "File/directory path for operation"
        },
        "limit": {
          "type": "number",
          "description": "Limit results (default: 20)"
        }
      },
      "required": [
        "workingDirectory",
        "operation"
      ]
    }
  },
  "file_navigator": {
    "name": "file_navigator",
    "description": "Smart file system navigation with tree view, relationships, and intelligent filtering.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "workingDirectory": {
          "type": "string",
          "description": "Directory to navigate"
        },
        "view": {
          "type": "string",
          "enum": [
            "tree",
            "flat",
            "related",
            "changes"
          ],
          "description": "Navigation view type"
        },
        "filter": {
          "type": "string",
          "description": "Filter pattern (glob, extension, or keyword)"
        },
        "depth": {
          "type": "number",
          "description": "Maximum depth for tree view (default: 3)"
        }
      },
      "required": [
        "workingDirectory"
      ]
    }
  },
  "dependency_analyzer": {
    "name": "dependency_analyzer",
    "description": "Analyze imports, exports, package dependencies. Detect unused deps, circular refs, security issues.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "workingDirectory": {
          "type": "string",
          "description": "Project root directory"
        },
        "scope": {
          "type": "string",
          "enum": [
            "internal",
            "external",
            "all"
          ],
          "description": "Dependency scope"
        },
        "format": {
          "type": "string",
          "enum": [
            "graph",
            "list",
            "issues"
          ],
          "description": "Output format"
        }
      },
      "required": [
        "workingDirectory"
      ]
    }
  },
  "performance_profiler": {
    "name": "performance_profiler",
    "description": "Profile code execution, memory usage, bottlenecks. Built-in benchmarking with optimization hints.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "workingDirectory": {
          "type": "string",
          "description": "Working directory for profiling"
        },
        "target": {
          "type": "string",
          "description": "Code to profile (function name, file path, or inline code)"
        },
        "iterations": {
          "type": "number",
          "description": "Benchmark iterations (default: 1000)"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Metrics to collect: time, memory, cpu"
        }
      },
      "required": [
        "workingDirectory",
        "target"
      ]
    }
  },
  "quality_analyzer": {
    "name": "quality_analyzer",
    "description": "Real-time code quality scoring: complexity, maintainability, test coverage. Actionable improvement suggestions.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "workingDirectory": {
          "type": "string",
          "description": "Project root directory"
        },
        "scope": {
          "type": "string",
          "enum": [
            "file",
            "directory",
            "project"
          ],
          "description": "Analysis scope"
        },
        "path": {
          "type": "string",
          "description": "Specific file/directory path"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Quality metrics to analyze"
        }
      },
      "required": [
        "workingDirectory"
      ]
    }
  }
}