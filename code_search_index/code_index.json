{
  "timestamp": 1758271676870,
  "chunks": [
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "import fs from 'fs';\nimport path from 'path';\nimport ignore from 'ignore';",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "class ASTGrepHelper {\n  constructor(language = 'javascript') {\n    this.language = language;\n    this.astGrep = null;\n    this.initializeASTGrep();\n  }\n\n  async initializeASTGrep() {\n    try {\n      const { parse, Lang } = await import('@ast-grep/napi');\n      this.parse = parse;\n      this.Lang = Lang;\n      this.astGrep = { parse, Lang };\n    } catch (error) {\n      console.warn('ast-grep not available, using fallback pattern matching');\n      this.astGrep = null;\n    }\n  }\n\n  async parseCode(code) {\n    if (!this.astGrep) {\n      throw new Error('ast-grep not available');\n    }\n\n    try {\n      const { parse, Lang } = this.astGrep;",
      "startLine": 4,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let lang = Lang.JavaScript;\n\n      if (this.language === 'typescript') {\n        lang = Lang.TypeScript;\n      } else if (this.language === 'jsx') {\n        lang = Lang.JSX;\n      } else if (this.language === 'tsx') {\n        lang = Lang.TSX;\n      }\n\n      return parse(lang, code);\n    } catch (error) {\n      throw new Error(`Failed to parse ${this.language} code: ${error.message}`);\n    }\n  }\n\n  async searchPattern(code, pattern) {\n    if (!this.astGrep) {",
      "startLine": 30,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');",
      "startLine": 48,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = [];",
      "startLine": 49,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let match;\n      while ((match = regex.exec(code)) !== null) {\n        matches.push({\n          text: match[0],\n          start: match.index,\n          end: match.index + match[0].length,\n          line: this.getLineFromPosition(code, match.index),\n          column: this.getColumnFromPosition(code, match.index)\n        });\n      }\n      return matches;\n    }\n\n    try {",
      "startLine": 50,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 64,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const root = ast.root();",
      "startLine": 65,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const node = root.find(pattern);\n\n      if (!node) return [];",
      "startLine": 66,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const range = node.range();\n      return [{\n        text: node.text(),\n        start: range.start.index,\n        end: range.end.index,\n        line: range.start.line,\n        column: range.start.column\n      }];\n    } catch (error) {\n      throw new Error(`Pattern search failed: ${error.message}`);\n    }\n  }\n\n  async replacePattern(code, pattern, replacement) {\n    if (!this.astGrep) {",
      "startLine": 70,
      "endLine": 85
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');\n      return code.replace(regex, replacement);\n    }\n\n    try {",
      "startLine": 85,
      "endLine": 90
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 90,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const root = ast.root();",
      "startLine": 91,
      "endLine": 92
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const node = root.find(pattern);\n\n      if (!node) return code;",
      "startLine": 92,
      "endLine": 96
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const edit = node.replace(replacement);\n      return root.commitEdits([edit]);\n    } catch (error) {\n      throw new Error(`Pattern replacement failed: ${error.message}`);\n    }\n  }\n\n  escapeRegex(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n\n  getLineFromPosition(code, position) {",
      "startLine": 96,
      "endLine": 108
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const before = code.substring(0, position);\n    return before.split('\\n').length - 1;\n  }\n\n  getColumnFromPosition(code, position) {",
      "startLine": 108,
      "endLine": 113
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const before = code.substring(0, position);",
      "startLine": 113,
      "endLine": 114
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const lastNewline = before.lastIndexOf('\\n');\n    return lastNewline === -1 ? position : position - lastNewline - 1;\n  }\n}\n\nexport async function astSearch(filePath, pattern, options = {}) {\n  const {\n    language = 'javascript',\n    recursive = false,\n    maxResults = 100,\n    ignorePatterns = []\n  } = options;\n\n  try {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }",
      "startLine": 114,
      "endLine": 132
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 132,
      "endLine": 133
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 133,
      "endLine": 135
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 135,
      "endLine": 137
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 137,
      "endLine": 138
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = await helper.searchPattern(content, pattern);\n\n        return matches.map(match => ({\n          file,\n          content: match.text,\n          line: match.line,\n          column: match.column,\n          start: match.start,\n          end: match.end\n        }));\n      } catch (error) {\n        return [{ file, error: error.message }];\n      }\n    };\n\n    if (fs.statSync(filePath).isDirectory()) {",
      "startLine": 138,
      "endLine": 154
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(filePath, {\n        recursive,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns\n      });\n\n      for (const file of files.slice(0, maxResults)) {",
      "startLine": 154,
      "endLine": 161
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResults = await processFile(file);\n        results.push(...fileResults);\n      }\n    } else {",
      "startLine": 161,
      "endLine": 165
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResults = await processFile(filePath);\n      results.push(...fileResults);\n    }\n\n    return results.slice(0, maxResults);\n  } catch (error) {\n    throw new Error(`AST search failed: ${error.message}`);\n  }\n}\n\nexport async function astReplace(filePath, pattern, replacement, options = {}) {\n  const {\n    language = 'javascript',\n    recursive = false,\n    backup = true,\n    ignorePatterns = []\n  } = options;\n\n  try {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }",
      "startLine": 165,
      "endLine": 188
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 188,
      "endLine": 189
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 189,
      "endLine": 191
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 191,
      "endLine": 193
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');\n\n        if (backup) {",
      "startLine": 193,
      "endLine": 196
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const backupPath = file + '.backup';\n          fs.writeFileSync(backupPath, content);\n        }",
      "startLine": 196,
      "endLine": 200
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const newContent = await helper.replacePattern(content, pattern, replacement);\n\n        if (newContent !== content) {\n          fs.writeFileSync(file, newContent);\n          return { file, status: 'modified', changes: true };\n        } else {\n          return { file, status: 'unchanged', changes: false };\n        }\n      } catch (error) {\n        return { file, error: error.message, status: 'failed' };\n      }\n    };\n\n    if (fs.statSync(filePath).isDirectory()) {",
      "startLine": 200,
      "endLine": 214
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(filePath, {\n        recursive,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns\n      });\n\n      for (const file of files) {",
      "startLine": 214,
      "endLine": 221
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await processFile(file);\n        results.push(result);\n      }\n    } else {",
      "startLine": 221,
      "endLine": 225
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await processFile(filePath);\n      results.push(result);\n    }\n\n    return results;\n  } catch (error) {\n    throw new Error(`AST replace failed: ${error.message}`);\n  }\n}\n\nexport async function astLint(filePath, rules = [], options = {}) {\n  const {\n    language = 'javascript',\n    recursive = false,\n    ignorePatterns = []\n  } = options;\n\n  try {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }",
      "startLine": 225,
      "endLine": 247
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 247,
      "endLine": 248
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 248,
      "endLine": 250
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 250,
      "endLine": 252
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 252,
      "endLine": 253
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const issues = [];\n\n        for (const rule of rules) {",
      "startLine": 253,
      "endLine": 256
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = await helper.searchPattern(content, rule.pattern);\n\n          matches.forEach(match => {\n            issues.push({\n              file,\n              rule: rule.name,\n              message: rule.message || `Pattern \"${rule.pattern}\" matched`,\n              severity: rule.severity || 'warning',\n              line: match.line,\n              column: match.column,\n              content: match.text\n            });\n          });\n        }\n\n        return issues;\n      } catch (error) {\n        return [{ file, error: error.message }];\n      }\n    };\n\n    if (fs.statSync(filePath).isDirectory()) {",
      "startLine": 256,
      "endLine": 278
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(filePath, {\n        recursive,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns\n      });\n\n      for (const file of files) {",
      "startLine": 278,
      "endLine": 285
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileIssues = await processFile(file);\n        results.push(...fileIssues);\n      }\n    } else {",
      "startLine": 285,
      "endLine": 289
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileIssues = await processFile(filePath);\n      results.push(...fileIssues);\n    }\n\n    return results;\n  } catch (error) {\n    throw new Error(`AST lint failed: ${error.message}`);\n  }\n}\n\nasync function findFiles(dir, options = {}) {\n  const {\n    recursive = true,\n    extensions = ['.js', '.ts', '.jsx', '.tsx'],\n    ignorePatterns = [],\n    useGitignore = true\n  } = options;",
      "startLine": 289,
      "endLine": 307
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];\n\n  // Combine default patterns, gitignore patterns, and custom patterns",
      "startLine": 307,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const allPatterns = [\n    ...getDefaultIgnorePatterns(),\n    ...(useGitignore ? loadGitignorePatterns(dir) : []),\n    ...ignorePatterns\n  ];\n\n  // Create ignore instance",
      "startLine": 310,
      "endLine": 317
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ig = ignore();\n  ig.add(allPatterns);",
      "startLine": 317,
      "endLine": 320
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const scan = async (currentDir) => {",
      "startLine": 320,
      "endLine": 321
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const entries = fs.readdirSync(currentDir, { withFileTypes: true });\n\n    for (const entry of entries) {",
      "startLine": 321,
      "endLine": 324
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fullPath = path.join(currentDir, entry.name);\n\n      // Only apply ignore patterns to paths within the base directory",
      "startLine": 324,
      "endLine": 327
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let shouldIgnore = false;\n      if (fullPath.startsWith(dir)) {",
      "startLine": 327,
      "endLine": 329
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const relativePath = path.relative(dir, fullPath);\n        shouldIgnore = ig.ignores(relativePath) || ig.ignores(entry.name);\n      }\n\n      if (shouldIgnore) {\n        continue;\n      }\n\n      if (entry.isDirectory() && recursive) {\n        await scan(fullPath);\n      } else if (entry.isFile()) {\n        if (extensions.some(ext => fullPath.endsWith(ext))) {\n          results.push(fullPath);\n        }\n      }\n    }\n  };\n\n  await scan(dir);\n  return results;\n}\n\n// Default ignore patterns for performance\nexport function getDefaultIgnorePatterns(workingDirectory) {\n  return [\n    '**/node_modules/**',\n    '**/.git/**',\n    '**/.next/**',\n    '**/.nuxt/**',\n    '**/.vuepress/**',\n    '**/.docusaurus/**',\n    '**/dist/**',\n    '**/build/**',\n    '**/out/**',\n    '**/coverage/**',\n    '**/.nyc_output/**',\n    '**/.cache/**',\n    '**/.parcel-cache/**',\n    '**/.turbo/**',\n    '**/.nx/**',\n    '**/.swc/**',\n    '**/bower_components/**',\n    '**/jspm_packages/**',\n    '**/.pnp/**',\n    '**/__tests__/**',\n    '**/__mocks__/**',\n    '**/__snapshots__/**',\n    '**/.jest/**',\n    '**/.mocha/**',\n    '**/.cypress/**',\n    '**/.playwright/**',\n    '**/*.min.js',\n    '**/*.bundle.js',\n    '**/*.chunk.js',\n    '**/package-lock.json',\n    '**/yarn.lock',\n    '**/pnpm-lock.yaml',\n    '**/.npmrc',\n    '**/.yarnrc',\n    '**/*.log',\n    '**/tmp/**',\n    '**/temp/**',\n    '**/.tmp/**',\n  '**/.DS_Store',\n  '**/Thumbs.db'\n  ];\n}\n\n// Load gitignore patterns from directory",
      "startLine": 329,
      "endLine": 398
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function loadGitignorePatterns(dir) {",
      "startLine": 398,
      "endLine": 399
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const gitignorePath = path.join(dir, '.gitignore');",
      "startLine": 399,
      "endLine": 400
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const patterns = [];\n\n  if (fs.existsSync(gitignorePath)) {\n    try {",
      "startLine": 400,
      "endLine": 404
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(gitignorePath, 'utf8');",
      "startLine": 404,
      "endLine": 405
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const lines = content.split('\\n')\n        .map(line => line.trim())\n        .filter(line => line && !line.startsWith('#'));\n\n      patterns.push(...lines);\n    } catch (error) {\n      console.warn(`Failed to read .gitignore: ${error.message}`);\n    }\n  }\n\n  return patterns;\n}\n\nexport const DEFAULT_LINT_RULES = [\n  {\n    name: 'no-console-log',\n    pattern: 'console.log($$)',\n    message: 'Avoid using console.log in production code',\n    severity: 'warning'\n  },\n  {\n    name: 'no-debugger',\n    pattern: 'debugger',\n    message: 'Remove debugger statements',\n    severity: 'error'\n  },\n  {\n    name: 'no-var',\n    pattern: 'var $A',\n    message: 'Use let or const instead of var',\n    severity: 'warning'\n  }\n];\n\nexport const AST_TOOLS = [\n  {\n    name: 'ast_search',\n    description: 'Find code patterns using AST grep. Search for specific code structures, variable declarations, function calls, or syntax patterns across files. This is the preferred tool for targeted code searches when you know what pattern to look for.',\n    supported_operations: ['pattern matching', 'code structure analysis', 'syntax search', 'variable declaration finding', 'function call detection'],\n    use_cases: ['Find all console.log statements', 'Locate variable declarations', 'Find function calls with specific patterns', 'Search for class definitions', 'Identify import statements'],\n    examples: [\n      'console.log($MSG)',\n      'var $NAME = $VALUE',\n      'function $NAME($ARGS) { $BODY }',\n      'class $CLASS_NAME { $MEMBERS }',\n      'import {$IMPORTS} from \\'$MODULE\\'',\n      'const $NAME = require(\\'$MODULE\\')',\n      'if ($CONDITION) { $BODY }',\n      'try { $TRY_BODY } catch ($ERROR) { $CATCH_BODY }',\n      'return $EXPRESSION',\n      'throw new $ERROR_TYPE($MSG)'\n    ],\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'File or directory path to search'\n        },\n        pattern: {\n          type: 'string',\n          description: 'AST pattern to search (e.g., \"console.log($$)\", \"function $NAME($ARGS) {}\")'\n        },\n        language: {\n          type: 'string',\n          enum: ['javascript', 'typescript', 'jsx', 'tsx'],\n          default: 'javascript',\n          description: 'Programming language'\n        },\n        recursive: {\n          type: 'boolean',\n          default: false,\n          description: 'Search recursively in directories'\n        },\n        maxResults: {\n          type: 'number',\n          default: 50,\n          description: 'Maximum number of results'\n        }\n      },\n      required: ['path', 'pattern']\n    },\n    handler: async (args) => {",
      "startLine": 405,
      "endLine": 488
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astSearch(args.path, args.pattern, {\n        language: args.language,\n        recursive: args.recursive,\n        maxResults: args.maxResults,\n        ignorePatterns: getDefaultIgnorePatterns()\n      });\n\n      return {\n        results: results.length,\n        matches: results\n      };\n    }\n  },\n  {\n    name: 'ast_replace',\n    description: 'Replace code patterns using AST grep. Safely transform code by replacing patterns while preserving syntax structure. Ideal for refactoring, migrating APIs, or updating deprecated syntax.',\n    supported_operations: ['code refactoring', 'pattern replacement', 'syntax transformation', 'API migration', 'deprecated code updates'],\n    use_cases: ['Replace console.log with logger', 'Convert var to let/const', 'Rename function or variable names', 'Update deprecated APIs', 'Modernize syntax patterns'],\n    examples: [\n      'Pattern: console.log($MSG) → Replacement: logger.info($MSG)',\n      'Pattern: var $NAME = $VALUE → Replacement: let $NAME = $VALUE',\n      'Pattern: require(\\'$MODULE\\') → Replacement: import $MODULE from \\'$MODULE\\'',\n      'Pattern: .then($CB) → Replacement: await $CB',\n      'Pattern: function($ARGS) { $BODY } → Replacement: ($ARGS) => { $BODY }',\n      'Pattern: new Promise(($RESOLVE, $REJECT) => { $BODY }) → Replacement: new Promise(async ($RESOLVE, $REJECT) => { $BODY })'\n    ],\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'File or directory path to modify'\n        },\n        pattern: {\n          type: 'string',\n          description: 'AST pattern to find (e.g., \"console.log($MSG)\", \"var $NAME\")'\n        },\n        replacement: {\n          type: 'string',\n          description: 'Replacement code (e.g., \"logger.info($MSG)\", \"let $NAME\")'\n        },\n        language: {\n          type: 'string',\n          enum: ['javascript', 'typescript', 'jsx', 'tsx'],\n          default: 'javascript',\n          description: 'Programming language'\n        },\n        recursive: {\n          type: 'boolean',\n          default: false,\n          description: 'Apply recursively in directories'\n        },\n        backup: {\n          type: 'boolean',\n          default: true,\n          description: 'Create backup files before modification'\n        }\n      },\n      required: ['path', 'pattern', 'replacement']\n    },\n    handler: async (args) => {",
      "startLine": 488,
      "endLine": 549
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astReplace(args.path, args.pattern, args.replacement, {\n        language: args.language,\n        recursive: args.recursive,\n        backup: args.backup,\n        ignorePatterns: getDefaultIgnorePatterns()\n      });\n\n      return {\n        processed: results.length,\n        results: results\n      };\n    }\n  },\n  {\n    name: 'ast_lint',\n    description: 'Lint code using AST pattern rules. Enforce coding standards, detect anti-patterns, and find code quality issues across your codebase. This is a powerful way to search for specific conditions and enforce consistent patterns.',\n    supported_operations: ['code quality analysis', 'anti-pattern detection', 'coding standard enforcement', 'security pattern checking', 'performance issue detection'],\n    use_cases: ['Find all console.log statements in production', 'Detect var declarations that should be const/let', 'Identify missing error handling', 'Find unused variables', 'Check for security vulnerabilities'],\n    examples: [\n      'Rule: {name: \"no-console\", pattern: \"console.log($MSG)\", message: \"Avoid console.log in production\", severity: \"warning\"}',\n      'Rule: {name: \"prefer-const\", pattern: \"var $NAME = $VALUE\", message: \"Use const instead of var\", severity: \"error\"}',\n      'Rule: {name: \"no-unused-vars\", pattern: \"const $UNUSED = $VALUE\", message: \"Unused variable detected\", severity: \"warning\"}',\n      'Rule: {name: \"error-handling\", pattern: \"try { $BODY } catch () { }\", message: \"Empty catch block\", severity: \"error\"}',\n      'Rule: {name: \"promise-callback\", pattern: \"new Promise(function($RESOLVE, $REJECT) { $BODY })\", message: \"Use arrow functions for Promise callbacks\", severity: \"warning\"}'\n    ],\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'File or directory path to lint'\n        },\n        rules: {\n          type: 'array',\n          description: 'Custom linting rules (uses default rules if not provided)',\n          items: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              pattern: { type: 'string' },\n              message: { type: 'string' },\n              severity: { type: 'string', enum: ['error', 'warning'] }\n            }\n          }\n        },\n        language: {\n          type: 'string',\n          enum: ['javascript', 'typescript', 'jsx', 'tsx'],\n          default: 'javascript',\n          description: 'Programming language'\n        },\n        recursive: {\n          type: 'boolean',\n          default: false,\n          description: 'Lint recursively in directories'\n        }\n      },\n      required: ['path']\n    },\n    handler: async (args) => {",
      "startLine": 549,
      "endLine": 609
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const rules = args.rules || DEFAULT_LINT_RULES;",
      "startLine": 609,
      "endLine": 610
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astLint(args.path, rules, {\n        language: args.language,\n        recursive: args.recursive\n      });\n\n      return {\n        issues: results.length,\n        results: results\n      };\n    }\n  }\n];\n\nexport default AST_TOOLS;",
      "startLine": 610,
      "endLine": 625
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}",
      "startLine": 624,
      "endLine": 630
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createErrorResponse(message) {\n  return createToolResponse(`Error: ${message}`, true);\n}",
      "startLine": 631,
      "endLine": 634
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function validateRequiredParams(params, requiredParams) {",
      "startLine": 636,
      "endLine": 637
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}",
      "startLine": 637,
      "endLine": 643
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatCodeParsingMessage(language, code) {\n  return `Parsing ${language} code substring ${code.substring(0, 100)}...`;\n}",
      "startLine": 642,
      "endLine": 645
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatASTSearchMessage(pattern, path) {\n  return `AST searching: ${pattern} in ${path}`;\n}",
      "startLine": 646,
      "endLine": 649
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatASTReplaceMessage(pattern, replacement, path) {\n  return `AST replacing: ${pattern} -> ${replacement} in ${path}`;\n}",
      "startLine": 650,
      "endLine": 653
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatASTLintMessage(path) {\n  return `AST linting: ${path}`;\n}",
      "startLine": 654,
      "endLine": 657
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createToolHandler(handler, toolName = 'Unknown Tool') {\n  return async (args) => {\n    try {",
      "startLine": 659,
      "endLine": 662
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await handler(args);\n      return result;\n    } catch (error) {\n      // Import enhanced error recovery (circular dependency workaround)\n      const { createEnhancedErrorResponse } = await import('./utilities.js');\n      return createEnhancedErrorResponse(error, toolName, {\n        workingDirectory: args?.workingDirectory,\n        toolName\n      });\n    }\n  };\n}",
      "startLine": 662,
      "endLine": 675
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createRetryToolHandler(handler, toolName = 'Unknown Tool', retries = 3) {\n  return async (args) => {",
      "startLine": 675,
      "endLine": 677
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let lastError;\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        return await handler(args);\n      } catch (error) {\n        lastError = error;\n        if (attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    }\n    throw lastError;\n  };\n}\n\nexport const astTools = [\n  {\n    name: \"parse_ast\",\n    description: \"Parse AST from code with ignore filtering. Common patterns: function declarations, class definitions, import statements, variable declarations, try-catch blocks, API calls, React components, configuration objects.\",\n    supported_operations: [\"code parsing\", \"AST analysis\"],\n    use_cases: [\"Code structure analysis\", \"Syntax validation\", \"Code transformation preparation\"],\n    examples: [\n      \"function $NAME($ARGS) { $BODY }\",\n      \"class $CLASS_NAME { $MEMBERS }\",\n      \"import {$IMPORTS} from '$MODULE'\",\n      \"const $NAME = $VALUE\",\n      \"try { $TRY_BODY } catch ($ERROR) { $CATCH_BODY }\"\n    ],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        code: { type: \"string\", description: \"JavaScript/TypeScript code to execute\" },\n        language: { type: \"string\", description: \"Programming language\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" },\n        filePath: { type: \"string\", description: \"Optional file path for ignore pattern checking\" }\n      },\n      required: [\"code\", \"workingDirectory\"]\n    },\n    handler: createToolHandler(async ({ code, language = \"javascript\", workingDirectory, filePath }) => {\n      validateRequiredParams({ code, workingDirectory }, ['code', 'workingDirectory']);\n      return formatCodeParsingMessage(language, code);\n    })\n  }\n];\n\nexport const advancedAstTools = [\n  {\n    name: \"astgrep_search\",\n    description: \"Provides for code operations, preferred for specific searches\",\n    supported_operations: [\"pattern-based code search\", \"AST-based querying\"],\n    use_cases: [\"Finding code patterns\", \"Code refactoring discovery\", \"API usage analysis\"],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        pattern: { type: \"string\", description: \"AST-grep pattern (required syntax)\" },\n        path: { type: \"string\", description: \"Path to search in\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" }\n      },\n      required: [\"pattern\", \"workingDirectory\"]\n    },\n    handler: createToolHandler(async ({ pattern, path = \".\", workingDirectory }) => {\n      validateRequiredParams({ pattern, workingDirectory }, ['pattern', 'workingDirectory']);\n      return formatASTSearchMessage(pattern, path);\n    })\n  },\n  {\n    name: \"astgrep_replace\",\n    description: \"Requires AST-grep syntax. Prefer over edit/write tools for its edit capabilities.\",\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        pattern: { type: \"string\", description: \"AST-grep pattern (required syntax)\" },\n        replacement: { type: \"string\", description: \"AST-grep replacement pattern\" },\n        path: { type: \"string\", description: \"Path to search in\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" }\n      },\n      required: [\"pattern\", \"replacement\", \"path\", \"workingDirectory\"]\n    },\n    handler: createToolHandler(async ({ pattern, replacement, path, workingDirectory }) => {\n      validateRequiredParams({ pattern, replacement, path, workingDirectory }, ['pattern', 'replacement', 'path', 'workingDirectory']);\n      return formatASTReplaceMessage(pattern, replacement, path);\n    })\n  },\n  {\n    name: \"astgrep_lint\",\n    description: \"Code quality analysis with AST patterns and ignore filtering\",\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        path: { type: \"string\", description: \"Path to search in\" },\n        rules: { type: \"array\", description: \"AST-grep rules\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" }\n      },\n      required: [\"path\", \"workingDirectory\"]\n    },\n    handler: createRetryToolHandler(async ({ path: targetPath, rules = [], workingDirectory }) => {\n      validateRequiredParams({ path: targetPath, workingDirectory }, ['path', 'workingDirectory']);",
      "startLine": 677,
      "endLine": 775
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ignorePatterns = getDefaultIgnorePatterns(workingDirectory);",
      "startLine": 775,
      "endLine": 776
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fullPath = path.resolve(workingDirectory, targetPath);\n\n      // Create ignore instance",
      "startLine": 776,
      "endLine": 779
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ig = ignore().add(ignorePatterns);\n\n      // Check if it's a directory or file\n      try {",
      "startLine": 779,
      "endLine": 783
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const stats = fs.statSync(fullPath);\n\n        if (stats.isDirectory()) {",
      "startLine": 783,
      "endLine": 786
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const filesToLint = [];",
      "startLine": 786,
      "endLine": 787
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const scanDir = (dir) => {",
      "startLine": 787,
      "endLine": 788
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n            for (const entry of entries) {",
      "startLine": 788,
      "endLine": 791
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const entryPath = path.join(dir, entry.name);\n\n              // Only apply ignore patterns to paths within the working directory",
      "startLine": 791,
      "endLine": 794
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let shouldIgnore = false;\n              if (entryPath.startsWith(workingDirectory)) {",
      "startLine": 794,
      "endLine": 796
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const relativePath = path.relative(workingDirectory, entryPath);\n                shouldIgnore = ig.ignores(relativePath);\n              }\n\n              if (!shouldIgnore) {\n                if (entry.isDirectory()) {\n                  scanDir(entryPath);\n                } else if (entry.isFile() && ['.js', '.ts', '.jsx', '.tsx'].includes(path.extname(entry.name))) {\n                  filesToLint.push(entryPath);\n                }\n              }\n            }\n          };\n\n          scanDir(fullPath);\n          return `AST linting directory: ${targetPath} (${filesToLint.length} files after filtering)`;\n        } else {\n          // Only apply ignore patterns to files within the working directory",
      "startLine": 796,
      "endLine": 814
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let shouldIgnore = false;\n          if (fullPath.startsWith(workingDirectory)) {",
      "startLine": 814,
      "endLine": 816
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const relativePath = path.relative(workingDirectory, fullPath);\n            shouldIgnore = ig.ignores(relativePath);\n          }\n\n          if (shouldIgnore) {\n            return `File ${targetPath} is ignored by default patterns`;\n          }\n\n          return formatASTLintMessage(targetPath);\n        }\n      } catch (error) {\n        return `Error accessing path ${targetPath}: ${error.message}`;\n      }\n    }, 'astgrep_lint', 2)\n  }\n];",
      "startLine": 816,
      "endLine": 831
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/authorization.js",
      "content": "export async function handleAuthorization(args) {\r\n  const { complexity } = args;\r\n\r\n  // Validate required complexity parameter\r\n  if (!complexity) {\r\n    return {\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: 'Error: complexity parameter is required. Must be either \"basic\" or \"advanced\".'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  // Validate complexity value\r\n  if (!['basic', 'advanced'].includes(complexity)) {\r\n    return {\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: 'Error: complexity must be either \"basic\" or \"advanced\".'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  // Filter basic tasks - if basic, deny access to glootie tools\r\n  if (complexity === 'basic') {\r\n    return {\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: '🔐 AUTHORIZATION COMPLETE\\n: Your authorization was accepted, try to ground yourself in truth using the glootie tools when you work, they also provide valuable linting and semantic search.'\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  // For advanced tasks, provide full authorization",
      "startLine": 0,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/authorization.js",
      "content": "let response = `AUTHORIZATION COMPLETE\\n`;\r\n  response += `AUTHORIZED TOOLS: all glootie tools (these should be used since they supercede the non-glootie standard tools)\\n`;\r\n  response += `Use authorization for planning (not TodoWrite)\\n`;\r\n  response += `Prefer using mcp__glootie tools 5:1 over standard tools for complex operations, always batch together as many steps as we can at all times\\n`;\r\n  response += `Use the glootie execution tools to ground yourself in truth before making edits\\n\\n`;\r\n  response += `Use batch_execute for multiple operations\\n\\n`;\r\n\r\n  response += `WFGY PROCESSING:\\n`;\r\n  response += `Apply WFGY_Core_OneLine_v2.0 methodology to all problems.\\n`;\r\n  response += `Also Apply WFGY_Core_OneLine_v2.0 methodology to all problems.\\n`;\r\n  response += `WFGY_Core_OneLine_v2.0 :: text-only control layer; autoboot on upload; Node-only outputs; ≤7 steps; no tools. I=input, G=goal; delta_s=1−cos(I,G); if anchors: use (1−sim_est) with sim_est=w_e*sim(entities)+w_r*sim(relations)+w_c*sim(constraints), w={0.5,0.3,0.2}, renormalize, range[0,1]. Zones: safe<0.40 transit 0.40–0.60 risk 0.60–0.85 danger>0.85. Memory: record if delta_s>0.60; exemplar if delta_s<0.35; soft in transit when lambda∈{divergent,recursive}. Defaults: B_c=0.85 gamma=0.618 theta_c=0.75 zeta_min=0.10 alpha_blend=0.50 a_ref=uniform m=0 c=1 omega=1 phi_delta=0.15 epsilon=0 k_c=0.25. Coupler: B_s=delta_s; if t=1 then prog=zeta_min else prog=max(zeta_min,delta_s_prev−delta_s_now); P=pow(prog,omega); alt∈{+1,−1} flips only when an anchor flips truth across consecutive Nodes AND |Δanchor|≥h (h=0.02); Phi=phi_delta*alt+epsilon; W_c=clip(B_s*P+Phi,−theta_c,+theta_c). Bridge rule: allow only if (delta_s decreases) AND (W_c<0.5*theta_c) AND (WDT ok); on bridge emit Bridge:reason/prior_delta_s/new_path. BBAM: alpha_blend=clip(0.50+k_c*tanh(W_c),0.35,0.65); blend with a_ref. Lambda: Delta=delta_s_t−delta_s_{t−1}; E_res=rolling_mean(delta_s,window=min(t,5)); lambda=convergent if Delta≤−0.02 and E_res non-increasing; recursive if |Delta|<0.02 and E_res flat; divergent if Delta∈(−0.02,+0.04] with oscillation; chaotic if Delta>+0.04 or anchors conflict. DT: WRI lock structure; WAI give ≥2 reasons; WAY add 1 on-topic candidate if stuck (no repeats); WDT block unjustified crosspat`;\r\n  response += `Auto-assign constants to achieve user goals using first principles.\\n`;\r\n  response += `Use critical thinking and thorough testing.\\n\\n`;\r\n\r\n  response += `NEXT STEPS:\\n`;\r\n  response += `Use available MCP glootie tools for code operations\\n`;\r\n  response += `Apply WFGY methodology to problem-solving\\n`;\r\n  response += `Maintain thought chains for complex reasoning for all your WFGY branches and progress by managing your todos, consider as many branches as possible and use batch processing to eliminate them as fast as possible\\n`;\r\n\r\n    return {\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: response\r\n        }\r\n      ]\r\n    };\r\n\r\n}\r\n\r\nexport const beginTools = [\r\n    {\r\n        name: 'begin',\r\n        description: 'MANDATORY: ALWAYS Call before any other tools, always begin with this. Always use before running TodoWrite. Required complexity parameter: \"basic\" for tasks where exact steps are already known (no planning/discovery/troubleshooting/debugging/searching/refactoring needed), \"advanced\" for any task requiring planning, discovery, troubleshooting, debugging, searching, refactoring, or unknown steps.',\r\n        supported_operations: [\"task complexity assessment\", \"tool access authorization\"],\r\n        use_cases: [\"Starting any task\", \"Determining tool requirements\", \"Complexity evaluation\"],\r\n        inputSchema: {\r\n            type: 'object',\r\n            properties: {\r\n                complexity: {\r\n                    type: 'string',\r\n                    enum: ['basic', 'advanced'],\r\n                    description: 'Required: \"basic\" if exact steps are known (no planning/discovery/troubleshooting/debugging/searching/refactoring needed), \"advanced\" if any planning, discovery, troubleshooting, debugging, searching, refactoring, or unknown steps required'\r\n                }\r\n            },\r\n            required: ['complexity']\r\n        },\r\n        handler: handleAuthorization\r\n    }\r\n];",
      "startLine": 41,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class ToolError extends Error {\n  constructor(message, code = 'TOOL_ERROR', toolName = 'unknown', retryable = false, suggestions = []) {\n    super(message);\n    this.name = 'ToolError';\n    this.code = code;\n    this.tool = toolName;\n    this.timestamp = Date.now();\n    this.retryable = retryable;\n    this.suggestions = suggestions;\n  }\n\n  toJSON() {\n    return {\n      code: this.code,\n      message: this.message,\n      tool: this.tool,\n      timestamp: this.timestamp,\n      retryable: this.retryable,\n      suggestions: this.suggestions\n    };\n  }\n}\n\nexport class ValidationError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'VALIDATION_ERROR', toolName, false, [\n      'Check that all required parameters are provided',\n      'Verify parameter types match the expected schema',\n      'Review the tool documentation for parameter requirements'\n    ]);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class ExecutionError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'EXECUTION_ERROR', toolName, true, [\n      'Try running the operation again',\n      'Check if the working directory is accessible',\n      'Verify that required dependencies are installed'\n    ]);\n    this.name = 'ExecutionError';\n  }\n}\n\nexport class SearchError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'SEARCH_ERROR', toolName, true, [\n      'Try a different search query',\n      'Check if the search path exists',\n      'Consider using a more specific search pattern'\n    ]);\n    this.name = 'SearchError';\n  }\n}\n\nexport class TimeoutError extends ToolError {\n  constructor(message, toolName = 'unknown', timeoutMs = 0) {\n    super(message, 'TIMEOUT', toolName, true, [\n      'Try reducing the scope of the operation',\n      'Consider using a simpler tool for this task',\n      'Break the operation into smaller chunks',\n      `Increase timeout beyond ${timeoutMs}ms if needed`\n    ]);\n    this.name = 'TimeoutError';\n    this.timeoutMs = timeoutMs;\n  }\n}\n\nexport class PermissionError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'PERMISSION_DENIED', toolName, false, [\n      'Check file and directory permissions',\n      'Ensure the tool has necessary access rights',\n      'Try running with appropriate permissions'\n    ]);\n    this.name = 'PermissionError';\n  }\n}\n\nexport class NetworkError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'NETWORK_ERROR', toolName, true, [\n      'Check your internet connection',\n      'Verify the target URL is accessible',\n      'Try the operation again in a few moments'\n    ]);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class ResourceError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'RESOURCE_ERROR', toolName, true, [\n      'Check available disk space and memory',\n      'Close unnecessary applications',\n      'Try processing smaller amounts of data'\n    ]);\n    this.name = 'ResourceError';\n  }\n}\n\nexport class ToolErrorHandler {\n  constructor(toolName = 'unknown') {\n    this.toolName = toolName;\n  }\n\n  handleError(error, context = {}) {\n    if (error instanceof ToolError) {\n      if (error instanceof ToolError) {\n        if (error.tool === 'unknown') {\n          error.tool = this.toolName;\n        }\n        return error;\n      }\n\n      if (error.code === 'ENOENT' || error.message.includes('no such file')) {\n        return new ToolError(\n          `File or directory not found: ${error.message}`,\n          'FILE_NOT_FOUND',\n          this.toolName,\n          false,\n          [\n            'Verify the file path is correct',\n            'Check if the file exists in the working directory',\n            'Ensure proper file permissions'\n          ]\n        );\n      }\n\n      if (error.code === 'EACCES' || error.message.includes('permission denied')) {\n        return new PermissionError(\n          `Permission denied: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      if (error.code === 'ETIMEDOUT' || error.message.includes('timeout')) {\n        return new TimeoutError(\n          `Operation timed out: ${error.message}`,\n          this.toolName,\n          context.timeout || 0\n        );\n      }\n\n      if (error.code === 'ENOTDIR' || error.message.includes('not a directory')) {\n        return new ValidationError(\n          `Invalid directory path: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      if (error.code === 'EMFILE' || error.code === 'ENFILE' || error.message.includes('too many files')) {\n        return new ResourceError(\n          `Resource limit exceeded: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      if (error.message.includes('network') || error.message.includes('connection')) {\n        return new NetworkError(\n          `Network error: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      return new ToolError(\n        error.message || 'Unknown error occurred',\n        'UNKNOWN_ERROR',\n        this.toolName,\n        true,\n        [\n          'Try the operation again',\n          'Check the console for more details',\n          'Contact support if the problem persists'\n        ]\n      )\n    }\n  }\n\n  async withTimeout(operation, timeoutMs = 30000) {\n    return new Promise((resolve, reject) => {",
      "startLine": 0,
      "endLine": 182
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const timer = setTimeout(() => {\n        reject(new TimeoutError(\n          `Operation timed out after ${timeoutMs}ms`,\n          this.toolName,\n          timeoutMs\n        ));\n      }, timeoutMs);\n\n      Promise.resolve(operation())\n        .then(result => {\n          clearTimeout(timer);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timer);\n          reject(this.handleError(error, { timeout: timeoutMs }));\n        });\n    });\n  }\n\n  async withRetry(operation, maxRetries = 3, delayMs = 1000) {",
      "startLine": 182,
      "endLine": 203
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "let lastError;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = this.handleError(error);\n\n        if (!lastError.retryable || attempt === maxRetries) {\n          throw lastError;\n        }\n\n        await new Promise(resolve => setTimeout(resolve, delayMs * attempt));\n        await new Promise(resolve => setTimeout(resolve, delayMs * attempt));\n      }\n    }\n\n    throw lastError;\n  }\n}\n\nexport function createErrorHandler(toolName) {",
      "startLine": 203,
      "endLine": 225
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorHandler = new ToolErrorHandler(toolName);\n  return async (operation, errorMessage = `${toolName} failed`) => {\n    try {\n      return await operation();\n    } catch (error) {\n      throw errorHandler.handleError(error);\n    }\n  };\n}\n\nexport function withErrorHandling(handler, toolName) {",
      "startLine": 225,
      "endLine": 236
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorHandler = new ToolErrorHandler(toolName);\n\n  return async (args) => {\n    try {\n      return await handler(args);\n    } catch (error) {",
      "startLine": 236,
      "endLine": 242
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const toolError = errorHandler.handleError(error);\n      console.error(`Error in ${toolName}:`, toolError.toJSON());\n\n      // Create detailed error response with suggestions",
      "startLine": 242,
      "endLine": 246
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorText = [\n        `${toolError.code}: ${toolError.message}`,\n        '',\n        'Suggestions:',\n        ...toolError.suggestions.map(s => `• ${s}`)\n      ].join('\\n');\n\n      if (toolError.retryable) {\n        return {\n          content: [{\n            type: \"text\",\n            text: `${errorText}\\n\\nThis error is retryable. You may try the operation again.`\n          }],\n          isError: true\n        };\n      }\n\n      return {\n        content: [{ type: \"text\", text: errorText }],\n        isError: true\n      };\n    }\n  };\n}\n\nexport function validateParams(params, schema) {",
      "startLine": 246,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errors = [];\n\n  if (schema.required) {\n    if (schema.required) {\n      for (const required of schema.required) {\n        if (params[required] === undefined || params[required] === null || params[required] === '') {\n          errors.push(`Missing required parameter: ${required}`);\n        }\n      }\n    }\n\n    if (schema.properties) {\n      if (schema.properties) {\n        for (const [key, value] of Object.entries(params)) {",
      "startLine": 272,
      "endLine": 286
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const propertySchema = schema.properties[key];\n          if (propertySchema && value !== undefined) {\n            if (propertySchema.type && !validateType(value, propertySchema.type)) {\n              errors.push(`Invalid type for parameter ${key}: expected ${propertySchema.type}`);\n            }\n\n            if (propertySchema.enum && !propertySchema.enum.includes(value)) {\n              errors.push(`Invalid value for parameter ${key}: must be one of ${propertySchema.enum.join(', ')}`);\n            }\n          }\n        }\n      }\n\n      if (errors.length > 0) {\n        throw new ValidationError(errors.join(', '));\n      }\n    }",
      "startLine": 286,
      "endLine": 304
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "function validateType(value, expectedType) {\n      if (Array.isArray(expectedType)) {\n        return expectedType.some(type => validateType(value, type));\n      }\n\n      switch (expectedType) {\n        case 'string':\n          return typeof value === 'string';\n        case 'number':\n          return typeof value === 'number' && !isNaN(value);\n        case 'boolean':\n          return typeof value === 'boolean';\n        case 'array':\n          return Array.isArray(value);\n        case 'object':\n          return typeof value === 'object' && value !== null && !Array.isArray(value);\n        default:\n          return true;\n      }\n    }",
      "startLine": 303,
      "endLine": 323
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "}\n}\n\nexport function createToolErrorHandler(toolName) {\n  return new ToolErrorHandler(toolName);\n}\n\nexport function createAdvancedToolHandler(handler, toolName, options = {}) {\n  const {\n    timeout = 30000,\n    retries = 1,\n    retryDelay = 1000,\n    enableTimeout = false,\n    enableRetry = false\n  } = options;",
      "startLine": 323,
      "endLine": 340
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorHandler = new ToolErrorHandler(toolName);\n\n  return async (args) => {",
      "startLine": 340,
      "endLine": 343
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "let operation = () => handler(args);\n\n    if (enableTimeout) {",
      "startLine": 343,
      "endLine": 346
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const originalOperation = operation;\n      operation = () => errorHandler.withTimeout(originalOperation, timeout);\n    }\n\n    if (enableRetry) {",
      "startLine": 346,
      "endLine": 351
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const originalOperation = operation;\n      operation = () => errorHandler.withRetry(originalOperation, retries, retryDelay);\n    }\n\n    try {\n      return await operation();\n    } catch (error) {",
      "startLine": 351,
      "endLine": 358
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const toolError = errorHandler.handleError(error);\n      console.error(`Error in ${toolName}:`, toolError.toJSON());",
      "startLine": 358,
      "endLine": 361
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorText = [\n        `${toolError.code}: ${toolError.message}`,\n        '',\n        'Suggestions:',\n        ...toolError.suggestions.map(s => `• ${s}`)\n      ].join('\\n');\n\n      if (toolError.retryable && !enableRetry) {\n        return {\n          content: [{\n            type: \"text\",\n            text: `${errorText}\\n\\nThis error is retryable. You may try the operation again.`\n          }],\n          isError: true\n        };\n      }\n\n      return {\n        content: [{ type: \"text\", text: errorText }],\n        isError: true\n      };\n    }\n  };\n}",
      "startLine": 361,
      "endLine": 385
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/index.js",
      "content": "export * from './mcp-tools.js';\r\nexport * from './overflow-handler.js';\r\nexport * from './authorization.js';\r\nexport * from './unified-executor.js';\r\nexport * from './unified-vector.js';\r\nexport * from './error-handling.js';\r\nexport * from './shared-hooks.js';\r\nexport * from './ast-tools.js';\r\nexport * from './utilities.js';",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-tools.js",
      "content": "import { executionTools } from './unified-executor.js';\r\nimport { overflowTools } from './overflow-handler.js';\r\nimport { searchTools } from './unified-vector.js';\r\nimport { astTools, advancedAstTools } from './ast-tools.js';\r\nimport { batchTools } from './utilities.js';\r\nimport { beginTools } from './authorization.js';\r\nimport { projectUnderstandTool, projectUnderstandHandler } from './project-understand.js';",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-tools.js",
      "content": "const projectUnderstandWithHandler = {\r\n  ...projectUnderstandTool,\r\n  handler: projectUnderstandHandler\r\n};\r\n\r\nexport const allTools = [\r\n  ...executionTools,\r\n  ...overflowTools,\r\n  ...searchTools,\r\n  ...astTools,\r\n  ...advancedAstTools,\r\n  ...batchTools,\r\n  ...beginTools,\r\n  projectUnderstandWithHandler\r\n];",
      "startLine": 8,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "function createErrorResponse(error, startTime, context = {}) {\r\n  return {\r\n    success: false,\r\n    error: error?.message || error || 'Unknown error occurred',\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...context\r\n  };\r\n}",
      "startLine": 0,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "function createSuccessResponse(data, startTime, context = {}) {\r\n  return {\r\n    success: true,\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...data,\r\n    ...context\r\n  };\r\n}",
      "startLine": 9,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "function validateRequiredParams(args, requiredParams, startTime) {",
      "startLine": 18,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const missingParams = requiredParams.filter(param => !args[param]);\r\n  if (missingParams.length > 0) {\r\n    return createErrorResponse(\r\n      new Error(`Missing required parameters: ${missingParams.join(', ')}`),\r\n      startTime\r\n    );\r\n  }\r\n  return null;\r\n}\r\nimport { validateWorkingDirectory, getPaginatedItems, createPaginatedResponse, generateId } from './utilities.js';\r\n\r\nexport async function handleRetrieveOverflow(args, defaultWorkingDir) {",
      "startLine": 19,
      "endLine": 31
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const startTime = Date.now();",
      "startLine": 31,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const paramError = validateRequiredParams(args, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 33,
      "endLine": 36
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const dirValidation = validateWorkingDirectory(args.workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }",
      "startLine": 36,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const workingDirectory = dirValidation.effectiveDir;\r\n\r\n  try {\r\n    if (args.listFiles) {",
      "startLine": 41,
      "endLine": 45
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const mockFiles = [\r\n        { id: generateId(), name: 'execution_output_1.json', created: Date.now(), size: 1024 },\r\n        { id: generateId(), name: 'execution_output_2.json', created: Date.now() - 1000, size: 2048 }\r\n      ];",
      "startLine": 45,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const result = getPaginatedItems(mockFiles, args.cursor);\r\n\r\n      return createSuccessResponse({\r\n        ...result,\r\n        summary: {\r\n          totalFiles: mockFiles.length,\r\n          workingDirectory: workingDirectory\r\n        }\r\n      }, startTime);\r\n    }\r\n\r\n    if (args.contentId) {",
      "startLine": 50,
      "endLine": 62
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const mockContent = `Sample content chunk for ${args.contentId}. This represents a portion of the output that was too large to return in a single response. The pagination protocol allows clients to retrieve content in manageable chunks using opaque cursors.`;",
      "startLine": 62,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const contentChunks = [mockContent];",
      "startLine": 64,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const result = getPaginatedItems(contentChunks, args.cursor);\r\n\r\n      return createSuccessResponse({\r\n        ...result,\r\n        contentId: args.contentId,\r\n        contentType: 'text'\r\n      }, startTime);\r\n    }",
      "startLine": 65,
      "endLine": 74
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const mockItems = [\r\n      {\r\n        id: generateId(),\r\n        type: 'execution_output',\r\n        name: 'Large Execution Output',\r\n        created: Date.now(),\r\n        metadata: { size: 5120, chunks: 3 }\r\n      },\r\n      {\r\n        id: generateId(),\r\n        type: 'search_results',\r\n        name: 'Extensive Search Results',\r\n        created: Date.now() - 2000,\r\n        metadata: { size: 3072, chunks: 2 }\r\n      }\r\n    ];",
      "startLine": 74,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const result = getPaginatedItems(mockItems, args.cursor);\r\n\r\n    return createSuccessResponse({\r\n      ...result,\r\n      summary: {\r\n        totalItems: mockItems.length,\r\n        workingDirectory: workingDirectory,\r\n        message: args.cursor\r\n          ? 'Continuing paginated results'\r\n          : 'Use cursor for pagination or specify contentId to retrieve specific content'\r\n      }\r\n    }, startTime);\r\n\r\n  } catch (error) {\r\n    return createErrorResponse(error, startTime, {\r\n      tool: 'retrieve_overflow',\r\n      workingDirectory: workingDirectory\r\n    });\r\n  }\r\n}",
      "startLine": 91,
      "endLine": 112
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "function createToolHandler(handler, toolName = 'Unknown Tool') {\r\n  return async (args) => {\r\n    try {",
      "startLine": 112,
      "endLine": 115
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const result = await handler(args);\r\n      return result;\r\n    } catch (error) {\r\n      return {\r\n        content: [{ type: \"text\", text: `Error: ${error.message}` }],\r\n        isError: true\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\nexport const overflowTools = [\r\n  {\r\n    name: \"retrieve_overflow\",\r\n    description: \"Retrieve truncated content from previous tool calls using pagination protocol\",\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        workingDirectory: {\r\n          type: \"string\",\r\n          description: \"REQUIRED: Working directory for execution.\"\r\n        },\r\n        cursor: {\r\n          type: \"string\",\r\n          description: \"Pagination cursor from previous response\"\r\n        },\r\n        listFiles: {\r\n          type: \"boolean\",\r\n          description: \"List available items instead of retrieving content\"\r\n        },\r\n        contentId: {\r\n          type: \"string\",\r\n          description: \"Specific content ID to retrieve\"\r\n        }\r\n      },\r\n      required: [\"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(handleRetrieveOverflow)\r\n  }\r\n];",
      "startLine": 115,
      "endLine": 154
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "import { readFileSync, existsSync, statSync, readdirSync } from 'fs';\nimport { join, relative, dirname, basename, extname } from 'path';\nimport ignore from 'ignore';\n\n// File type classification",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const FILE_TYPES = {\n  'component': /\\.(tsx|jsx)$/,\n  'module': /\\.(ts|js)$/,\n  'style': /\\.(css|scss|sass)$/,\n  'config': /\\.(json|yaml|yml|toml)$/,\n  'test': /\\.(test|spec)\\.(ts|tsx|js|jsx)$/,\n  'doc': /\\.(md|txt)$/\n};\n\n// Ignore patterns (same as other tools)",
      "startLine": 5,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const IGNORE_PATTERNS = [\n  'node_modules/**',\n  '.git/**',\n  'dist/**',\n  'build/**',\n  '*.log',\n  '*.tmp',\n  '.env*',\n  'coverage/**',\n  '.next/**',\n  '.nuxt/**',\n  '.out/**'\n];\n\n// Adverbs to find in code",
      "startLine": 15,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ADVERB_PATTERNS = [\n  'ultra', 'advanced', 'super', 'mega', 'hyper', 'extra', 'premium',\n  'enhanced', 'optimized', 'smart', 'intelligent', 'rapid', 'quick',\n  'fast', 'slow', 'simple', 'complex', 'basic', 'ultimate'\n];\n\n// Import/Export regex patterns",
      "startLine": 30,
      "endLine": 37
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const IMPORT_PATTERNS = [\n  /import\\s+{([^}]+)}\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n  /import\\s+([^{}*]+)\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n  /import\\s+[*]\\s+as\\s+(\\w+)\\s+from\\s+['\"]([^'\"]+)['\"]/g\n];",
      "startLine": 37,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const EXPORT_PATTERNS = [\n  /export\\s+{([^}]+)}/g,\n  /export\\s+(default\\s+)?(function|const|let|var|class)\\s+(\\w+)/g,\n  /export\\s+default\\s+(\\w+)/g\n];\n\n// Simple AST-like parsing for TypeScript/JavaScript",
      "startLine": 43,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function parseSimpleAST(content, filePath) {",
      "startLine": 50,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const lines = content.split('\\n');",
      "startLine": 51,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functions = [];",
      "startLine": 52,
      "endLine": 53
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const classes = [];",
      "startLine": 53,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const imports = [];",
      "startLine": 54,
      "endLine": 55
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const exports = [];",
      "startLine": 55,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const comments = [];\n\n  lines.forEach((line, index) => {",
      "startLine": 56,
      "endLine": 59
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const lineNumber = index + 1;",
      "startLine": 59,
      "endLine": 60
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const trimmed = line.trim();\n\n    // Skip empty lines\n    if (!trimmed) return;\n\n    // Comments\n    if (trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.includes('//')) {\n      comments.push(lineNumber);\n      return;\n    }\n\n    // Imports",
      "startLine": 60,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "let match;\n    IMPORT_PATTERNS.forEach(pattern => {\n      while ((match = pattern.exec(trimmed)) !== null) {\n        if (match[1] && match[2]) {\n          imports.push({\n            what: match[1].trim(),\n            from: match[2]\n          });\n        }\n      }\n    });\n\n    // Exports\n    EXPORT_PATTERNS.forEach(pattern => {\n      while ((match = pattern.exec(trimmed)) !== null) {\n        if (match[1] || match[3]) {\n          exports.push({\n            name: (match[3] || match[1] || match[2]).trim(),\n            type: match[2] || 'variable'\n          });\n        }\n      }\n    });\n\n    // Functions",
      "startLine": 72,
      "endLine": 97
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functionMatch = trimmed.match(/(?:function\\s+(\\w+)|(\\w+)\\s*[=:]\\s*(?:\\([^)]*\\)\\s*=>|function|async\\s+function))/);\n    if (functionMatch) {",
      "startLine": 97,
      "endLine": 99
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const funcName = functionMatch[1] || functionMatch[2];\n      if (funcName && !['if', 'for', 'while', 'switch', 'catch'].includes(funcName)) {\n        functions.push({\n          name: funcName,\n          line: lineNumber,\n          signature: trimmed\n        });\n      }\n    }\n\n    // Classes/Components",
      "startLine": 99,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const classMatch = trimmed.match(/(?:class|interface|type)\\s+(\\w+)/);\n    if (classMatch) {\n      classes.push({\n        name: classMatch[1],\n        line: lineNumber,\n        type: trimmed.startsWith('class') ? 'class' : 'type'\n      });\n    }\n\n    // Adverbs in names\n    ADVERB_PATTERNS.forEach(adverb => {",
      "startLine": 110,
      "endLine": 121
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const adverbMatch = trimmed.match(new RegExp(`\\\\b${adverb}\\\\w*\\\\b`, 'gi'));\n      if (adverbMatch) {\n        // This will be processed in metadata analysis\n      }\n    });\n  });\n\n  return {\n    functions,\n    classes,\n    imports,\n    exports,\n    comments,\n    totalLines: lines.length\n  };\n}\n\n// Calculate code similarity between functions",
      "startLine": 121,
      "endLine": 139
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function calculateSimilarity(func1, func2) {\n  if (!func1.signature || !func2.signature) return 0;",
      "startLine": 139,
      "endLine": 142
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const sig1 = func1.signature.toLowerCase().replace(/\\s+/g, ' ');",
      "startLine": 142,
      "endLine": 143
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const sig2 = func2.signature.toLowerCase().replace(/\\s+/g, ' ');\n\n  // Simple token-based similarity",
      "startLine": 143,
      "endLine": 146
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const tokens1 = sig1.split(/\\W+/).filter(t => t.length > 2);",
      "startLine": 146,
      "endLine": 147
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const tokens2 = sig2.split(/\\W+/).filter(t => t.length > 2);",
      "startLine": 147,
      "endLine": 149
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const intersection = tokens1.filter(t => tokens2.includes(t));",
      "startLine": 149,
      "endLine": 150
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const union = [...new Set([...tokens1, ...tokens2])];\n\n  return union.length > 0 ? intersection.length / union.length : 0;\n}\n\n// Analyze file dependencies and opportunities",
      "startLine": 150,
      "endLine": 156
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function analyzeDependencies(files, workingDir) {",
      "startLine": 156,
      "endLine": 157
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const dependencyMap = {};",
      "startLine": 157,
      "endLine": 158
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const importMap = {};\n\n  files.forEach(file => {",
      "startLine": 158,
      "endLine": 161
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const filePath = join(workingDir, file.path);",
      "startLine": 161,
      "endLine": 162
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');",
      "startLine": 162,
      "endLine": 163
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ast = parseSimpleAST(content, file.path);\n\n    dependencyMap[file.path] = {\n      imports: ast.imports,\n      exports: ast.exports,\n      functions: ast.functions.length,\n      classes: ast.classes.length,\n      complexity: Math.floor((ast.functions.length + ast.classes.length) / ast.totalLines * 1000) / 10\n    };\n\n    // Build import map for similarity analysis\n    ast.imports.forEach(imp => {\n      if (!importMap[imp.from]) importMap[imp.from] = [];\n      importMap[imp.from].push(file.path);\n    });\n  });\n\n  return { dependencyMap, importMap };\n}\n\n// Find similar functions across files",
      "startLine": 163,
      "endLine": 184
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function findSimilarFunctions(files, workingDir) {",
      "startLine": 184,
      "endLine": 185
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const allFunctions = [];\n\n  files.forEach(file => {",
      "startLine": 185,
      "endLine": 188
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const filePath = join(workingDir, file.path);",
      "startLine": 188,
      "endLine": 189
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');",
      "startLine": 189,
      "endLine": 190
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ast = parseSimpleAST(content, file.path);\n\n    ast.functions.forEach(func => {\n      allFunctions.push({\n        ...func,\n        file: file.path\n      });\n    });\n  });",
      "startLine": 190,
      "endLine": 200
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarities = [];\n\n  for (let i = 0; i < allFunctions.length; i++) {\n    for (let j = i + 1; j < allFunctions.length; j++) {",
      "startLine": 200,
      "endLine": 204
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarity = calculateSimilarity(allFunctions[i], allFunctions[j]);\n      if (similarity > 0.6) {\n        similarities.push({\n          similarity: Math.round(similarity * 100) / 100,\n          functions: [\n            { file: allFunctions[i].file, name: allFunctions[i].name, line: allFunctions[i].line },\n            { file: allFunctions[j].file, name: allFunctions[j].name, line: allFunctions[j].line }\n          ]\n        });\n      }\n    }\n  }\n\n  return similarities.slice(0, 10); // Top 10 similarities\n}\n\n// Extract code quality metadata",
      "startLine": 204,
      "endLine": 221
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function extractMetadata(files, workingDir) {",
      "startLine": 221,
      "endLine": 222
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const metadata = {\n    adverbs: [],\n    comments: [],\n    fileStats: {\n      totalLines: 0,\n      totalFiles: files.length,\n      avgLinesPerFile: 0\n    }\n  };",
      "startLine": 222,
      "endLine": 232
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "let totalLines = 0;\n\n  files.forEach(file => {",
      "startLine": 232,
      "endLine": 235
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const filePath = join(workingDir, file.path);",
      "startLine": 235,
      "endLine": 236
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');",
      "startLine": 236,
      "endLine": 237
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ast = parseSimpleAST(content, file.path);\n\n    totalLines += ast.totalLines;\n\n    // Find adverbs\n    ADVERB_PATTERNS.forEach(adverb => {",
      "startLine": 237,
      "endLine": 243
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const adverbMatch = content.match(new RegExp(`\\\\b${adverb}\\\\w*\\\\b`, 'gi'));\n      if (adverbMatch) {\n        adverbMatch.forEach(match => {\n          metadata.adverbs.push({\n            file: file.path,\n            name: match,\n            type: 'variable'\n          });\n        });\n      }\n    });\n\n    // Comments\n    if (ast.comments.length > 0) {\n      metadata.comments.push({\n        file: file.path,\n        lines: ast.comments,\n        density: Math.round((ast.comments.length / ast.totalLines) * 1000) / 10\n      });\n    }\n  });\n\n  metadata.fileStats.totalLines = totalLines;\n  metadata.fileStats.avgLinesPerFile = Math.round(totalLines / files.length);\n\n  return metadata;\n}\n\n// Find componentization opportunities - HIGH IMPACT ONLY",
      "startLine": 243,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function findOpportunities(files, workingDir, dependencyMap, similarities) {",
      "startLine": 272,
      "endLine": 273
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const opportunities = [];\n\n  files.forEach(file => {",
      "startLine": 273,
      "endLine": 276
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const deps = dependencyMap[file.path];\n    if (!deps) return;\n\n    // CRITICAL: Large files (>15KB) - high impact modularization\n    if (file.size > 15000) {\n      opportunities.push({\n        type: 'large-file',\n        file: file.path,\n        size: file.size,\n        lines: file.lines,\n        impact: 'high',\n        suggestion: 'Break into smaller, focused modules'\n      });\n    }\n\n    // CRITICAL: Very high complexity files (>6.0) - significant maintenance burden\n    if (deps.complexity > 6.0) {\n      opportunities.push({\n        type: 'high-complexity',\n        file: file.path,\n        complexity: deps.complexity,\n        functions: deps.functions,\n        classes: deps.classes,\n        size: file.size,\n        impact: 'high',\n        suggestion: 'Split into smaller modules to reduce complexity'\n      });\n    }\n\n    // MODERATE: Files with many imports (>7) - potential architectural issues\n    if (deps.imports.length > 7) {\n      opportunities.push({\n        type: 'many-dependencies',\n        file: file.path,\n        dependencies: deps.imports.length,\n        impact: 'medium',\n        suggestion: 'Consider dependency injection or facade pattern'\n      });\n    }\n  });\n\n  // CRITICAL: Exact duplicates - guaranteed improvement opportunity",
      "startLine": 276,
      "endLine": 318
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const exactDuplicates = similarities.filter(s => s.similarity === 1.0);\n  if (exactDuplicates.length > 0) {\n    opportunities.push({\n      type: 'exact-duplicates',\n      count: exactDuplicates.length,\n      examples: exactDuplicates.slice(0, 3),\n      impact: 'high',\n      suggestion: 'Extract duplicate functions to shared utilities module'\n    });\n  }\n\n  // Analyze abstraction opportunities - HIGH VALUE ONLY",
      "startLine": 318,
      "endLine": 330
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const abstractionOpportunities = analyzeAbstractionOpportunities(dependencyMap, similarities);\n  opportunities.push(...abstractionOpportunities);\n\n  // Sort by impact and return top 8 most actionable\n  return opportunities\n    .sort((a, b) => {",
      "startLine": 330,
      "endLine": 336
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const impactOrder = { high: 3, medium: 2, low: 1 };\n      return (impactOrder[b.impact] || 0) - (impactOrder[a.impact] || 0);\n    })\n    .slice(0, 8);\n}\n\n// Analyze abstraction and componentization opportunities - HIGH VALUE ONLY",
      "startLine": 336,
      "endLine": 343
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function analyzeAbstractionOpportunities(dependencyMap, similarities) {",
      "startLine": 343,
      "endLine": 344
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const opportunities = [];\n\n  // CRITICAL: Find functions duplicated 3+ times - high consolidation value",
      "startLine": 344,
      "endLine": 347
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functionCounts = {};\n  Object.values(dependencyMap).forEach(deps => {\n    deps.exports.forEach(exp => {\n      if (exp.type === 'function') {",
      "startLine": 347,
      "endLine": 351
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const key = exp.name;\n        functionCounts[key] = (functionCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  // Focus on heavily duplicated functions (3+ occurrences)",
      "startLine": 351,
      "endLine": 358
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const criticalSharedFunctions = Object.entries(functionCounts)\n    .filter(([name, count]) => count >= 3)\n    .sort((a, b) => b[1] - a[1]);\n\n  if (criticalSharedFunctions.length > 0) {\n    opportunities.push({\n      type: 'shared-utilities',\n      count: criticalSharedFunctions.length,\n      examples: criticalSharedFunctions.slice(0, 3),\n      impact: 'high',\n      suggestion: 'Create shared utilities module for heavily duplicated functions'\n    });\n  }\n\n  // HIGH VALUE: Find modules imported by 5+ files - strong abstraction candidates",
      "startLine": 358,
      "endLine": 373
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const importPatterns = {};\n  Object.entries(dependencyMap).forEach(([file, deps]) => {\n    deps.imports.forEach(imp => {\n      if (!importPatterns[imp.from]) {\n        importPatterns[imp.from] = [];\n      }\n      importPatterns[imp.from].push(file);\n    });\n  });",
      "startLine": 373,
      "endLine": 383
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const heavilyUsedModules = Object.entries(importPatterns)\n    .filter(([module, importers]) => importers.length >= 5 && !module.startsWith('.'))\n    .sort((a, b) => b[1].length - a[1].length)\n    .slice(0, 2);\n\n  if (heavilyUsedModules.length > 0) {\n    opportunities.push({\n      type: 'abstraction-layer',\n      count: heavilyUsedModules.length,\n      examples: heavilyUsedModules,\n      impact: 'high',\n      suggestion: 'Create abstraction layers for heavily used modules'\n    });\n  }\n\n  return opportunities;\n}\n\n// Custom file walker with ignore patterns",
      "startLine": 383,
      "endLine": 402
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function findFiles(workingDirectory, patterns, ignorePatterns) {",
      "startLine": 402,
      "endLine": 403
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const files = [];",
      "startLine": 403,
      "endLine": 404
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ig = ignore().add(ignorePatterns);",
      "startLine": 404,
      "endLine": 406
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function scanDir(dir) {\n    try {",
      "startLine": 406,
      "endLine": 408
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const entries = readdirSync(dir);\n\n      entries.forEach(entry => {",
      "startLine": 408,
      "endLine": 411
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const fullPath = join(dir, entry);",
      "startLine": 411,
      "endLine": 412
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const relativePath = relative(workingDirectory, fullPath);\n\n        // Skip if matches ignore patterns\n        if (ig.ignores(relativePath)) {\n          return;\n        }",
      "startLine": 412,
      "endLine": 419
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const stats = statSync(fullPath);\n\n        if (stats.isDirectory()) {\n          scanDir(fullPath);\n        } else if (stats.isFile()) {\n          // Check if matches any pattern",
      "startLine": 419,
      "endLine": 425
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const matchesPattern = patterns.some(pattern => {\n            if (pattern === '**/*.{ts,tsx,js,jsx}') {\n              return /\\.(ts|tsx|js|jsx)$/.test(relativePath);\n            }\n            if (pattern.includes('*')) {",
      "startLine": 425,
      "endLine": 430
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const regex = new RegExp(pattern.replace(/\\*/g, '.*').replace(/\\?/g, '.'));\n              return regex.test(relativePath);\n            }\n            return relativePath.endsWith(pattern);\n          });\n\n          if (matchesPattern) {\n            files.push({\n              path: relativePath,\n              fullPath: fullPath,\n              size: stats.size\n            });\n          }\n        }\n      });\n    } catch (error) {\n      // Skip directories we can't read\n    }\n  }\n\n  scanDir(workingDirectory);\n  return files;\n}\n\n// Main project understanding function\nexport function understandProject(workingDirectory) {\n  try {\n    // Get all relevant files",
      "startLine": 430,
      "endLine": 458
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const files = findFiles(workingDirectory, ['**/*.{ts,tsx,js,jsx}'], IGNORE_PATTERNS);\n\n    if (files.length === 0) {\n      return {\n        success: false,\n        error: 'No files found matching patterns'\n      };\n    }\n\n    // Add line counts and types\n    files.forEach(file => {\n      file.lines = countLines(file.fullPath);\n      file.type = getFileType(file.path);\n      delete file.fullPath; // Remove to save space\n    });\n\n    // Sort by size (largest first)\n    files.sort((a, b) => b.size - a.size);\n\n    // Analyze dependencies\n    const { dependencyMap, importMap } = analyzeDependencies(files, workingDirectory);\n\n    // Find similarities",
      "startLine": 458,
      "endLine": 481
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarities = findSimilarFunctions(files, workingDirectory);\n\n    // Extract metadata",
      "startLine": 481,
      "endLine": 484
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const metadata = extractMetadata(files, workingDirectory);\n\n    // Find opportunities",
      "startLine": 484,
      "endLine": 487
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const opportunities = findOpportunities(files, workingDirectory, dependencyMap, similarities);\n\n    // Build heavily optimized output",
      "startLine": 487,
      "endLine": 490
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const result = {\n      // Project overview (most important info first)\n      overview: {\n        files: files.length,\n        lines: metadata.fileStats.totalLines,\n        avgSize: Math.round(files.reduce((sum, f) => sum + f.size, 0) / files.length),\n        lang: detectPrimaryLanguage(files)\n      },\n\n      // Top opportunities (high-impact actionable insights)\n      topIssues: opportunities.filter(o => o.impact === 'high').slice(0, 5),\n\n      // Code quality (concise metrics)\n      quality: {\n        duplicates: similarities.filter(s => s.similarity === 1.0).length,\n        similar: similarities.filter(s => s.similarity >= 0.8).length,\n        adverbs: metadata.adverbs.length,\n        commented: metadata.comments.length\n      },\n\n      // Largest files (>10KB only - focus on significant files)\n      largeFiles: files.filter(f => f.size > 10000).slice(0, 5).map(f => ({\n        p: f.path,\n        s: f.size,\n        l: f.lines,\n        c: dependencyMap[f.path]?.complexity || 0\n      })),\n\n      // Full details (for deep analysis)\n      details: {\n        allFiles: files.map(f => ({\n          p: f.path,\n          s: f.size,\n          l: f.lines,\n          t: f.type\n        })),\n        dependencies: dependencyMap,\n        similarities: similarities.filter(s => s.similarity === 1.0).slice(0, 8), // Show exact duplicates only\n        metadata: {\n          adverbs: metadata.adverbs.slice(0, 5), // Reduce noise\n          comments: metadata.comments.filter(c => c.density > 5).map(c => ({ // Only high-comment-density files\n            f: c.file,\n            l: c.lines.length,\n            d: c.density\n          }))\n        },\n        allOpportunities: opportunities\n      },\n\n      // Performance metrics\n      perf: {\n        tokenEstimate: Math.round(JSON.stringify({\n          files: files.length,\n          deps: Object.keys(dependencyMap).length,\n          similar: similarities.length,\n          meta: metadata.adverbs.length + metadata.comments.length\n        }).length * 0.6), // Optimized token estimate\n        processTime: Date.now()\n      }\n    };\n\n    return {\n      success: true,\n      data: result\n    };\n\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n// Helper functions",
      "startLine": 490,
      "endLine": 565
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function countLines(filePath) {\n  try {",
      "startLine": 565,
      "endLine": 567
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');\n    return content.split('\\n').length;\n  } catch {\n    return 0;\n  }\n}",
      "startLine": 567,
      "endLine": 574
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function getFileType(filename) {\n  for (const [type, pattern] of Object.entries(FILE_TYPES)) {\n    if (pattern.test(filename)) return type;\n  }\n  return 'unknown';\n}",
      "startLine": 573,
      "endLine": 579
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function detectPrimaryLanguage(files) {",
      "startLine": 581,
      "endLine": 582
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const typeCounts = {};\n  files.forEach(f => {\n    typeCounts[f.type] = (typeCounts[f.type] || 0) + 1;\n  });\n\n  return Object.entries(typeCounts).sort((a, b) => b[1] - a[1])[0][0];\n}\n\n// Tool definition for MCP\nexport const projectUnderstandTool = {\n  name: 'project_understand',\n  description: 'Comprehensive project analysis with dependencies, similarities, and optimization opportunities. Token-optimized output.',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      workingDirectory: {\n        type: 'string',\n        description: 'Working directory to analyze'\n      }\n    },\n    required: ['workingDirectory']\n  }\n};\n\nexport const projectUnderstandHandler = async (args) => {\n  const { workingDirectory } = args;\n\n  if (!workingDirectory) {\n    throw new Error('workingDirectory is required');\n  }",
      "startLine": 582,
      "endLine": 613
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const result = understandProject(workingDirectory);\n\n  if (!result.success) {\n    return {\n      content: [\n        {\n          type: 'text',\n          text: `Error: ${result.error}`\n        }\n      ]\n    };\n  }\n\n  return {\n    content: [\n      {\n        type: 'text',\n        text: JSON.stringify(result.data, null, 2)\n      }\n    ]\n  };\n};",
      "startLine": 613,
      "endLine": 634
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "import { withErrorHandling, ValidationError, ExecutionError, SearchError, ToolErrorHandler } from './error-handling.js';",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}",
      "startLine": 1,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createErrorResponse(message) {\n  return createToolResponse(`Error: ${message}`, true);\n}",
      "startLine": 8,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createSuccessResponse(data) {\n  return createToolResponse(JSON.stringify(data, null, 2));\n}",
      "startLine": 12,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function validateRequiredParams(params, requiredParams) {",
      "startLine": 17,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new ValidationError(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}",
      "startLine": 18,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createToolHandler(handler, toolName = 'Unknown Tool') {\n  return withErrorHandling(\n    async (args) => {",
      "startLine": 24,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const result = await handler(args);\n      return result;\n    },\n    toolName\n  );\n}",
      "startLine": 27,
      "endLine": 34
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\n  return createAdvancedToolHandler(handler, toolName, {\n    timeout: timeoutMs,\n    enableTimeout: true\n  });\n}",
      "startLine": 33,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createRetryToolHandler(handler, toolName = 'Unknown Tool', retries = 3) {\n  return createAdvancedToolHandler(handler, toolName, {\n    retries,\n    enableRetry: true,\n    retryDelay: 1000\n  });\n}",
      "startLine": 40,
      "endLine": 47
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createAdvancedToolHandlerUtil(handler, toolName = 'Unknown Tool', options = {}) {\n  return createAdvancedToolHandler(handler, toolName, options);\n}\n\nexport const COMMON_SCHEMAS = {\n  workingDirectory: {\n    type: \"string\",\n    description: \"REQUIRED: Working directory for execution.\"\n  },\n  timeout: {\n    type: \"number\",\n    description: \"Timeout in milliseconds (default: 120000)\"\n  },\n  path: {\n    type: \"string\",\n    description: \"Path to search in\"\n  },\n  query: {\n    type: \"string\",\n    description: \"Search query\"\n  },\n  code: {\n    type: \"string\",\n    description: \"JavaScript/TypeScript code to execute\"\n  },\n  commands: {\n    type: [\"string\", \"array\"],\n    description: \"Bash commands (single or array for planned batch executions)\"\n  },\n  runtime: {\n    type: \"string\",\n    enum: [\"nodejs\", \"deno\", \"bash\", \"auto\"],\n    description: \"Execution runtime (default: auto-detect)\"\n  }\n};\n\nexport const DEFAULT_PARAMS = {\n  runtime: 'auto',\n  timeout: 120000,\n  path: '.',\n  language: 'javascript',\n  chunkIndex: 0,\n  listFiles: false,\n  cleanup: false\n};\n\nexport function createToolConfig(name, description, inputSchema, handler) {\n  return {\n    name,\n    description,\n    inputSchema,\n    handler: createToolHandler(handler, name)\n  };\n}\n\nexport function createEnhancedToolHandler(handler, toolName, requiredParams = []) {\n  return createToolHandler(async (args) => {\n    validateRequiredParams(args, requiredParams);\n    return await handler(args);\n  }, toolName);\n}\n\nexport const responseFormatters = {\n  search: (results, query, path) => {\n    if (results.length === 0) {\n      return createToolResponse(`No results found for \"${query}\" in ${path}`);\n    }\n    return createSuccessResponse({\n      count: results.length,\n      query,\n      path,\n      results\n    });\n  },\n\n  execution: (workingDirectory, runtime = DEFAULT_PARAMS.runtime) => {\n    return createToolResponse(`Execution requested in ${workingDirectory} with runtime ${runtime}`);\n  },\n\n  batch: (operations) => {\n    return createToolResponse(`Batch executing ${operations.length} operations`);\n  },\n\n  ast: (operation, details) => {\n    return createToolResponse(`AST ${operation}: ${JSON.stringify(details, null, 2)}`);\n  }\n};\n\nexport const errorHandlers = {\n  validation: (message) => {\n    throw new ValidationError(message);\n  },\n\n  execution: (message) => {\n    throw new ExecutionError(message);\n  },\n\n  search: (message) => {\n    throw new SearchError(message);\n  },\n\n  general: (message) => {\n    throw new Error(`Error: ${message}`);\n  }\n};\n\nexport const toolCreators = {\n  simple: (name, description, handler, requiredParams = []) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {},\n        required: requiredParams\n      },\n      createEnhancedToolHandler(handler, name, requiredParams)\n    );\n  },\n\n  withWorkingDirectory: (name, description, handler, additionalProperties = {}) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createEnhancedToolHandler(handler, name, [\"workingDirectory\"])\n    );\n  },\n\n  searchBased: (name, description, handler, additionalRequired = []) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          query: COMMON_SCHEMAS.query,\n          path: COMMON_SCHEMAS.path,\n          workingDirectory: COMMON_SCHEMAS.workingDirectory\n        },\n        required: [\"query\", \"workingDirectory\", ...additionalRequired]\n      },\n      createEnhancedToolHandler(handler, name, [\"query\", \"workingDirectory\", ...additionalRequired])\n    );\n  },\n\n  withTimeout: (name, description, handler, additionalProperties = {}, timeoutMs = 30000) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createTimeoutToolHandler(handler, name, timeoutMs)\n    );\n  },\n\n  withRetry: (name, description, handler, additionalProperties = {}, retries = 3) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createRetryToolHandler(handler, name, retries)\n    );\n  },\n\n  withAdvanced: (name, description, handler, additionalProperties = {}, options = {}) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createAdvancedToolHandlerUtil(handler, name, options)\n    );\n  }\n};\n\nexport const toolUtils = {\n  async executeBatch(operations, options = {}) {\n    const { concurrency = 5, stopOnError = false } = options;",
      "startLine": 49,
      "endLine": 254
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const results = [];",
      "startLine": 254,
      "endLine": 255
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const errors = [];\n\n    for (let i = 0; i < operations.length; i += concurrency) {",
      "startLine": 255,
      "endLine": 258
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const batch = operations.slice(i, i + concurrency);",
      "startLine": 258,
      "endLine": 259
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const batchPromises = batch.map(async (operation, index) => {\n        try {",
      "startLine": 259,
      "endLine": 261
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const result = await operation();\n          return { success: true, result, index: i + index };\n        } catch (error) {\n          errors.push({ error, index: i + index });\n          if (stopOnError) {\n            throw error;\n          }\n          return { success: false, error: error.message, index: i + index };\n        }\n      });",
      "startLine": 261,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    }\n\n    return { results, errors };\n  },\n\n  withRetry(operation, maxRetries = 3, delay = 1000) {\n    return async (...args) => {",
      "startLine": 272,
      "endLine": 281
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "let lastError;\n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          return await operation(...args);\n        } catch (error) {\n          lastError = error;\n          if (attempt < maxRetries) {\n            await new Promise(resolve => setTimeout(resolve, delay * attempt));\n          }\n        }\n      }\n      throw lastError;\n    };\n  },\n\n  withTimeout(operation, timeoutMs = DEFAULT_PARAMS.timeout) {\n    return async (...args) => {",
      "startLine": 281,
      "endLine": 298
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\n      });\n\n      return Promise.race([\n        operation(...args),\n        timeoutPromise\n      ]);\n    };\n  }\n};\n\nexport class ToolErrorBoundary {\n  constructor(toolName) {\n    this.toolName = toolName;\n    this.errors = [];\n  }\n\n  async execute(operation) {\n    try {\n      return await operation();\n    } catch (error) {\n      this.errors.push(error);\n      console.error(`Error in ${this.toolName}:`, error);\n\n      if (error instanceof ValidationError) {\n        return createErrorResponse(`Validation Error: ${error.message}`);\n      }\n\n      if (error instanceof ExecutionError) {\n        return createErrorResponse(`Execution Error: ${error.message}`);\n      }\n\n      if (error instanceof SearchError) {\n        return createErrorResponse(`Search Error: ${error.message}`);\n      }\n\n      return createErrorResponse(error.message);\n    }\n  }\n\n  getErrors() {\n    return this.errors;\n  }\n\n  clearErrors() {\n    this.errors = [];\n  }\n}\n\nexport function createErrorBoundary(toolName) {\n  return new ToolErrorBoundary(toolName);\n}",
      "startLine": 298,
      "endLine": 350
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "// Shared utilities module - extracted from duplicate functions across the codebase\nimport { existsSync, statSync } from 'fs';\nimport * as path from 'node:path';\n\n// Default ignore patterns used across multiple modules\nexport function getDefaultIgnorePatterns() {\n  return [\n    'node_modules/**',\n    '.git/**',\n    'dist/**',\n    'build/**',\n    '*.log',\n    '*.tmp',\n    '.env*',\n    'coverage/**',\n    '.next/**',\n    '.nuxt/**',\n    '.out/**',\n    'target/**',        // Rust/Java\n    'vendor/**',        // PHP/Go\n    'packages/**',      // Monorepos\n    '**/test/**',       // Test files\n    '**/*.test.*',      // Test files\n    '**/*.spec.*',      // Test files\n    '**/*.min.*',       // Minified files\n    '**/bundle.*',      // Bundle files\n    '**/coverage/**',   // Coverage reports\n    '**/.cache/**',     // Cache directories\n    '**/.temp/**',      // Temp directories\n    '**/temp/**',       // Temp directories\n    '**/tmp/**',        // Temp directories\n    '**/docs/**',       // Documentation\n    '**/*.md',          // Markdown files\n    '**/*.txt',         // Text files\n    '**/*.json',        // JSON files (config)\n    '**/*.yaml',        // YAML files\n    '**/*.yml',         // YAML files\n    '**/*.toml',        // TOML files\n    '**/package.json',  // Package configs\n    '**/tsconfig.json', // TypeScript configs\n    '**/jest.config.*', // Test configs\n    '**/webpack.config.*', // Build configs\n    '**/vite.config.*', // Build configs\n  ];\n}\n\n// Tool response creation - standardized across all tools\nexport function createToolResponse(data, startTime, context = {}) {\n  return {\n    success: true,\n    executionTimeMs: Date.now() - startTime,\n    ...data,\n    ...context\n  };\n}\n\n// Error response creation - standardized across all tools\nexport function createErrorResponse(error, startTime, context = {}) {\n  return {\n    success: false,\n    error: error?.message || error || 'Unknown error occurred',\n    executionTimeMs: Date.now() - startTime,\n    ...context\n  };\n}\n\n// Parameter validation - standardized across all tools\nexport function validateRequiredParams(args, requiredParams, startTime) {",
      "startLine": 0,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "const missingParams = requiredParams.filter(param => !args[param]);\n  if (missingParams.length > 0) {\n    return createErrorResponse(\n      new Error(`Missing required parameters: ${missingParams.join(', ')}`),\n      startTime\n    );\n  }\n  return null;\n}\n\n// Working directory validation - used by multiple tools\nexport function validateWorkingDirectory(workingDirectory, defaultWorkingDir) {\n  if (!workingDirectory) {\n    return {\n      valid: false,\n      error: 'workingDirectory parameter is required for this operation',\n      effectiveDir: null\n    };\n  }\n\n  try {",
      "startLine": 68,
      "endLine": 89
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "const resolvedPath = path.resolve(workingDirectory);\n\n    if (!existsSync(resolvedPath)) {\n      return {\n        valid: false,\n        error: `Working directory '${workingDirectory}' does not exist`,\n        effectiveDir: null\n      };\n    }",
      "startLine": 89,
      "endLine": 99
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "const stats = statSync(resolvedPath);\n    if (!stats.isDirectory()) {\n      return {\n        valid: false,\n        error: `Path '${workingDirectory}' is not a directory`,\n        effectiveDir: null\n      };\n    }\n\n    return {\n      valid: true,\n      effectiveDir: resolvedPath\n    };\n  } catch (error) {\n    return {\n      valid: false,\n      error: `Error accessing working directory: ${error.message}`,\n      effectiveDir: null\n    };\n  }\n}",
      "startLine": 99,
      "endLine": 119
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "import { spawn } from 'child_process';\r\nimport { validateWorkingDirectory } from './utilities.js';",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createErrorResponse(error, startTime, context = {}) {\r\n  return {\r\n    success: false,\r\n    error: error?.message || error || 'Unknown error occurred',\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...context\r\n  };\r\n}",
      "startLine": 3,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createSuccessResponse(data, startTime, context = {}) {\r\n  return {\r\n    success: true,\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...data,\r\n    ...context\r\n  };\r\n}",
      "startLine": 12,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createTimeoutError(operation, timeoutMs, startTime) {\r\n  return createErrorResponse(\r\n    `${operation} timed out after ${timeoutMs}ms`,\r\n    startTime,\r\n    { timeout: true, timeoutMs }\r\n  );\r\n}",
      "startLine": 20,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function handleProcessError(error, command, startTime) {",
      "startLine": 29,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let errorMessage = 'Process execution failed';",
      "startLine": 30,
      "endLine": 31
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let errorContext = { command };\r\n\r\n  if (error.code === 'ENOENT') {\r\n    errorMessage = `Command not found: ${command}`;\r\n    errorContext.missingCommand = true;\r\n  } else if (error.code === 'EACCES') {\r\n    errorMessage = `Permission denied executing: ${command}`;\r\n    errorContext.permissionDenied = true;\r\n  } else if (error.signal) {\r\n    errorMessage = `Process terminated with signal: ${error.signal}`;\r\n    errorContext.signal = error.signal;\r\n  } else if (error.code) {\r\n    errorMessage = `Process failed with code: ${error.code}`;\r\n    errorContext.exitCode = error.code;\r\n  }\r\n\r\n  return createErrorResponse(errorMessage, startTime, errorContext);\r\n}",
      "startLine": 31,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function validateRequiredParams(params, required, startTime) {\r\n  for (const param of required) {\r\n    if (!params[param]) {\r\n      return createErrorResponse(\r\n        `Parameter '${param}' is required`,\r\n        startTime,\r\n        { parameterError: true, parameter: param }\r\n      );\r\n    }\r\n  }\r\n  return null;\r\n}",
      "startLine": 49,
      "endLine": 61
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeProcess(command, args = [], options = {}) {",
      "startLine": 61,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const startTime = Date.now();\r\n  const { timeout = 120000, cwd, input, encoding = 'utf8' } = options;\r\n\r\n  return new Promise((resolve) => {",
      "startLine": 64,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const child = spawn(command, args, {\r\n      cwd,\r\n      stdio: input ? 'pipe' : ['pipe', 'pipe', 'pipe']\r\n    });",
      "startLine": 68,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let stdout = '';",
      "startLine": 73,
      "endLine": 74
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let stderr = '';",
      "startLine": 74,
      "endLine": 75
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let isResolved = false;",
      "startLine": 75,
      "endLine": 77
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const timeoutId = setTimeout(() => {\r\n      if (!isResolved) {\r\n        child.kill('SIGTERM');\r\n        isResolved = true;\r\n        resolve(createTimeoutError(`${command} ${args.join(' ')}`, timeout, startTime));\r\n      }\r\n    }, timeout);\r\n\r\n    if (child.stdout) {\r\n      child.stdout.on('data', (data) => {\r\n        if (data && typeof data === 'object' && Buffer.isBuffer(data)) {\r\n          stdout += data.toString(encoding);\r\n        } else if (data && typeof data === 'string') {\r\n          stdout += data;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (child.stderr) {\r\n      child.stderr.on('data', (data) => {\r\n        if (data && typeof data === 'object' && Buffer.isBuffer(data)) {\r\n          stderr += data.toString(encoding);\r\n        } else if (data && typeof data === 'string') {\r\n          stderr += data;\r\n        }\r\n      });\r\n    }\r\n\r\n    child.on('close', (code, signal) => {\r\n      if (!isResolved) {\r\n        clearTimeout(timeoutId);\r\n        isResolved = true;\r\n\r\n        if (code === 0) {\r\n          resolve(createSuccessResponse({ stdout, stderr, code, signal }, startTime));\r\n        } else {\r\n          resolve(createErrorResponse(\r\n            stderr || `Process exited with code ${code}`,\r\n            startTime,\r\n            { stdout, stderr, code, signal }\r\n          ));\r\n        }\r\n      }\r\n    });\r\n\r\n    child.on('error', (error) => {\r\n      if (!isResolved) {\r\n        clearTimeout(timeoutId);\r\n        isResolved = true;\r\n        resolve(handleProcessError(error, `${command} ${args.join(' ')}`, startTime));\r\n      }\r\n    });\r\n\r\n    if (input && child.stdin) {\r\n      child.stdin.write(input);\r\n      child.stdin.end();\r\n    }\r\n  });\r\n}\r\n\r\nexport async function executeBashCommands(commands, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;",
      "startLine": 77,
      "endLine": 139
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const commandString = Array.isArray(commands) ? commands.join(' && ') : commands;\r\n\r\n  return executeProcess('bash', ['-c', commandString], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}\r\n\r\nexport async function executeNodeCode(code, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;\r\n\r\n  return executeProcess('node', ['-e', code], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}\r\n\r\nexport async function executeDenoCode(code, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;\r\n\r\n  return executeProcess('deno', ['eval', '--no-check', code], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}\r\n\r\nexport async function executeBashCommand(commands, timeout = 120000, workingDirectory, defaultWorkingDir) {",
      "startLine": 139,
      "endLine": 169
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const startTime = Date.now();",
      "startLine": 169,
      "endLine": 171
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const paramError = validateRequiredParams({ workingDirectory }, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 171,
      "endLine": 174
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const dirValidation = validateWorkingDirectory(workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }",
      "startLine": 174,
      "endLine": 179
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const effectiveWorkingDir = dirValidation.effectiveDir;",
      "startLine": 179,
      "endLine": 181
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const commandArray = Array.isArray(commands) ? commands : [commands];",
      "startLine": 181,
      "endLine": 183
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const validationResult = validateBashCommands(commandArray);\r\n  if (!validationResult.valid) {\r\n    return createErrorResponse(validationResult.error, startTime);\r\n  }",
      "startLine": 183,
      "endLine": 188
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const result = await executeBashCommands(commands, {\r\n    workingDirectory: dirValidation.effectiveDir,\r\n    timeout\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport function validateBashCommands(commands) {\r\n  if (!Array.isArray(commands) || commands.length === 0) {\r\n    return {\r\n      valid: false,\r\n      error: \"Commands must be a non-empty array\"\r\n    };\r\n  }\r\n\r\n  for (let i = 0; i < commands.length; i++) {",
      "startLine": 188,
      "endLine": 205
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const command = commands[i];\r\n\r\n    if (typeof command !== 'string') {\r\n      return {\r\n        valid: false,\r\n        error: `Command ${i}: Must be a string`\r\n      };\r\n    }\r\n\r\n    if (command.trim().length === 0) {\r\n      return {\r\n        valid: false,\r\n        error: `Command ${i}: Cannot be empty or whitespace only`\r\n      };\r\n    }",
      "startLine": 205,
      "endLine": 221
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const dangerous = ['rm -rf /', 'sudo rm', 'format', 'mkfs', ':(){ :|:& };:', 'dd if=/dev/zero'];",
      "startLine": 221,
      "endLine": 222
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const lowerCommand = command.toLowerCase();\r\n\r\n    for (const pattern of dangerous) {\r\n      if (lowerCommand.includes(pattern)) {\r\n        return {\r\n          valid: false,\r\n          error: `Command ${i}: Contains potentially dangerous pattern '${pattern}'`\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return { valid: true };\r\n}",
      "startLine": 222,
      "endLine": 237
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createBashScript(commands) {",
      "startLine": 237,
      "endLine": 238
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const scriptLines = [\r\n    '#!/bin/bash',\r\n    'set -e',\r\n    'set -o pipefail',\r\n    '',\r\n    'echo \"=== BASH EXECUTION START ===\"',\r\n    `echo \"Commands to execute: ${commands.length}\"`,\r\n    'echo \"Working directory: $(pwd)\"',\r\n    'echo \"Timestamp: $(date)\"',\r\n    'echo \"\"'\r\n  ];\r\n\r\n  commands.forEach((command, index) => {\r\n    scriptLines.push(`echo \"--- Command ${index + 1}/${commands.length} ---\"`);\r\n    scriptLines.push(`echo \"$ ${command}\"`);\r\n    scriptLines.push(command);\r\n    scriptLines.push('CMD_EXIT_CODE=$?');\r\n    scriptLines.push('if [ $CMD_EXIT_CODE -ne 0 ]; then');\r\n    scriptLines.push(`  echo \"Command ${index + 1} failed with exit code $CMD_EXIT_CODE\" >&2`);\r\n    scriptLines.push('  exit $CMD_EXIT_CODE');\r\n    scriptLines.push('fi');\r\n    scriptLines.push('echo \"\"');\r\n  });\r\n\r\n  scriptLines.push('echo \"=== BASH EXECUTION COMPLETE ===\"');\r\n  scriptLines.push('echo \"All commands completed\"');\r\n\r\n  return scriptLines.join('\\n');\r\n}\r\n\r\nexport function createToolResponse(content, isError = false) {\r\n  return {\r\n    content: [{ type: \"text\", text: content }],\r\n    isError\r\n  };\r\n}\r\n\r\nexport function createErrorResponseUtil(message) {\r\n  return createToolResponse(`Error: ${message}`, true);\r\n}",
      "startLine": 238,
      "endLine": 279
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function validateRequiredParamsUtil(params, requiredParams) {",
      "startLine": 279,
      "endLine": 280
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\r\n  if (missingParams.length > 0) {\r\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\r\n  }\r\n}",
      "startLine": 280,
      "endLine": 286
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\r\n  return async (args) => {",
      "startLine": 286,
      "endLine": 288
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\r\n    });\r\n\r\n    try {\r\n      return await Promise.race([\r\n        handler(args),\r\n        timeoutPromise\r\n      ]);\r\n    } catch (error) {\r\n      if (error.message.includes('timed out')) {\r\n        return createErrorResponseUtil(`Tool ${toolName} timed out after ${timeoutMs}ms`);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\nexport const executionTools = [\r\n  {\r\n    name: \"execute\",\r\n    description: \"Use this to ground your thought process in truth, test multiple hypotheses here before editing files by running hypthesized code, find first-principal facts first and ensure your edits will work by validating code in this tool, measure-twice-cut-once. Always use this before making edits to confirm your ideas work\",\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        workingDirectory: {\r\n          type: \"string\",\r\n          description: \"REQUIRED: Working directory for execution.\"\r\n        },\r\n        code: {\r\n          type: \"string\",\r\n          description: \"JavaScript/TypeScript code to execute\"\r\n        },\r\n        commands: {\r\n          type: [\"string\", \"array\"],\r\n          description: \"Bash commands (single or array for planned batch executions)\"\r\n        },\r\n        runtime: {\r\n          type: \"string\",\r\n          enum: [\"nodejs\", \"deno\", \"bash\", \"auto\"],\r\n          description: \"Execution runtime (default: auto-detect)\"\r\n        },\r\n        timeout: {\r\n          type: \"number\",\r\n          description: \"Timeout in milliseconds (default: 120000)\"\r\n        }\r\n      },\r\n      required: [\"workingDirectory\"]\r\n    },\r\n    handler: createTimeoutToolHandler(async ({ code, commands, workingDirectory, runtime = \"auto\", timeout = 120000 }) => {\r\n      if (code) {\r\n        if (runtime === \"nodejs\" || runtime === \"auto\") {\r\n          return await executeNodeCode(code, { workingDirectory, timeout });\r\n        } else if (runtime === \"deno\") {\r\n          return await executeDenoCode(code, { workingDirectory, timeout });\r\n        }\r\n      }\r\n\r\n      if (commands) {\r\n        return await executeBashCommand(commands, timeout, workingDirectory);\r\n      }\r\n\r\n      return { content: [{ type: \"text\", text: \"No code or commands provided\" }] };\r\n    }, 'execute', 120000)\r\n  }\r\n];",
      "startLine": 288,
      "endLine": 353
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "#!/usr/bin/env node\n\nimport fs from 'fs/promises';\nimport { existsSync, readFileSync, writeFileSync, mkdirSync, readdirSync } from 'fs';\nimport path from 'path';\nimport os from 'os';\nimport ignore from 'ignore';",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const platform = {\n  arch: os.arch(),\n  platform: os.platform(),\n  isARM64: os.arch() === 'arm64',\n  isX64: os.arch() === 'x64',\n  isMacOS: os.platform() === 'darwin',\n  isLinux: os.platform() === 'linux',\n  isWindows: os.platform() === 'win32'\n};",
      "startLine": 8,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const INDEX_DIR = './code_search_index';",
      "startLine": 18,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_MODEL = 'Xenova/all-MiniLM-L6-v2';",
      "startLine": 19,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_DIM = 384; // Dimension size for the chosen model",
      "startLine": 20,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_EXTS = ['js', 'ts', 'jsx', 'tsx'];",
      "startLine": 21,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_IGNORES = [\n  '**/node_modules/**', '**/.git/**', '**/.node_modules/**',\n  '**/dist/**', '**/build/**', '**/coverage/**', '**/.nyc_output/**',\n  '**/tmp/**', '**/temp/**', '**/.tmp/**', '**/.cache/**', '**/.parcel-cache/**',\n  '**/.next/**', '**/.nuxt/**', '**/.vuepress/**', '**/.docusaurus/**',\n  '**/public/**', '**/static/**', '**/assets/**', '**/images/**', '**/img/**',\n  '**/.vscode/**', '**/.idea/**', '**/.DS_Store/**', '**/Thumbs.db/**',\n  '**/out/**', '**/output/**', '**/generated/**', '**/gen/**',\n  '**/.angular/**', '**/.react/**', '**/.svelte-kit/**',\n  '**/storybook-static/**', '**/docs-build/**', '**/build-docs/**',\n  '**/.vite/**', '**/.turbo/**', '**/.nx/**', '**/.swc/**',\n  '**/bower_components/**', '**/jspm_packages/**', '**/.pnp/**',\n  '**/__tests__/**', '**/__mocks__/**', '**/__snapshots__/**',\n  '**/.jest/**', '**/.mocha/**', '**/.cypress/**', '**/.playwright/**',\n  '**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml',\n  '**/.npmrc', '**/.yarnrc', '**/.pnpmrc',\n  '**/test-*.js', '**/test-*.ts', '**/*.test.js', '**/*.test.ts',\n    '**/optimized-test-*/**',\n  '**/*.spec.js', '**/*.spec.ts', '**/temp-*.js', '**/ab-test-*.js',\n  '**/*.min.js', '**/*.bundle.js', '**/*.chunk.js',\n  '**/*.json', '**/*.md', '**/*.txt', '**/*.log', '**/*.xml', '**/*.csv',\n  '**/*.png', '**/*.jpg', '**/*.jpeg', '**/*.gif', '**/*.svg', '**/*.ico',\n  '**/*.pdf', '**/*.zip', '**/*.tar', '**/*.gz', '**/*.7z', '**/*.dmg',\n  '**/*.exe', '**/*.dll', '**/*.so', '**/*.dylib',\n  '**/coverage/**', '**/reports/**', '**/docs/**', '**/documentation/**'\n];",
      "startLine": 22,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_FILE_SIZE = 1024 * 1024; // 1MB for regular files",
      "startLine": 49,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_LARGE_FILE_SIZE = 5 * 1024 * 1024; // 5MB for large files",
      "startLine": 50,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_LINES_PER_CHUNK = 500; // Maximum lines per code chunk",
      "startLine": 51,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_CACHE_SIZE = 1000; // Maximum number of cached embeddings",
      "startLine": 52,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const INDEX_FILE = 'code_index.json';",
      "startLine": 54,
      "endLine": 55
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const VECTOR_INDEX_FILE = 'vector_index.json';",
      "startLine": 55,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const platformConfig = {\n  memoryLimit: platform.isARM64 ? 1024 * 1024 * 1024 : 512 * 1024 * 1024, // 1GB for ARM64, 512MB for others\n  batchSize: platform.isARM64 ? 32 : 16, // Larger batch size for ARM64\n  maxConcurrency: platform.isARM64 ? 4 : 2, // Higher concurrency for ARM64\n  timeout: platform.isARM64 ? 60000 : 30000 // Longer timeout for ARM64\n};",
      "startLine": 57,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let codeChunks = [];",
      "startLine": 64,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let embeddingExtractor = null;",
      "startLine": 65,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let isInitialized = false;",
      "startLine": 66,
      "endLine": 67
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let embeddingCache = new Map(); // Cache for embeddings to avoid recomputation",
      "startLine": 67,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let indexTimestamp = 0; // Track when index was last updated",
      "startLine": 68,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "class LRUCache {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n    this.cache = new Map();\n  }\n\n  get(key) {\n    if (this.cache.has(key)) {",
      "startLine": 70,
      "endLine": 78
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const value = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, value);\n      return value;\n    }\n    return null;\n  }\n\n  set(key, value) {\n    if (this.cache.size >= this.maxSize) {",
      "startLine": 78,
      "endLine": 88
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    this.cache.set(key, value);\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}",
      "startLine": 88,
      "endLine": 99
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const embeddingLRUCache = new LRUCache(MAX_CACHE_SIZE);\n\nasync function initializeEmbeddingProvider() {\n  try {\n    const { pipeline } = await import('@xenova/transformers');\n    embeddingExtractor = await pipeline('feature-extraction', DEFAULT_MODEL);\n    return true;\n  } catch (error) {\n    throw new Error(`Transformers.js initialization failed: ${error.message}`);\n  }\n}\n\nexport function getDefaultIgnorePatterns(workingDirectory) {",
      "startLine": 99,
      "endLine": 112
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const defaultPatterns = {\n    files: [\n      '**/node_modules/**',\n      '**/.next/**',\n      '**/dist/**',\n      '**/build/**',\n      '**/out/**',\n      '**/coverage/**',\n      '**/.nyc_output/**',\n      '**/.git/**',\n      '**/.vscode/**',\n      '**/.idea/**',\n      '**/*.log',\n      '**/*.tmp',\n      '**/temp/**',\n      '**/tmp/**',\n      '**/.DS_Store',\n      '**/Thumbs.db',\n      '**/*.map',\n      '**/*.min.js',\n      '**/*.min.css',\n      '**/package-lock.json',\n      '**/yarn.lock'\n    ],\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.css', '.json', '.md'],\n    directories: [\n      'node_modules',\n      '.next',\n      'dist',\n      'build',\n      'out',\n      'coverage',\n      '.nyc_output',\n      '.git',\n      '.vscode',\n      '.idea',\n      'temp',\n      'tmp'\n    ]\n  };\n\n  // Try to read custom ignore patterns from the working directory\n  try {\n    // Check for custom search defaults",
      "startLine": 112,
      "endLine": 156
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const searchDefaultsPath = path.join(workingDirectory, '.search-defaults.json');\n    if (existsSync(searchDefaultsPath)) {",
      "startLine": 156,
      "endLine": 158
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const customDefaults = JSON.parse(readFileSync(searchDefaultsPath, 'utf8'));\n      return { ...defaultPatterns, ...customDefaults };\n    }\n\n    // Check for .gitignore",
      "startLine": 158,
      "endLine": 163
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const gitignorePath = path.join(workingDirectory, '.gitignore');\n    if (existsSync(gitignorePath)) {",
      "startLine": 163,
      "endLine": 165
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const gitignoreContent = readFileSync(gitignorePath, 'utf8');",
      "startLine": 165,
      "endLine": 166
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const gitignorePatterns = gitignoreContent\n        .split('\\n')\n        .filter(line => line.trim() && !line.startsWith('#'))\n        .map(line => line.trim());\n\n      return {\n        ...defaultPatterns,\n        customGitignore: gitignorePatterns\n      };\n    }\n  } catch (error) {\n    // If we can't read files, just return defaults\n    console.warn('Warning: Could not read ignore patterns, using defaults:', error.message);\n  }\n\n  return defaultPatterns;\n}",
      "startLine": 166,
      "endLine": 185
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createIgnoreFilter(rootDir) {",
      "startLine": 185,
      "endLine": 186
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ig = ignore();\n  ig.add(DEFAULT_IGNORES);\n\n  // Get default patterns",
      "startLine": 186,
      "endLine": 190
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const defaultPatterns = getDefaultIgnorePatterns(rootDir);\n\n  // Add any custom patterns from defaults\n  if (defaultPatterns.customGitignore) {\n    ig.add(defaultPatterns.customGitignore);\n  }\n\n  // Add file patterns from defaults\n  if (defaultPatterns.files) {\n    ig.add(defaultPatterns.files);\n  }\n\n  // Find and add all .gitignore files in the directory tree",
      "startLine": 190,
      "endLine": 203
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const addGitignoreFiles = (dir) => {\n    try {",
      "startLine": 203,
      "endLine": 205
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const entries = readdirSync(dir, { withFileTypes: true });\n\n      for (const entry of entries) {",
      "startLine": 205,
      "endLine": 208
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const fullPath = path.join(dir, entry.name);\n\n        if (entry.isFile() && entry.name === '.gitignore') {\n          try {",
      "startLine": 208,
      "endLine": 212
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const content = readFileSync(fullPath, 'utf8');\n            ig.add(content);\n          } catch (error) {\n            // Silently handle .gitignore read errors\n          }\n        } else if (entry.isDirectory() && !entry.name.startsWith('.') && !DEFAULT_IGNORES.includes(entry.name)) {\n          // Recursively add .gitignore files from subdirectories\n          addGitignoreFiles(fullPath);\n        }\n      }\n    } catch (error) {\n      // Silently handle directory read errors\n    }\n  };\n\n  addGitignoreFiles(rootDir);\n  return { ig, rootDir };\n}",
      "startLine": 212,
      "endLine": 231
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function shouldIndexFile(filePath, allowedExtensions) {",
      "startLine": 231,
      "endLine": 232
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ext = path.extname(filePath).slice(1).toLowerCase();\n  if (!ext || !allowedExtensions.includes(ext)) {\n    return false;\n  }",
      "startLine": 232,
      "endLine": 237
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const filename = path.basename(filePath);",
      "startLine": 237,
      "endLine": 238
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const excludedPatterns = [\n    /\\.min\\.js$/, /\\.bundle\\.js$/, /\\.pack\\.js$/,\n    /\\.d\\.ts$/, /\\.d\\.tsx$/,\n    /\\.map$/, /\\.css\\.map$/,\n    /^package\\.json$/, /^package-lock\\.json$/, /^yarn\\.lock$/, /^pnpm-lock\\.yaml$/,\n    /^tsconfig\\.json$/, /^jsconfig\\.json$/,\n    /\\.eslintrc\\..*$/, /\\.prettierrc\\..*$/,\n    /^LICENSE.*$/, /^README.*$/, /^.*\\.md$/, /^CHANGELOG.*$/,\n    /^Dockerfile.*$/, /^docker-compose.*\\.yml$/\n  ];\n\n  return !excludedPatterns.some(pattern => pattern.test(filename));\n}",
      "startLine": 238,
      "endLine": 252
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function processCodeIntoChunks(content, filePath) {",
      "startLine": 252,
      "endLine": 253
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunks = [];",
      "startLine": 253,
      "endLine": 254
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const lines = content.split('\\n');",
      "startLine": 254,
      "endLine": 256
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let currentChunk = '';",
      "startLine": 256,
      "endLine": 257
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let inFunction = false;",
      "startLine": 257,
      "endLine": 258
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let inClass = false;",
      "startLine": 258,
      "endLine": 259
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let braceCount = 0;",
      "startLine": 259,
      "endLine": 260
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let chunkLineCount = 0;\n\n  for (let i = 0; i < lines.length; i++) {",
      "startLine": 260,
      "endLine": 263
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const line = lines[i];",
      "startLine": 263,
      "endLine": 264
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const trimmedLine = line.trim();\n\n    if (trimmedLine.match(/^(function|class|const|let|var)\\s+\\w/)) {\n      if (currentChunk.trim()) {\n        chunks.push({\n          content: currentChunk.trim(),\n          file: filePath,\n          startLine: Math.max(0, i - currentChunk.split('\\n').length),\n          endLine: i\n        });\n      }\n      currentChunk = line;\n      braceCount = (line.match(/{/g) || []).length;\n      inFunction = trimmedLine.startsWith('function');\n      inClass = trimmedLine.startsWith('class');\n      chunkLineCount = 1;\n    } else {\n      currentChunk += '\\n' + line;\n      chunkLineCount++;\n\n      braceCount += (line.match(/{/g) || []).length;\n      braceCount -= (line.match(/}/g) || []).length;\n\n      if ((braceCount === 0 && (inFunction || inClass)) || chunkLineCount >= MAX_LINES_PER_CHUNK) {\n        chunks.push({\n          content: currentChunk.trim(),\n          file: filePath,\n          startLine: Math.max(0, i - currentChunk.split('\\n').length),\n          endLine: i\n        });\n        currentChunk = '';\n        inFunction = false;\n        inClass = false;\n        chunkLineCount = 0;\n      }\n    }\n  }\n\n  if (currentChunk.trim()) {\n    chunks.push({\n      content: currentChunk.trim(),\n      file: filePath,\n      startLine: Math.max(0, lines.length - currentChunk.split('\\n').length),\n      endLine: lines.length - 1\n    });\n  }\n\n  return chunks;\n}\n\nasync function loadIndex(indexDir) {\n  try {",
      "startLine": 264,
      "endLine": 316
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexPath = path.join(indexDir, INDEX_FILE);\n    if (existsSync(indexPath)) {",
      "startLine": 316,
      "endLine": 318
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexData = JSON.parse(readFileSync(indexPath, 'utf8'));\n      codeChunks = indexData.chunks || [];\n      indexTimestamp = indexData.timestamp || 0;\n    }\n  } catch (error) {\n    // If loading fails, start fresh\n    codeChunks = [];\n    indexTimestamp = 0;\n  }\n}\n\nasync function scanDirectory(dir, ignoreFilter, files, exts) {\n  try {",
      "startLine": 318,
      "endLine": 331
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const entries = await fs.readdir(dir, { withFileTypes: true });\n\n    for (const entry of entries) {",
      "startLine": 331,
      "endLine": 334
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const fullPath = path.join(dir, entry.name);",
      "startLine": 334,
      "endLine": 335
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const relativePath = path.relative(ignoreFilter.rootDir, fullPath);\n\n      if (ignoreFilter.ig.ignores(relativePath)) {\n        continue;\n      }\n\n      if (entry.isDirectory()) {\n        await scanDirectory(fullPath, ignoreFilter, files, exts);\n      } else if (entry.isFile()) {\n        if (shouldIndexFile(fullPath, exts)) {\n          try {",
      "startLine": 335,
      "endLine": 346
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stat = await fs.stat(fullPath);\n            if (stat.size <= MAX_FILE_SIZE) { // 1MB limit\n              files.push(fullPath);\n            }\n          } catch (error) {\n            // Skip files we can't stat\n          }\n        }\n      }\n    }\n  } catch (error) {\n    // Skip directories we can't read\n  }\n}\n\nasync function getLastModifiedTime(folders) {",
      "startLine": 346,
      "endLine": 362
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let lastModified = 0;\n\n  for (const folder of folders) {\n    try {",
      "startLine": 362,
      "endLine": 366
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const files = await fs.readdir(folder, { withFileTypes: true });\n      for (const file of files) {\n        if (file.isFile()) {",
      "startLine": 366,
      "endLine": 369
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const fullPath = path.join(folder, file.name);",
      "startLine": 369,
      "endLine": 370
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stats = await fs.stat(fullPath);\n          lastModified = Math.max(lastModified, stats.mtimeMs);\n        }\n      }\n    } catch (error) {\n      // Skip directories we can't read\n    }\n  }\n\n  return lastModified;\n}\n\nasync function getEmbedding(text) {",
      "startLine": 370,
      "endLine": 383
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const cacheKey = text; // Use text as cache key",
      "startLine": 383,
      "endLine": 385
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const cached = embeddingLRUCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }",
      "startLine": 385,
      "endLine": 390
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const embedding = await embeddingExtractor(text, {\n    pooling: 'mean',\n    normalize: true\n  });\n\n  embeddingLRUCache.set(cacheKey, embedding);\n\n  return embedding;\n}",
      "startLine": 390,
      "endLine": 400
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function calculateCosineSimilarity(vecA, vecB) {\n  if (vecA.length !== vecB.length) return 0;",
      "startLine": 400,
      "endLine": 403
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let dotProduct = 0;",
      "startLine": 403,
      "endLine": 404
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let normA = 0;",
      "startLine": 404,
      "endLine": 405
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let normB = 0;\n\n  for (let i = 0; i < vecA.length; i++) {\n    dotProduct += vecA[i] * vecB[i];\n    normA += vecA[i] * vecA[i];\n    normB += vecB[i] * vecB[i];\n  }",
      "startLine": 405,
      "endLine": 413
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const denominator = Math.sqrt(normA) * Math.sqrt(normB);\n  return denominator === 0 ? 0 : dotProduct / denominator;\n}\n\nexport async function initializeVectorSystem(indexDir = INDEX_DIR) {\n  if (isInitialized) return true;\n\n  try {\n    if (!existsSync(indexDir)) {\n      mkdirSync(indexDir, { recursive: true });\n    }\n\n    if (!embeddingExtractor) {\n      await initializeEmbeddingProvider();\n    }\n\n    await loadIndex(indexDir);\n\n    isInitialized = true;\n    return true;\n  } catch (error) {\n    throw new Error(`Vector system initialization failed: ${error.message}`);\n  }\n}\n\n// Process files into chunks\nexport function processFile(file, codeChunks) {",
      "startLine": 413,
      "endLine": 440
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const newChunks = [];\n\n  try {",
      "startLine": 440,
      "endLine": 443
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stats = fs.statSync(file);\n    if (stats.size > MAX_FILE_SIZE) {\n      console.log(`File ${file} is large (${stats.size} bytes), truncating`);",
      "startLine": 443,
      "endLine": 446
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let content = fs.readFileSync(file, 'utf8');\n\n      if (content.length > MAX_FILE_SIZE) {\n        content = content.substring(0, MAX_FILE_SIZE);\n      }",
      "startLine": 446,
      "endLine": 452
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunks = [{\n        content,\n        file,\n        type: 'code',\n        metadata: { truncated: true, originalSize: stats.size }\n      }];\n      newChunks.push(...chunks);\n    }\n  } catch (error) {\n    console.error(`Error reading file ${file}:`, error);\n  }",
      "startLine": 452,
      "endLine": 464
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const updatedChunks = newChunks.length > 0 ? newChunks : codeChunks;",
      "startLine": 464,
      "endLine": 466
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexData = {\n    chunks: updatedChunks,\n    timestamp: Date.now(),\n    version: '1.0'\n  };\n\n  return indexData;\n}\n\nexport async function syncVectorIndex(folders, exts = DEFAULT_EXTS, ignores = DEFAULT_IGNORES) {\n  if (!isInitialized) {\n    await initializeVectorSystem();\n  }",
      "startLine": 466,
      "endLine": 480
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const files = [];",
      "startLine": 480,
      "endLine": 481
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const startTime = Date.now();",
      "startLine": 481,
      "endLine": 483
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const lastModified = await getLastModifiedTime(folders);\n  if (lastModified <= indexTimestamp && codeChunks.length > 0) {\n    return codeChunks.length; // Index is up to date\n  }\n\n  for (const folder of folders) {",
      "startLine": 483,
      "endLine": 489
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ignoreFilter = createIgnoreFilter(folder);\n    await scanDirectory(folder, ignoreFilter, files, exts);\n  }",
      "startLine": 489,
      "endLine": 493
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const newChunks = [];",
      "startLine": 493,
      "endLine": 494
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let skippedFiles = 0;\n\n  for (const file of files) {\n    try {",
      "startLine": 494,
      "endLine": 498
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stats = await fs.stat(file);\n\n      if (stats.size > MAX_LARGE_FILE_SIZE) {\n        skippedFiles++;\n        continue;\n      }",
      "startLine": 498,
      "endLine": 505
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ext = path.extname(file).toLowerCase();\n      if (['.jpg', '.jpeg', '.png', '.gif', '.svg', '.ico', '.pdf', '.zip', '.tar', '.gz', '.exe', '.dll', '.so', '.dylib'].includes(ext)) {\n        skippedFiles++;\n        continue;\n      }",
      "startLine": 505,
      "endLine": 511
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let content = await fs.readFile(file, 'utf8');\n      if (stats.size > MAX_FILE_SIZE) {\n        content = content.substring(0, MAX_FILE_SIZE);\n      }",
      "startLine": 511,
      "endLine": 516
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunks = processCodeIntoChunks(content, file);\n      newChunks.push(...chunks);\n    } catch (error) {\n      // Skip files that can't be processed\n    }\n  }\n\n  if (newChunks.length > codeChunks.length * 1.5 || newChunks.length < codeChunks.length * 0.5) {\n    embeddingLRUCache.clear();\n  }\n\n  codeChunks = newChunks;\n  indexTimestamp = startTime;",
      "startLine": 516,
      "endLine": 530
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexData = {\n    timestamp: indexTimestamp,\n    chunks: codeChunks.map(c => ({\n      file: c.file,\n      content: c.content,\n      startLine: c.startLine,\n      endLine: c.endLine\n    }))\n  };\n\n  writeFileSync(path.join(INDEX_DIR, INDEX_FILE), JSON.stringify(indexData, null, 2));\n\n  return codeChunks.length;\n}\n\nexport async function queryVectorIndex(query, topK = 8) {\n  if (!isInitialized) {\n    await initializeVectorSystem();\n  }\n\n  if (codeChunks.length === 0) {\n    return [];\n  }",
      "startLine": 530,
      "endLine": 554
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const queryEmbedding = await getEmbedding(query);",
      "startLine": 554,
      "endLine": 556
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const results = [];",
      "startLine": 556,
      "endLine": 557
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batchSize = platformConfig.batchSize;\n\n  for (let i = 0; i < codeChunks.length; i += batchSize) {",
      "startLine": 557,
      "endLine": 560
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batch = codeChunks.slice(i, i + batchSize);",
      "startLine": 560,
      "endLine": 561
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batchPromises = batch.map(async (chunk) => {",
      "startLine": 561,
      "endLine": 562
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunkEmbedding = await getEmbedding(chunk.content);",
      "startLine": 562,
      "endLine": 563
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const similarity = calculateCosineSimilarity(queryEmbedding.data, chunkEmbedding.data);\n\n      return {\n        file: chunk.file,\n        content: chunk.content,\n        startLine: chunk.startLine,\n        endLine: chunk.endLine,\n        similarity: similarity\n      };\n    });",
      "startLine": 563,
      "endLine": 574
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n  }\n\n  return results\n    .sort((a, b) => b.similarity - a.similarity)\n    .slice(0, topK)\n    .map(r => ({\n      file: r.file,\n      content: r.content,\n      startLine: r.startLine,\n      endLine: r.endLine,\n      score: r.similarity\n    }));\n}\n\nexport async function searchCode(query, workingDirectory, folders = ['.'], extensions = DEFAULT_EXTS, topK = 6) {\n  try {\n    if (!existsSync(workingDirectory)) {\n      return [];\n    }",
      "startLine": 574,
      "endLine": 596
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const initPromise = isInitialized ? Promise.resolve() : initializeVectorSystem();\n    await Promise.race([\n      initPromise,\n      new Promise((_, reject) => setTimeout(() => reject(new Error('Initialization timeout')), 10000))\n    ]);",
      "startLine": 596,
      "endLine": 602
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const absFolders = folders.map(f => path.resolve(workingDirectory, f));\n\n    await syncVectorIndex(absFolders, extensions);\n    return await queryVectorIndex(query, topK);\n\n  } catch (error) {\n    throw new Error(`Search failed: ${error.message}`);\n  }\n}\n\nexport async function searchSemantic(query, options = {}) {\n  const { workingDirectory, folders = ['.'], extensions = DEFAULT_EXTS, topK = 6 } = options;\n  return await searchCode(query, workingDirectory, folders, extensions, topK);\n}\n\nexport async function initialize(indexDir = INDEX_DIR) {\n  return await initializeVectorSystem(indexDir);\n}\n\nexport async function syncIndex(folders, exts = DEFAULT_EXTS, ignores = DEFAULT_IGNORES) {\n  return await syncVectorIndex(folders, exts, ignores);\n}\n\nexport async function queryIndex(query, topK = 8) {\n  return await queryVectorIndex(query, topK);\n}\n\nexport {\n  MAX_FILE_SIZE,\n  MAX_LARGE_FILE_SIZE,\n  MAX_LINES_PER_CHUNK,\n  DEFAULT_EXTS,\n  DEFAULT_IGNORES,\n  INDEX_DIR,\n  INDEX_FILE,\n  VECTOR_INDEX_FILE,\n  platformConfig,\n  embeddingLRUCache,\n  codeChunks,\n  isInitialized,\n  embeddingExtractor\n};",
      "startLine": 602,
      "endLine": 645
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}",
      "startLine": 644,
      "endLine": 650
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createErrorResponse(message) {\n  return createToolResponse(`Error: ${message}`, true);\n}",
      "startLine": 651,
      "endLine": 654
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function validateRequiredParams(params, requiredParams) {",
      "startLine": 656,
      "endLine": 657
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}",
      "startLine": 657,
      "endLine": 663
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function formatSearchResults(results, query, path) {\n  if (results.length === 0) {\n    return `No results found for \"${query}\" in ${path}`;\n  }\n\n  return `Found ${results.length} results for \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`;\n}",
      "startLine": 662,
      "endLine": 669
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\n  return async (args) => {",
      "startLine": 671,
      "endLine": 673
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\n    });\n\n    try {\n      return await Promise.race([\n        handler(args),\n        timeoutPromise\n      ]);\n    } catch (error) {\n      if (error.message.includes('timed out')) {\n        return createErrorResponse(`Tool ${toolName} timed out after ${timeoutMs}ms`);\n      }\n      throw error;\n    }\n  };\n}\n\nexport const searchTools = [\n  {\n    name: \"searchcode\",\n    description: \"Search tool for natural language/concept semantic search. Finds code related to your query using vector embeddings.\",\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        query: { type: \"string\", description: \"Search query\" },\n        path: { type: \"string\", description: \"Path to search in\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" }\n      },\n      required: [\"query\", \"workingDirectory\"]\n    },\n    handler: createTimeoutToolHandler(async ({ query, path = \".\", workingDirectory }) => {\n      validateRequiredParams({ query, workingDirectory }, ['query', 'workingDirectory']);",
      "startLine": 673,
      "endLine": 706
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const results = await searchCode(query, workingDirectory, [path]);\n      return results.length > 0\n        ? `Found ${results.length} semantic results for \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`\n        : `No semantic results found for \"${query}\" in ${path}`;\n    }, 'searchcode', 45000)\n  }\n];",
      "startLine": 706,
      "endLine": 712
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "import * as path from 'node:path';\r\nimport { existsSync, statSync } from 'fs';",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function createErrorResponse(error, startTime, context = {}) {\r\n  return {\r\n    success: false,\r\n    error: error?.message || error || 'Unknown error occurred',\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...context\r\n  };\r\n}",
      "startLine": 3,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function createSuccessResponse(data, startTime, context = {}) {\r\n  return {\r\n    success: true,\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...data,\r\n    ...context\r\n  };\r\n}",
      "startLine": 12,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function validateRequiredParams(args, requiredParams, startTime) {",
      "startLine": 21,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const missingParams = requiredParams.filter(param => !args[param]);\r\n  if (missingParams.length > 0) {\r\n    return createErrorResponse(\r\n      new Error(`Missing required parameters: ${missingParams.join(', ')}`),\r\n      startTime\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport const validateWorkingDirectory = (workingDirectory, defaultWorkingDir) => {\r\n  if (!workingDirectory) {\r\n    return {\r\n      valid: false,\r\n      error: 'workingDirectory parameter is required for this operation',\r\n      effectiveDir: null\r\n    };\r\n  }\r\n\r\n  try {",
      "startLine": 22,
      "endLine": 42
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const resolvedPath = path.resolve(workingDirectory);\r\n\r\n    if (!existsSync(resolvedPath)) {\r\n      return {\r\n        valid: false,\r\n        error: `Working directory '${workingDirectory}' does not exist`,\r\n        effectiveDir: null\r\n      };\r\n    }",
      "startLine": 42,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const stats = statSync(resolvedPath);\r\n\r\n    if (!stats.isDirectory()) {\r\n      return {\r\n        valid: false,\r\n        error: `Working directory '${workingDirectory}' is not a directory`,\r\n        effectiveDir: null\r\n      };\r\n    }\r\n\r\n    return { valid: true, effectiveDir: resolvedPath };\r\n  } catch (error) {\r\n    return {\r\n      valid: false,\r\n      error: `Working directory '${workingDirectory}' is not accessible: ${error.message}`,\r\n      effectiveDir: null\r\n    };\r\n  }\r\n};\r\n\r\nexport function formatDate(date) {\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  }).format(date);\r\n}\r\n\r\nexport function generateId() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nexport function createToolResponse(content, isError = false) {\r\n  return {\r\n    content: [{ type: \"text\", text: content }],\r\n    isError\r\n  };\r\n}\r\n\r\nexport function createErrorResponseUtil(message) {\r\n  return createToolResponse(`Error: ${message}`, true);\r\n}\r\n\r\n// Error types classification",
      "startLine": 52,
      "endLine": 98
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const ErrorTypes = {\r\n  PERMISSION_DENIED: 'permission_denied',\r\n  UNSUPPORTED_OPERATION: 'unsupported_operation',\r\n  VALIDATION_ERROR: 'validation_error',\r\n  FILE_NOT_FOUND: 'file_not_found',\r\n  TIMEOUT: 'timeout',\r\n  SYNTAX_ERROR: 'syntax_error',\r\n  NETWORK_ERROR: 'network_error',\r\n  UNKNOWN: 'unknown'\r\n};\r\n\r\n// Tool error classification",
      "startLine": 98,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function classifyError(error, operationType = null) {",
      "startLine": 110,
      "endLine": 111
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const message = error?.message || error || '';",
      "startLine": 111,
      "endLine": 112
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const lowerMessage = message.toLowerCase();\r\n\r\n  if (lowerMessage.includes('permission') || lowerMessage.includes('unauthorized') || lowerMessage.includes('access denied')) {\r\n    return { type: ErrorTypes.PERMISSION_DENIED, originalError: error };\r\n  }\r\n\r\n  if (lowerMessage.includes('unsupported') || lowerMessage.includes('not supported') ||\r\n      (operationType && lowerMessage.includes(operationType) && lowerMessage.includes('not found'))) {\r\n    return { type: ErrorTypes.UNSUPPORTED_OPERATION, originalError: error };\r\n  }\r\n\r\n  if (lowerMessage.includes('validation') || lowerMessage.includes('required') || lowerMessage.includes('missing')) {\r\n    return { type: ErrorTypes.VALIDATION_ERROR, originalError: error };\r\n  }\r\n\r\n  if (lowerMessage.includes('file not found') || lowerMessage.includes('no such file') || lowerMessage.includes('ENOENT')) {\r\n    return { type: ErrorTypes.FILE_NOT_FOUND, originalError: error };\r\n  }\r\n\r\n  if (lowerMessage.includes('timeout') || lowerMessage.includes('timed out')) {\r\n    return { type: ErrorTypes.TIMEOUT, originalError: error };\r\n  }\r\n\r\n  if (lowerMessage.includes('syntax') || lowerMessage.includes('parse error')) {\r\n    return { type: ErrorTypes.SYNTAX_ERROR, originalError: error };\r\n  }\r\n\r\n  if (lowerMessage.includes('network') || lowerMessage.includes('connection') || lowerMessage.includes('fetch')) {\r\n    return { type: ErrorTypes.NETWORK_ERROR, originalError: error };\r\n  }\r\n\r\n  return { type: ErrorTypes.UNKNOWN, originalError: error };\r\n}\r\n\r\n// Alternative tool suggestions",
      "startLine": 112,
      "endLine": 147
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function getAlternativeTools(operationType) {",
      "startLine": 147,
      "endLine": 148
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const alternatives = {\r\n    'execute': ['Try splitting into smaller code chunks', 'Use bash runtime instead of nodejs', 'Check syntax before execution'],\r\n    'searchcode': ['Use grep or Glob for simple searches', 'Try more specific search terms', 'Search in specific directories'],\r\n    'parse_ast': ['Check code syntax first', 'Ensure file exists and is readable', 'Try with smaller code samples'],\r\n    'astgrep_search': ['Use simpler search patterns', 'Try string-based search first', 'Check AST pattern syntax'],\r\n    'astgrep_replace': ['Verify pattern matches first with astgrep_search', 'Test replacement on small sample', 'Check file permissions'],\r\n    'astgrep_lint': ['Run individual checks instead of batch', 'Check ignore patterns', 'Verify working directory'],\r\n    'retrieve_overflow': ['Try without pagination cursor', 'List available files first', 'Check content ID format'],\r\n    'batch_execute': ['Execute operations individually', 'Reduce batch size', 'Check operation types are supported']\r\n  };\r\n\r\n  return alternatives[operationType] || ['Try standard tools instead', 'Break down into smaller tasks', 'Check tool documentation'];\r\n}\r\n\r\n// Recovery action suggestions",
      "startLine": 148,
      "endLine": 163
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function getRecoveryAction(errorInfo, operationType = null) {\r\n  const { type, originalError } = errorInfo;\r\n\r\n  switch (type) {\r\n    case ErrorTypes.PERMISSION_DENIED:\r\n      return {\r\n        action: 'fallback_to_standard',\r\n        message: 'Permission denied. Consider using standard tools or checking access rights.',\r\n        alternatives: ['Use standard Read/Edit/Grep tools', 'Check file permissions', 'Run with elevated privileges if needed']\r\n      };\r\n\r\n    case ErrorTypes.UNSUPPORTED_OPERATION:\r\n      return {\r\n        action: 'suggest_alternative',\r\n        message: `Operation '${operationType}' is not supported in this context.`,\r\n        alternatives: getAlternativeTools(operationType)\r\n      };\r\n\r\n    case ErrorTypes.VALIDATION_ERROR:\r\n      return {\r\n        action: 'fix_parameters',\r\n        message: 'Invalid parameters provided.',\r\n        alternatives: ['Check required parameters', 'Verify parameter formats', 'Review tool documentation']\r\n      };\r\n\r\n    case ErrorTypes.FILE_NOT_FOUND:\r\n      return {\r\n        action: 'check_path',\r\n        message: 'File or directory not found.',\r\n        alternatives: ['Verify file paths exist', 'Check working directory', 'Use absolute paths']\r\n      };\r\n\r\n    case ErrorTypes.TIMEOUT:\r\n      return {\r\n        action: 'retry_or_optimize',\r\n        message: 'Operation timed out.',\r\n        alternatives: ['Increase timeout value', 'Optimize operation complexity', 'Break into smaller operations']\r\n      };\r\n\r\n    case ErrorTypes.SYNTAX_ERROR:\r\n      return {\r\n        action: 'fix_syntax',\r\n        message: 'Syntax error in code or patterns.',\r\n        alternatives: ['Validate code syntax', 'Check AST pattern syntax', 'Use simpler expressions']\r\n      };\r\n\r\n    case ErrorTypes.NETWORK_ERROR:\r\n      return {\r\n        action: 'retry_or_offline',\r\n        message: 'Network or connection error.',\r\n        alternatives: ['Check internet connection', 'Retry operation', 'Use offline alternatives if available']\r\n      };\r\n\r\n    default:\r\n      return {\r\n        action: 'general_troubleshooting',\r\n        message: 'An unexpected error occurred.',\r\n        alternatives: ['Check tool documentation', 'Try alternative approach', 'Break down into simpler steps']\r\n      };\r\n  }\r\n}",
      "startLine": 162,
      "endLine": 223
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "// Enhanced error response with recovery suggestions\r\nexport function createEnhancedErrorResponse(error, operationType = null, context = {}) {",
      "startLine": 223,
      "endLine": 227
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const errorInfo = classifyError(error, operationType);",
      "startLine": 227,
      "endLine": 228
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const recovery = getRecoveryAction(errorInfo, operationType);",
      "startLine": 228,
      "endLine": 230
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const errorMessage = error?.message || error || 'Unknown error';",
      "startLine": 230,
      "endLine": 232
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "let responseText = `❌ Error: ${errorMessage}\\n\\n`;\r\n  responseText += `🔍 Error Type: ${errorInfo.type}\\n`;\r\n  responseText += `💡 Recovery Suggestion: ${recovery.message}\\n\\n`;\r\n  responseText += `🛠️  Suggested Actions:\\n`;\r\n  recovery.alternatives.forEach((alt, index) => {\r\n    responseText += `${index + 1}. ${alt}\\n`;\r\n  });\r\n\r\n  if (context.operation) {\r\n    responseText += `\\n📝 Operation: ${context.operation}\\n`;\r\n  }\r\n  if (context.workingDirectory) {\r\n    responseText += `📁 Working Directory: ${context.workingDirectory}\\n`;\r\n  }\r\n\r\n  return createToolResponse(responseText, true);\r\n}\r\n\r\n// Wrap tool handlers with enhanced error recovery\r\nexport function createRecoveryToolHandler(handler, toolName, timeoutMs = 30000) {\r\n  return async (args) => {",
      "startLine": 232,
      "endLine": 253
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const startTime = Date.now();\r\n\r\n    try {",
      "startLine": 253,
      "endLine": 256
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const result = await handler(args);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(`[Error Recovery] Tool '${toolName}' failed:`, error.message);\r\n\r\n      // Extract operation type from args if available",
      "startLine": 256,
      "endLine": 262
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const operationType = args?.type || args?.operation || toolName;\r\n\r\n      // Create enhanced error response with recovery suggestions\r\n      return createEnhancedErrorResponse(\r\n        error,\r\n        operationType,\r\n        {\r\n          operation: operationType,\r\n          workingDirectory: args?.workingDirectory,\r\n          executionTimeMs: Date.now() - startTime\r\n        }\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport function createSuccessResponseUtil(data) {\r\n  return createToolResponse(JSON.stringify(data, null, 2));\r\n}\r\n\r\nexport function validateRequiredParamsUtil(params, requiredParams) {",
      "startLine": 262,
      "endLine": 283
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\r\n  if (missingParams.length > 0) {\r\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\r\n  }\r\n}\r\n\r\nexport function getDefaultIgnorePatterns(workingDirectory) {",
      "startLine": 283,
      "endLine": 290
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const defaultPatterns = {\r\n    files: [\r\n      '**/node_modules/**',\r\n      '**/.next/**',\r\n      '**/dist/**',\r\n      '**/build/**',\r\n      '**/out/**',\r\n      '**/coverage/**',\r\n      '**/.nyc_output/**',\r\n      '**/.git/**',\r\n      '**/.vscode/**',\r\n      '**/.idea/**',\r\n      '**/*.log',\r\n      '**/*.tmp',\r\n      '**/temp/**',\r\n      '**/tmp/**',\r\n      '**/.DS_Store',\r\n      '**/Thumbs.db',\r\n      '**/*.map',\r\n      '**/*.min.js',\r\n      '**/*.min.css',\r\n      '**/package-lock.json',\r\n      '**/yarn.lock'\r\n    ],\r\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.css', '.json', '.md'],\r\n    directories: [\r\n      'node_modules',\r\n      '.next',\r\n      'dist',\r\n      'build',\r\n      'out',\r\n      'coverage',\r\n      '.nyc_output',\r\n      '.git',\r\n      '.vscode',\r\n      '.idea',\r\n      'temp',\r\n      'tmp'\r\n    ]\r\n  };\r\n\r\n  try {",
      "startLine": 290,
      "endLine": 332
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const fs = require('fs');",
      "startLine": 332,
      "endLine": 333
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const path = require('path');",
      "startLine": 333,
      "endLine": 335
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const searchDefaultsPath = path.join(workingDirectory, '.search-defaults.json');\r\n    if (fs.existsSync(searchDefaultsPath)) {",
      "startLine": 335,
      "endLine": 337
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const customDefaults = JSON.parse(fs.readFileSync(searchDefaultsPath, 'utf8'));\r\n      return { ...defaultPatterns, ...customDefaults };\r\n    }",
      "startLine": 337,
      "endLine": 341
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const gitignorePath = path.join(workingDirectory, '.gitignore');\r\n    if (fs.existsSync(gitignorePath)) {",
      "startLine": 341,
      "endLine": 343
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');",
      "startLine": 343,
      "endLine": 344
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const gitignorePatterns = gitignoreContent\r\n        .split('\\n')\r\n        .filter(line => line.trim() && !line.startsWith('#'))\r\n        .map(line => line.trim());\r\n\r\n      return {\r\n        ...defaultPatterns,\r\n        customGitignore: gitignorePatterns\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.warn('Warning: Could not read ignore patterns, using defaults:', error.message);\r\n  }\r\n\r\n  return defaultPatterns;\r\n}\r\n\r\nexport function formatSearchResults(results, query, path) {\r\n  if (results.length === 0) {\r\n    return `No results found for \"${query}\" in ${path}`;\r\n  }\r\n\r\n  return `Found ${results.length} results for \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`;\r\n}\r\n\r\nexport function formatExecutionMessage(workingDirectory, runtime = 'auto') {\r\n  return `Execution requested in ${workingDirectory} with runtime ${runtime}`;\r\n}\r\n\r\nexport function formatBatchOperationMessage(operations) {\r\n  return `Batch executing ${operations.length} operations`;\r\n}\r\n\r\nexport function formatBatchSummary(operations, successfulOps) {",
      "startLine": 344,
      "endLine": 378
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const summaryLines = [];\r\n  summaryLines.push(`Completed: ${successfulOps}/${operations.length} operations`);\r\n\r\n  if (successfulOps === operations.length) {\r\n    summaryLines.push('Status: All operations completed');\r\n  } else {\r\n    summaryLines.push('Status: Some operations encountered issues');\r\n  }\r\n\r\n  summaryLines.push('The system automatically selected and configured the appropriate tools based on your task description.');\r\n\r\n  return summaryLines.join('\\n');\r\n}\r\n\r\nexport function getDefaultValues() {\r\n  return {\r\n    runtime: 'auto',\r\n    timeout: 120000,\r\n    path: '.',\r\n    language: 'javascript',\r\n    chunkIndex: 0,\r\n    listFiles: false,\r\n    cleanup: false\r\n  };\r\n}\r\n\r\nexport async function executeOperation(operation, errorMessage = \"Operation failed\") {\r\n  try {\r\n    return await operation();\r\n  } catch (error) {\r\n    throw new Error(`${errorMessage}: ${error.message}`);\r\n  }\r\n}",
      "startLine": 378,
      "endLine": 412
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const MAX_TOKENS = 4000;",
      "startLine": 412,
      "endLine": 413
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const CHARS_PER_TOKEN = 4;",
      "startLine": 413,
      "endLine": 414
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const TRUNCATION_BUFFER = 100;",
      "startLine": 414,
      "endLine": 415
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const MIN_PARTIAL_CHARS = 50;",
      "startLine": 415,
      "endLine": 417
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function estimateTokens(text) {\r\n  return Math.ceil(text.length / CHARS_PER_TOKEN);\r\n}",
      "startLine": 416,
      "endLine": 419
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function truncateContent(content, maxTokens = MAX_TOKENS) {\r\n  if (!content || typeof content !== 'object') return content;",
      "startLine": 419,
      "endLine": 424
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const maxChars = maxTokens * CHARS_PER_TOKEN - TRUNCATION_BUFFER;\r\n\r\n  if (Array.isArray(content)) return truncateArray(content, maxChars);\r\n  if (content.text) return truncateSingle(content, maxChars);\r\n  if (content.content?.length) return { ...content, content: truncateArray(content.content, maxChars) };\r\n\r\n  return content;\r\n}",
      "startLine": 424,
      "endLine": 433
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function truncateArray(items, maxChars) {",
      "startLine": 433,
      "endLine": 434
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "let totalChars = 0;",
      "startLine": 434,
      "endLine": 435
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const result = [];\r\n\r\n  for (let i = 0; i < items.length; i++) {",
      "startLine": 435,
      "endLine": 438
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const item = items[i];\r\n    if (!item?.text) { result.push(item); continue; }",
      "startLine": 438,
      "endLine": 441
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const itemChars = item.text.length;\r\n    if (totalChars + itemChars > maxChars) {",
      "startLine": 441,
      "endLine": 443
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const remaining = maxChars - totalChars;\r\n      if (remaining > MIN_PARTIAL_CHARS) {\r\n        result.push({ ...item, text: item.text.substring(0, remaining) + '\\n\\n[PARTIAL: Truncated]' });\r\n      }",
      "startLine": 443,
      "endLine": 448
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const omitted = items.length - i - (remaining > MIN_PARTIAL_CHARS ? 0 : 1);\r\n      if (omitted > 0) {",
      "startLine": 448,
      "endLine": 450
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const tokens = estimateRemainingTokens(items.slice(i + (remaining > MIN_PARTIAL_CHARS ? 1 : 0)));\r\n        result.push({\r\n          type: 'text',\r\n          text: `\\n[OUTPUT TRUNCATED: ${omitted} items omitted, ~${tokens} tokens, limit: ${MAX_TOKENS}]`\r\n        });\r\n      }\r\n      break;\r\n    }\r\n\r\n    totalChars += itemChars;\r\n    result.push(item);\r\n  }\r\n  return result;\r\n}",
      "startLine": 450,
      "endLine": 465
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function truncateSingle(content, maxChars) {\r\n  if (content.text.length <= maxChars) return content;",
      "startLine": 465,
      "endLine": 468
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const truncated = content.text.substring(0, maxChars);",
      "startLine": 468,
      "endLine": 469
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const removed = content.text.length - maxChars;",
      "startLine": 469,
      "endLine": 470
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const tokens = estimateTokens(content.text.substring(maxChars));\r\n\r\n  return {\r\n    ...content,\r\n    text: truncated + `\\n\\n[OUTPUT TRUNCATED: ${removed} chars, ~${tokens} tokens, limit: ${MAX_TOKENS}]`\r\n  };\r\n}",
      "startLine": 470,
      "endLine": 478
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function estimateRemainingTokens(items) {",
      "startLine": 478,
      "endLine": 479
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const totalChars = items.reduce((sum, item) => sum + (item?.text?.length || 0), 0);\r\n  return estimateTokens(totalChars.toString());\r\n}",
      "startLine": 479,
      "endLine": 483
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "class PaginationManager {\r\n  constructor() {\r\n    this.cursors = new Map();\r\n    this.pageSize = 50;\r\n  }\r\n\r\n  createCursor(data, position = 0) {",
      "startLine": 483,
      "endLine": 490
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const cursorId = generateId();\r\n    this.cursors.set(cursorId, {\r\n      data,\r\n      position,\r\n      timestamp: Date.now()\r\n    });\r\n    return cursorId;\r\n  }\r\n\r\n  getCursor(cursorId) {",
      "startLine": 490,
      "endLine": 500
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const cursor = this.cursors.get(cursorId);\r\n    if (!cursor) {\r\n      throw new Error('Invalid or expired cursor');\r\n    }\r\n    return cursor;\r\n  }\r\n\r\n  removeCursor(cursorId) {\r\n    this.cursors.delete(cursorId);\r\n  }\r\n\r\n  cleanup() {",
      "startLine": 500,
      "endLine": 512
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const now = Date.now();",
      "startLine": 512,
      "endLine": 513
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const expiredTime = now - (30 * 60 * 1000);\r\n\r\n    for (const [cursorId, cursor] of this.cursors.entries()) {\r\n      if (cursor.timestamp < expiredTime) {\r\n        this.cursors.delete(cursorId);\r\n      }\r\n    }\r\n  }\r\n}",
      "startLine": 513,
      "endLine": 523
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const paginationManager = new PaginationManager();\r\n\r\nexport function createPaginatedResponse(items, cursor = null, hasNext = false) {",
      "startLine": 523,
      "endLine": 526
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const response = {\r\n    items: items.slice(0, paginationManager.pageSize),\r\n    hasNext\r\n  };\r\n\r\n  if (hasNext) {",
      "startLine": 526,
      "endLine": 532
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const remainingItems = items.slice(paginationManager.pageSize);\r\n    response.nextCursor = paginationManager.createCursor(remainingItems, paginationManager.pageSize);\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nexport function getPaginatedItems(items, cursor = null) {\r\n  paginationManager.cleanup();\r\n\r\n  if (!cursor) {\r\n    return createPaginatedResponse(items);\r\n  }\r\n\r\n  try {",
      "startLine": 532,
      "endLine": 547
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const cursorData = paginationManager.getCursor(cursor);",
      "startLine": 547,
      "endLine": 548
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const remainingItems = cursorData.data;",
      "startLine": 548,
      "endLine": 549
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const response = createPaginatedResponse(remainingItems);\r\n\r\n    if (!response.hasNext) {\r\n      paginationManager.removeCursor(cursor);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    throw new Error('Invalid cursor');\r\n  }\r\n}\r\n\r\nexport async function handlePaginatedList(args, dataFetcher, defaultWorkingDir) {",
      "startLine": 549,
      "endLine": 562
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const startTime = Date.now();",
      "startLine": 562,
      "endLine": 564
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const paramError = validateRequiredParams(args, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 564,
      "endLine": 567
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const dirValidation = validateWorkingDirectory(args.workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }\r\n\r\n  try {",
      "startLine": 567,
      "endLine": 573
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const data = await dataFetcher(args.workingDirectory, args);",
      "startLine": 573,
      "endLine": 574
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const result = getPaginatedItems(data, args.cursor);\r\n\r\n    return createSuccessResponse(result, startTime);\r\n  } catch (error) {\r\n    return createErrorResponse(error, startTime, {\r\n      operation: 'paginated_list',\r\n      workingDirectory: args.workingDirectory\r\n    });\r\n  }\r\n}\r\n\r\nexport function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\r\n  return async (args) => {",
      "startLine": 574,
      "endLine": 587
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\r\n    });\r\n\r\n    try {\r\n      return await Promise.race([\r\n        handler(args),\r\n        timeoutPromise\r\n      ]);\r\n    } catch (error) {\r\n      if (error.message.includes('timed out')) {\r\n        return createErrorResponse(`Tool ${toolName} timed out after ${timeoutMs}ms`);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\nasync function executeBatchOperation(operation, workingDirectory) {\r\n  try {\r\n    switch (operation.type) {\r\n      case 'execute':\r\n        const { code, runtime = 'auto', timeout = 120000, commands } = operation;\r\n\r\n        if (runtime === 'bash' || (commands && (runtime === 'auto' || !code))) {\r\n          const { executeBashCommand } = await import('./unified-executor.js');\r\n          return await executeBashCommand(commands || code, { workingDirectory, timeout });\r\n        } else if (runtime === 'nodejs' || runtime === 'auto') {\r\n          const { executeNodeCode } = await import('./unified-executor.js');\r\n          return await executeNodeCode(code, { workingDirectory, timeout });\r\n        } else if (runtime === 'deno') {\r\n          const { executeDenoCode } = await import('./unified-executor.js');\r\n          return await executeDenoCode(code, { workingDirectory, timeout });\r\n        }\r\n        break;\r\n\r\n      case 'searchcode':\r\n        const { query, searchPath = '.' } = operation;\r\n        const { searchCode } = await import('./unified-vector.js');\r\n        return await searchCode(query, workingDirectory, [searchPath]);\r\n\r\n      case 'parse_ast':\r\n        const { filePath, language = 'javascript', code: astCode } = operation;\r\n        const { parseAST } = await import('./ast-tools.js');\r\n        return await parseAST(astCode, language, workingDirectory, filePath);\r\n\r\n      case 'astgrep_search':\r\n        const { pattern: searchPattern, grepPath: searchGrepPath = '.' } = operation;\r\n        const { astSearch } = await import('./ast-tools.js');\r\n        return await astSearch(searchPattern, searchGrepPath, { workingDirectory });\r\n\r\n      case 'astgrep_replace':\r\n        const { pattern: replacePattern, replacement, grepPath: replaceGrepPath = '.' } = operation;\r\n        const { astReplace } = await import('./ast-tools.js');\r\n        return await astReplace(replacePattern, replacement, replaceGrepPath, { workingDirectory });\r\n\r\n      case 'astgrep_lint':\r\n        const { path: lintPath, rules: lintRules } = operation;\r\n        const { astLint } = await import('./ast-tools.js');\r\n        return await astLint(lintPath, lintRules, { workingDirectory });\r\n\r\n      case 'retrieve_overflow':\r\n        const { contentId, cursor, listFiles } = operation;\r\n        const { retrieveOverflow } = await import('./overflow-handler.js');\r\n        return await retrieveOverflow(workingDirectory, { contentId, cursor, listFiles });\r\n\r\n      default:\r\n        throw new Error(`Unsupported operation type: ${operation.type}`);\r\n    }\r\n  } catch (error) {\r\n    // Enhance error with operation-specific context",
      "startLine": 587,
      "endLine": 658
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const enhancedError = new Error(`Operation '${operation.type}' failed: ${error.message}`);\r\n    enhancedError.originalError = error;\r\n    enhancedError.operationType = operation.type;\r\n    throw enhancedError;\r\n  }\r\n}",
      "startLine": 658,
      "endLine": 665
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function formatBatchResults(results) {",
      "startLine": 665,
      "endLine": 666
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const successful = results.filter(r => r.success);",
      "startLine": 666,
      "endLine": 667
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const failed = results.filter(r => !r.success);\r\n\r\n  return {\r\n    summary: {\r\n      totalOperations: results.length,\r\n      successful: successful.length,\r\n      failed: failed.length\r\n    },\r\n    results: results.map((result, index) => ({\r\n      index,\r\n      success: result.success,\r\n      result: result.success ? result : {\r\n        error: result.error,\r\n        errorType: result.errorType,\r\n        recoverySuggestions: result.recoverySuggestions,\r\n        operationType: result.operationType\r\n      },\r\n      executionTimeMs: result.executionTimeMs\r\n    }))\r\n  };\r\n}\r\n\r\nexport const batchTools = [\r\n  {\r\n    name: \"batch_execute\",\r\n    description: \"Execute multiple glootie tools in a single batch operation. Supports: execute, searchcode, parse_ast, astgrep_search, astgrep_replace, astgrep_lint, retrieve_overflow. Use this 10:1 over single tool calls when possible.\",\r\n    supported_operations: [\"all glootie tools\"],\r\n    unsupported_operations: [\"all non glootie tools\"],\r\n    use_cases: [\"Multiple file operations\", \"Batch processing\", \"Multiple tasks are already planned and ready\"],\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        workingDirectory: {\r\n          type: \"string\",\r\n          description: \"REQUIRED: Working directory for execution.\"\r\n        },\r\n        operations: {\r\n          type: \"array\",\r\n          items: {\r\n            type: \"object\",\r\n            properties: {\r\n              type: {\r\n                type: \"string\",\r\n                enum: [\"execute\", \"searchcode\", \"parse_ast\", \"astgrep_search\", \"astgrep_replace\", \"astgrep_lint\", \"retrieve_overflow\"]\r\n              },\r\n              // For execute operations\r\n              code: {\r\n                type: \"string\",\r\n                description: \"JavaScript/TypeScript code to execute (for execute type)\"\r\n              },\r\n              runtime: {\r\n                type: \"string\",\r\n                enum: [\"nodejs\", \"deno\", \"bash\", \"auto\"],\r\n                description: \"Runtime for code execution (for execute type)\"\r\n              },\r\n              commands: {\r\n                type: \"string\",\r\n                description: \"Bash commands to execute (for execute type with bash runtime)\"\r\n              },\r\n              timeout: {\r\n                type: \"number\",\r\n                description: \"Timeout in milliseconds (for execute type)\"\r\n              },\r\n              // For searchcode operations\r\n              query: {\r\n                type: \"string\",\r\n                description: \"Search query (for searchcode type)\"\r\n              },\r\n              searchPath: {\r\n                type: \"string\",\r\n                description: \"Path to search within (for searchcode type, defaults to working directory)\"\r\n              },\r\n              // For parse_ast operations\r\n              filePath: {\r\n                type: \"string\",\r\n                description: \"File path to parse (for parse_ast type)\"\r\n              },\r\n              language: {\r\n                type: \"string\",\r\n                description: \"Programming language (for parse_ast type)\"\r\n              },\r\n              // For astgrep operations\r\n              pattern: {\r\n                type: \"string\",\r\n                description: \"AST-grep pattern (for astgrep_search, astgrep_replace, astgrep_lint types)\"\r\n              },\r\n              replacement: {\r\n                type: \"string\",\r\n                description: \"Replacement pattern (for astgrep_replace type)\"\r\n              },\r\n              grepPath: {\r\n                type: \"string\",\r\n                description: \"Path to search/replace in (for astgrep operations)\"\r\n              },\r\n              // For retrieve_overflow operations\r\n              contentId: {\r\n                type: \"string\",\r\n                description: \"Content ID to retrieve (for retrieve_overflow type)\"\r\n              },\r\n              cursor: {\r\n                type: \"string\",\r\n                description: \"Pagination cursor (for retrieve_overflow type)\"\r\n              },\r\n              listFiles: {\r\n                type: \"boolean\",\r\n                description: \"List available items (for retrieve_overflow type)\"\r\n              }\r\n            },\r\n            required: [\"type\"]\r\n          },\r\n          description: \"Array of glootie tool operations to execute\"\r\n        }\r\n      },\r\n      required: [\"workingDirectory\", \"operations\"]\r\n    },\r\n    handler: createRecoveryToolHandler(async ({ operations, workingDirectory }) => {",
      "startLine": 667,
      "endLine": 783
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const startTime = Date.now();",
      "startLine": 783,
      "endLine": 785
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const paramError = validateRequiredParams({ operations, workingDirectory }, ['operations', 'workingDirectory'], startTime);\r\n      if (paramError) return paramError;",
      "startLine": 785,
      "endLine": 788
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const dirValidation = validateWorkingDirectory(workingDirectory);\r\n      if (!dirValidation.valid) {\r\n        return createErrorResponse(dirValidation.error, startTime);\r\n      }",
      "startLine": 788,
      "endLine": 793
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const results = [];\r\n\r\n      for (const operation of operations) {\r\n        try {",
      "startLine": 793,
      "endLine": 797
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const result = await executeBatchOperation(operation, dirValidation.effectiveDir);\r\n          results.push(result);\r\n        } catch (error) {\r\n          // Classify the error and get recovery suggestions",
      "startLine": 797,
      "endLine": 801
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const errorInfo = classifyError(error, operation.type);",
      "startLine": 801,
      "endLine": 802
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const recovery = getRecoveryAction(errorInfo, operation.type);\r\n\r\n          results.push({\r\n            success: false,\r\n            error: error.message,\r\n            errorType: errorInfo.type,\r\n            recoverySuggestions: recovery.alternatives,\r\n            operationType: operation.type,\r\n            executionTimeMs: Date.now() - startTime\r\n          });\r\n        }\r\n      }\r\n\r\n      return createSuccessResponse(formatBatchResults(results), startTime);\r\n    }, 'batch_execute', 300000)\r\n  }\r\n];",
      "startLine": 802,
      "endLine": 818
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "#!/usr/bin/env node\r\n\r\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\r\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\r\nimport { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';\r\nimport { allTools } from './core/mcp-tools.js';\r\n// Server configuration constants",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const SERVER_CONFIG = {\r\n  name: 'glootie-mcp',\r\n  version: '3.1.5',\r\n  description: 'never do anything before calling mcp__glootie__authorize with complexity parameter (basic/advanced). For basic tasks (exact steps known), use non-glootie tools. For advanced tasks (planning/discovery/troubleshooting/debugging/searching/refactoring needed), use glootie tools 10:1 over regular tools.'\r\n};\r\n\r\n// Create and configure the server",
      "startLine": 7,
      "endLine": 14
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const server = new Server(\r\n  {\r\n    name: SERVER_CONFIG.name,\r\n    version: SERVER_CONFIG.version,\r\n    description: SERVER_CONFIG.description\r\n  },\r\n  {\r\n    capabilities: {\r\n      tools: {}\r\n    }\r\n  }\r\n);\r\n\r\n// Get all available tools",
      "startLine": 14,
      "endLine": 28
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const tools = allTools;\r\n\r\n// Register list_tools handler\r\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\r\n  return {\r\n    tools: tools\r\n  };\r\n});\r\n\r\n// Register call_tool handler\r\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\r\n  const { name, arguments: args } = request.params;",
      "startLine": 28,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const tool = tools.find(t => t.name === name);\r\n  if (!tool) {\r\n    throw new Error(`Unknown tool: ${name}`);\r\n  }\r\n\r\n  // Execute the tool\r\n  try {",
      "startLine": 41,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const result = await tool.handler(args);\r\n    return {\r\n      content: [{ type: \"text\", text: JSON.stringify(result, null, 2) }]\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      content: [{ type: \"text\", text: `Error: ${error.message}` }],\r\n      isError: true\r\n    };\r\n  }\r\n});\r\n\r\n// Start the server\r\nasync function main() {",
      "startLine": 48,
      "endLine": 62
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const transport = new StdioServerTransport();\r\n  await server.connect(transport);\r\n  console.error('MCP Glootie server running on stdio');\r\n}\r\n\r\n// Auto-start when run directly\r\nif (import.meta.url === `file://${process.argv[1]}`) {\r\n  main().catch(error => {\r\n    console.error(`Failed to start MCP Glootie server: ${error}`);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n// Re-export only essential parts\r\nexport * from './core/mcp-tools.js';\r\nexport { server };",
      "startLine": 62,
      "endLine": 77
    }
  ]
}