{
  "timestamp": 1758458496946,
  "chunks": [
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "import fs from 'fs';",
      "startLine": 0,
      "endLine": 1
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "import path from 'path';",
      "startLine": 1,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "import ignore from 'ignore';",
      "startLine": 2,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "class ASTGrepHelper {\n  constructor(language = 'javascript') {\n    this.language = language;\n    this.astGrep = null;\n    this.registeredLanguages = new Set();\n    this.initializeASTGrep();\n  }\n\n  detectLanguageFromExtension(filePath) {",
      "startLine": 4,
      "endLine": 13
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ext = path.extname(filePath).toLowerCase();",
      "startLine": 13,
      "endLine": 14
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const extensionMap = {\n      '.js': 'javascript',\n      '.jsx': 'jsx',\n      '.ts': 'typescript',\n      '.tsx': 'tsx',\n      '.go': 'go',\n      '.rs': 'rust',\n      '.py': 'python',\n      '.c': 'c',\n      '.cpp': 'cpp',\n      '.cc': 'cpp',\n      '.cxx': 'cpp',\n      '.html': 'html',\n      '.css': 'css'\n    };\n\n    return extensionMap[ext] || 'javascript';\n  }\n\n  setLanguage(language) {\n    // Only validate non-core languages (JS/TS/HTML/CSS are always available)\n    if (language !== 'javascript' && language !== 'typescript' &&\n        language !== 'jsx' && language !== 'tsx' &&\n        language !== 'html' && language !== 'css' &&\n        !this.registeredLanguages.has(language)) {\n      throw new Error(`Language '${language}' is not available. Install @ast-grep/lang-${language} to add support.`);\n    }\n    this.language = language;\n  }\n\n  async initializeASTGrep() {\n    try {\n      const { parse, Lang, registerDynamicLanguage } = await import('@ast-grep/napi');\n      this.parse = parse;\n      this.Lang = Lang;\n      this.registerDynamicLanguage = registerDynamicLanguage;\n      this.astGrep = { parse, Lang, registerDynamicLanguage };\n\n      // Register additional languages\n      await this.registerAdditionalLanguages();\n    } catch (error) {\n      console.warn('ast-grep not available, using fallback pattern matching');\n      this.astGrep = null;\n    }\n  }\n\n  async registerAdditionalLanguages() {",
      "startLine": 14,
      "endLine": 61
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const languagePackages = [\n      { name: 'go', package: '@ast-grep/lang-go', key: 'Go' },\n      { name: 'rust', package: '@ast-grep/lang-rust', key: 'Rust' },\n      { name: 'python', package: '@ast-grep/lang-python', key: 'Python' },\n      { name: 'c', package: '@ast-grep/lang-c', key: 'C' },\n      { name: 'cpp', package: '@ast-grep/lang-cpp', key: 'Cpp' }\n    ];\n\n    for (const { name, package: packageName, key } of languagePackages) {\n      try {",
      "startLine": 61,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const langModule = await import(packageName);\n        this.registerDynamicLanguage({ [key]: langModule.default });\n        this.registeredLanguages.add(name);\n      } catch (error) {\n        // Silently fail - don't warn about missing parsers unless user tries to use them\n        this.availableLanguages = this.availableLanguages || new Set();\n        this.availableLanguages.delete(name);\n      }\n    }\n  }\n\n  async parseCode(code) {\n    if (!this.astGrep) {\n      throw new Error('ast-grep not available');\n    }\n\n    try {\n      const { parse, Lang } = this.astGrep;",
      "startLine": 71,
      "endLine": 89
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let lang = Lang.JavaScript;\n\n      // Map language names to Lang keys",
      "startLine": 89,
      "endLine": 92
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const languageMap = {\n        'javascript': Lang.JavaScript,\n        'typescript': Lang.TypeScript,\n        'jsx': Lang.JSX || Lang.JavaScript,\n        'tsx': Lang.TSX || Lang.TypeScript,\n        'html': Lang.Html,\n        'css': Lang.Css,\n        'go': 'Go',\n        'rust': 'Rust',\n        'python': 'Python',\n        'c': 'C',\n        'cpp': 'Cpp'\n      };\n\n      if (languageMap[this.language]) {\n        // Check if language is actually available (registered successfully)\n        if (this.language !== 'javascript' && this.language !== 'typescript' &&\n            this.language !== 'jsx' && this.language !== 'tsx' &&\n            this.language !== 'html' && this.language !== 'css' &&\n            !this.registeredLanguages.has(this.language)) {\n          throw new Error(`Language '${this.language}' is not available. Install @ast-grep/lang-${this.language} to add support.`);\n        }\n        lang = languageMap[this.language];\n      } else {\n        console.warn(`Unknown language: ${this.language}, defaulting to JavaScript`);\n      }\n\n      return parse(lang, code);\n    } catch (error) {\n      throw new Error(`Failed to parse ${this.language} code: ${error.message}`);\n    }\n  }\n\n  async searchPattern(code, pattern) {\n    if (!this.astGrep) {",
      "startLine": 92,
      "endLine": 127
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');",
      "startLine": 127,
      "endLine": 128
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = [];",
      "startLine": 128,
      "endLine": 129
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let match;\n      while ((match = regex.exec(code)) !== null) {\n        matches.push({\n          text: match[0],\n          start: match.index,\n          end: match.index + match[0].length,\n          line: this.getLineFromPosition(code, match.index),\n          column: this.getColumnFromPosition(code, match.index)\n        });\n      }\n      return matches;\n    }\n\n    try {",
      "startLine": 129,
      "endLine": 143
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 143,
      "endLine": 144
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const root = ast.root();",
      "startLine": 144,
      "endLine": 145
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const node = root.find(pattern);\n\n      if (!node) return [];",
      "startLine": 145,
      "endLine": 149
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const range = node.range();\n      return [{\n        text: node.text(),\n        start: range.start.index,\n        end: range.end.index,\n        line: range.start.line,\n        column: range.start.column\n      }];\n    } catch (error) {\n      throw new Error(`Pattern search failed: ${error.message}`);\n    }\n  }\n\n  async replacePattern(code, pattern, replacement) {\n    if (!this.astGrep) {",
      "startLine": 149,
      "endLine": 164
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');\n      return code.replace(regex, replacement);\n    }\n\n    try {",
      "startLine": 164,
      "endLine": 169
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 169,
      "endLine": 170
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const root = ast.root();",
      "startLine": 170,
      "endLine": 171
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const node = root.find(pattern);\n\n      if (!node) return code;",
      "startLine": 171,
      "endLine": 175
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const edit = node.replace(replacement);\n      return root.commitEdits([edit]);\n    } catch (error) {\n      throw new Error(`Pattern replacement failed: ${error.message}`);\n    }\n  }\n\n  escapeRegex(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n\n  getLineFromPosition(code, position) {",
      "startLine": 175,
      "endLine": 187
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const before = code.substring(0, position);\n    return before.split('\\n').length - 1;\n  }\n\n  getColumnFromPosition(code, position) {",
      "startLine": 187,
      "endLine": 192
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const before = code.substring(0, position);",
      "startLine": 192,
      "endLine": 193
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const lastNewline = before.lastIndexOf('\\n');\n    return lastNewline === -1 ? position : position - lastNewline - 1;\n  }\n}",
      "startLine": 193,
      "endLine": 198
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function astSearch(filePath, pattern, options = {}) {\n  const {\n    language = 'javascript',\n    recursive = false,\n    maxResults = 100,\n    ignorePatterns = []\n  } = options;\n\n  try {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }",
      "startLine": 198,
      "endLine": 211
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 211,
      "endLine": 212
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 212,
      "endLine": 214
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 214,
      "endLine": 216
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 216,
      "endLine": 217
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = await helper.searchPattern(content, pattern);\n\n        return matches.map(match => ({\n          file,\n          content: match.text,\n          line: match.line,\n          column: match.column,\n          start: match.start,\n          end: match.end\n        }));\n      } catch (error) {\n        return [{ file, error: error.message }];\n      }\n    };\n\n    if (fs.statSync(filePath).isDirectory()) {",
      "startLine": 217,
      "endLine": 233
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(filePath, {\n        recursive,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns\n      });\n\n      for (const file of files.slice(0, maxResults)) {",
      "startLine": 233,
      "endLine": 240
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResults = await processFile(file);\n        results.push(...fileResults);\n      }\n    } else {",
      "startLine": 240,
      "endLine": 244
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResults = await processFile(filePath);\n      results.push(...fileResults);\n    }\n\n    return results.slice(0, maxResults);\n  } catch (error) {\n    throw new Error(`AST search failed: ${error.message}`);\n  }\n}",
      "startLine": 244,
      "endLine": 254
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function astReplace(filePath, pattern, replacement, options = {}) {\n  const {\n    language = 'javascript',\n    recursive = false,\n    backup = true,\n    ignorePatterns = []\n  } = options;\n\n  try {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }",
      "startLine": 254,
      "endLine": 267
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 267,
      "endLine": 268
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 268,
      "endLine": 270
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 270,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');\n\n        if (backup) {",
      "startLine": 272,
      "endLine": 275
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const backupPath = file + '.backup';\n          fs.writeFileSync(backupPath, content);\n        }",
      "startLine": 275,
      "endLine": 279
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const newContent = await helper.replacePattern(content, pattern, replacement);\n\n        if (newContent !== content) {\n          fs.writeFileSync(file, newContent);\n          return { file, status: 'modified', changes: true };\n        } else {\n          return { file, status: 'unchanged', changes: false };\n        }\n      } catch (error) {\n        return { file, error: error.message, status: 'failed' };\n      }\n    };\n\n    if (fs.statSync(filePath).isDirectory()) {",
      "startLine": 279,
      "endLine": 293
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(filePath, {\n        recursive,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns\n      });\n\n      for (const file of files) {",
      "startLine": 293,
      "endLine": 300
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await processFile(file);\n        results.push(result);\n      }\n    } else {",
      "startLine": 300,
      "endLine": 304
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await processFile(filePath);\n      results.push(result);\n    }\n\n    return results;\n  } catch (error) {\n    throw new Error(`AST replace failed: ${error.message}`);\n  }\n}",
      "startLine": 304,
      "endLine": 314
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function astLint(filePath, rules = [], options = {}) {\n  const {\n    language = 'javascript',\n    recursive = false,\n    ignorePatterns = []\n  } = options;\n\n  try {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }",
      "startLine": 314,
      "endLine": 326
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 326,
      "endLine": 327
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 327,
      "endLine": 329
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 329,
      "endLine": 331
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 331,
      "endLine": 332
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const issues = [];\n\n        for (const rule of rules) {",
      "startLine": 332,
      "endLine": 335
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = await helper.searchPattern(content, rule.pattern);\n\n          matches.forEach(match => {\n            issues.push({\n              file,\n              rule: rule.name,\n              message: rule.message || `Pattern \"${rule.pattern}\" matched`,\n              severity: rule.severity || 'warning',\n              line: match.line,\n              column: match.column,\n              content: match.text\n            });\n          });\n        }\n\n        return issues;\n      } catch (error) {\n        return [{ file, error: error.message }];\n      }\n    };\n\n    if (fs.statSync(filePath).isDirectory()) {",
      "startLine": 335,
      "endLine": 357
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(filePath, {\n        recursive,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns: [...getDefaultIgnorePatterns(), ...ignorePatterns]\n      });\n\n      for (const file of files) {",
      "startLine": 357,
      "endLine": 364
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileIssues = await processFile(file);\n        results.push(...fileIssues);\n      }\n    } else {",
      "startLine": 364,
      "endLine": 368
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileIssues = await processFile(filePath);\n      results.push(...fileIssues);\n    }\n\n    return results;\n  } catch (error) {\n    throw new Error(`AST lint failed: ${error.message}`);\n  }\n}\n\nasync function findFiles(dir, options = {}) {\n  const {\n    recursive = true,\n    extensions = ['.js', '.ts', '.jsx', '.tsx'],\n    ignorePatterns = [],\n    useGitignore = true\n  } = options;",
      "startLine": 368,
      "endLine": 386
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];\n\n  // Combine default patterns, gitignore patterns, and custom patterns",
      "startLine": 386,
      "endLine": 389
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const allPatterns = [\n    ...getDefaultIgnorePatterns(),\n    ...(useGitignore ? loadGitignorePatterns(dir) : []),\n    ...ignorePatterns\n  ];\n\n  // Create ignore instance",
      "startLine": 389,
      "endLine": 396
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ig = ignore();\n  ig.add(allPatterns);",
      "startLine": 396,
      "endLine": 399
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const scan = async (currentDir) => {",
      "startLine": 399,
      "endLine": 400
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const entries = fs.readdirSync(currentDir, { withFileTypes: true });\n\n    for (const entry of entries) {",
      "startLine": 400,
      "endLine": 403
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fullPath = path.join(currentDir, entry.name);\n\n      // Only apply ignore patterns to paths within the base directory",
      "startLine": 403,
      "endLine": 406
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let shouldIgnore = false;\n      if (fullPath.startsWith(dir)) {",
      "startLine": 406,
      "endLine": 408
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const relativePath = path.relative(dir, fullPath);\n        shouldIgnore = ig.ignores(relativePath) || ig.ignores(entry.name);\n      }\n\n      if (shouldIgnore) {\n        continue;\n      }\n\n      if (entry.isDirectory() && recursive) {\n        await scan(fullPath);\n      } else if (entry.isFile()) {\n        if (extensions.some(ext => fullPath.endsWith(ext))) {\n          results.push(fullPath);\n        }\n      }\n    }\n  };\n\n  await scan(dir);\n  return results;\n}\n\n// Default ignore patterns for performance",
      "startLine": 408,
      "endLine": 431
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export function getDefaultIgnorePatterns(workingDirectory) {\n  return [\n    '**/node_modules/**',\n    '**/.git/**',\n    '**/.next/**',\n    '**/.nuxt/**',\n    '**/.vuepress/**',\n    '**/.docusaurus/**',\n    '**/dist/**',\n    '**/build/**',\n    '**/out/**',\n    '**/coverage/**',\n    '**/.nyc_output/**',\n    '**/.cache/**',\n    '**/.parcel-cache/**',\n    '**/.turbo/**',\n    '**/.nx/**',\n    '**/.swc/**',\n    '**/bower_components/**',\n    '**/jspm_packages/**',\n    '**/.pnp/**',\n    '**/__tests__/**',\n    '**/__mocks__/**',\n    '**/__snapshots__/**',\n    '**/.jest/**',\n    '**/.mocha/**',\n    '**/.cypress/**',\n    '**/.playwright/**',\n    '**/*.min.js',\n    '**/*.bundle.js',\n    '**/*.chunk.js',\n    '**/package-lock.json',\n    '**/yarn.lock',\n    '**/pnpm-lock.yaml',\n    '**/.npmrc',\n    '**/.yarnrc',\n    '**/*.log',\n    '**/tmp/**',\n    '**/temp/**',\n    '**/.tmp/**',\n  '**/.DS_Store',\n  '**/Thumbs.db'\n  ];\n}\n\n// Load gitignore patterns from directory",
      "startLine": 431,
      "endLine": 477
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function loadGitignorePatterns(dir) {",
      "startLine": 477,
      "endLine": 478
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const gitignorePath = path.join(dir, '.gitignore');",
      "startLine": 478,
      "endLine": 479
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const patterns = [];\n\n  if (fs.existsSync(gitignorePath)) {\n    try {",
      "startLine": 479,
      "endLine": 483
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(gitignorePath, 'utf8');",
      "startLine": 483,
      "endLine": 484
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const lines = content.split('\\n')\n        .map(line => line.trim())\n        .filter(line => line && !line.startsWith('#'));\n\n      patterns.push(...lines);\n    } catch (error) {\n      console.warn(`Failed to read .gitignore: ${error.message}`);\n    }\n  }\n\n  return patterns;\n}",
      "startLine": 484,
      "endLine": 498
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export const DEFAULT_LINT_RULES = [\n  {\n    name: 'no-console-log',\n    pattern: 'console.log($$)',\n    message: 'Avoid using console.log in production code',\n    severity: 'warning'\n  },\n  {\n    name: 'no-debugger',\n    pattern: 'debugger',\n    message: 'Remove debugger statements',\n    severity: 'error'\n  },\n  {\n    name: 'no-var',\n    pattern: 'var $A',\n    message: 'Use let or const instead of var',\n    severity: 'warning'\n  }\n];",
      "startLine": 498,
      "endLine": 519
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export const AST_TOOLS = [\n  {\n    name: 'ast_search',\n    description: 'Find structural code patterns using AST analysis across multi-language codebases.',\n    supported_operations: ['pattern matching', 'code structure analysis', 'syntax search', 'variable declaration finding', 'function call detection'],\n    use_cases: ['Find all console.log statements', 'Locate variable declarations', 'Find function calls with specific patterns', 'Search for class definitions', 'Identify import statements'],\n    examples: [\n      'console.log($MSG)',\n      'var $NAME = $VALUE',\n      'function $NAME($ARGS) { $BODY }',\n      'class $CLASS_NAME { $MEMBERS }',\n      'import {$IMPORTS} from \\'$MODULE\\'',\n      'const $NAME = require(\\'$MODULE\\')',\n      'if ($CONDITION) { $BODY }',\n      'try { $TRY_BODY } catch ($ERROR) { $CATCH_BODY }',\n      'return $EXPRESSION',\n      'throw new $ERROR_TYPE($MSG)'\n    ],\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'File or directory path to search'\n        },\n        pattern: {\n          type: 'string',\n          description: 'AST pattern to search (e.g., \"console.log($$)\", \"function $NAME($ARGS) {}\")'\n        },\n        language: {\n          type: 'string',\n          enum: ['javascript', 'typescript', 'jsx', 'tsx'],\n          default: 'javascript',\n          description: 'Programming language'\n        },\n        recursive: {\n          type: 'boolean',\n          default: false,\n          description: 'Search recursively in directories'\n        },\n        maxResults: {\n          type: 'number',\n          default: 50,\n          description: 'Maximum number of results'\n        }\n      },\n      required: ['path', 'pattern']\n    },\n    handler: async (args) => {",
      "startLine": 519,
      "endLine": 568
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astSearch(args.path, args.pattern, {\n        language: args.language,\n        recursive: args.recursive,\n        maxResults: args.maxResults,\n        ignorePatterns: getDefaultIgnorePatterns()\n      });\n\n      return {\n        results: results.length,\n        matches: results\n      };\n    }\n  },\n  {\n    name: 'ast_replace',\n    description: 'Replace structural code patterns safely using AST transformations.',\n    supported_operations: ['code refactoring', 'pattern replacement', 'syntax transformation', 'API migration', 'deprecated code updates'],\n    use_cases: ['Replace console.log with logger', 'Convert var to let/const', 'Rename function or variable names', 'Update deprecated APIs', 'Modernize syntax patterns'],\n    examples: [\n      'Pattern: console.log($MSG) → Replacement: logger.info($MSG)',\n      'Pattern: var $NAME = $VALUE → Replacement: let $NAME = $VALUE',\n      'Pattern: require(\\'$MODULE\\') → Replacement: import $MODULE from \\'$MODULE\\'',\n      'Pattern: .then($CB) → Replacement: await $CB',\n      'Pattern: function($ARGS) { $BODY } → Replacement: ($ARGS) => { $BODY }',\n      'Pattern: new Promise(($RESOLVE, $REJECT) => { $BODY }) → Replacement: new Promise(async ($RESOLVE, $REJECT) => { $BODY })'\n    ],\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'File or directory path to modify'\n        },\n        pattern: {\n          type: 'string',\n          description: 'AST pattern to find (e.g., \"console.log($MSG)\", \"var $NAME\")'\n        },\n        replacement: {\n          type: 'string',\n          description: 'Replacement code (e.g., \"logger.info($MSG)\", \"let $NAME\")'\n        },\n        language: {\n          type: 'string',\n          enum: ['javascript', 'typescript', 'jsx', 'tsx'],\n          default: 'javascript',\n          description: 'Programming language'\n        },\n        recursive: {\n          type: 'boolean',\n          default: false,\n          description: 'Apply recursively in directories'\n        },\n        backup: {\n          type: 'boolean',\n          default: true,\n          description: 'Create backup files before modification'\n        }\n      },\n      required: ['path', 'pattern', 'replacement']\n    },\n    handler: async (args) => {",
      "startLine": 568,
      "endLine": 629
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astReplace(args.path, args.pattern, args.replacement, {\n        language: args.language,\n        recursive: args.recursive,\n        backup: args.backup,\n        ignorePatterns: getDefaultIgnorePatterns()\n      });\n\n      return {\n        processed: results.length,\n        results: results\n      };\n    }\n  },\n  {\n    name: 'ast_lint',\n    description: 'Lint code using custom AST pattern rules to enforce standards and detect issues.',\n    supported_operations: ['code quality analysis', 'anti-pattern detection', 'coding standard enforcement', 'security pattern checking', 'performance issue detection'],\n    use_cases: ['Find all console.log statements in production', 'Detect var declarations that should be const/let', 'Identify missing error handling', 'Find unused variables', 'Check for security vulnerabilities'],\n    examples: [\n      'Rule: {name: \"no-console\", pattern: \"console.log($MSG)\", message: \"Avoid console.log in production\", severity: \"warning\"}',\n      'Rule: {name: \"prefer-const\", pattern: \"var $NAME = $VALUE\", message: \"Use const instead of var\", severity: \"error\"}',\n      'Rule: {name: \"no-unused-vars\", pattern: \"const $UNUSED = $VALUE\", message: \"Unused variable detected\", severity: \"warning\"}',\n      'Rule: {name: \"error-handling\", pattern: \"try { $BODY } catch () { }\", message: \"Empty catch block\", severity: \"error\"}',\n      'Rule: {name: \"promise-callback\", pattern: \"new Promise(function($RESOLVE, $REJECT) { $BODY })\", message: \"Use arrow functions for Promise callbacks\", severity: \"warning\"}'\n    ],\n    inputSchema: {\n      type: 'object',\n      properties: {\n        path: {\n          type: 'string',\n          description: 'File or directory path to lint'\n        },\n        rules: {\n          type: 'array',\n          description: 'Custom linting rules (uses default rules if not provided)',\n          items: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              pattern: { type: 'string' },\n              message: { type: 'string' },\n              severity: { type: 'string', enum: ['error', 'warning'] }\n            }\n          }\n        },\n        language: {\n          type: 'string',\n          enum: ['javascript', 'typescript', 'jsx', 'tsx'],\n          default: 'javascript',\n          description: 'Programming language'\n        },\n        recursive: {\n          type: 'boolean',\n          default: false,\n          description: 'Lint recursively in directories'\n        }\n      },\n      required: ['path']\n    },\n    handler: async (args) => {",
      "startLine": 629,
      "endLine": 689
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const rules = args.rules || DEFAULT_LINT_RULES;",
      "startLine": 689,
      "endLine": 690
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astLint(args.path, rules, {\n        language: args.language,\n        recursive: args.recursive\n      });\n\n      return {\n        issues: results.length,\n        results: results\n      };\n    }\n  }\n];",
      "startLine": 690,
      "endLine": 703
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export default AST_TOOLS;\nexport { ASTGrepHelper };",
      "startLine": 703,
      "endLine": 706
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}",
      "startLine": 705,
      "endLine": 711
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createErrorResponse(message) {\n  return createToolResponse(`Error: ${message}`, true);\n}",
      "startLine": 712,
      "endLine": 715
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function validateRequiredParams(params, requiredParams) {",
      "startLine": 717,
      "endLine": 718
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}",
      "startLine": 718,
      "endLine": 724
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatCodeParsingMessage(language, code) {\n  return `Parsing ${language} code substring ${code.substring(0, 100)}...`;\n}",
      "startLine": 723,
      "endLine": 726
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatASTSearchMessage(pattern, path) {\n  return `AST searching: ${pattern} in ${path}`;\n}",
      "startLine": 727,
      "endLine": 730
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatASTReplaceMessage(pattern, replacement, path) {\n  return `AST replacing: ${pattern} -> ${replacement} in ${path}`;\n}",
      "startLine": 731,
      "endLine": 734
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function formatASTLintMessage(path) {\n  return `AST linting: ${path}`;\n}",
      "startLine": 735,
      "endLine": 738
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createToolHandler(handler, toolName = 'Unknown Tool') {\n  return async (args) => {\n    try {",
      "startLine": 740,
      "endLine": 743
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await handler(args);\n      return result;\n    } catch (error) {\n      // Import enhanced error recovery (circular dependency workaround)\n      const { createEnhancedErrorResponse } = await import('./utilities.js');\n      return createEnhancedErrorResponse(error, toolName, {\n        workingDirectory: args?.workingDirectory,\n        toolName\n      });\n    }\n  };\n}",
      "startLine": 743,
      "endLine": 756
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "function createRetryToolHandler(handler, toolName = 'Unknown Tool', retries = 3) {\n  return async (args) => {",
      "startLine": 756,
      "endLine": 758
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let lastError;\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        return await handler(args);\n      } catch (error) {\n        lastError = error;\n        if (attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n    }\n    throw lastError;\n  };\n}\n\n// Actual AST processing functions for batch execute",
      "startLine": 758,
      "endLine": 774
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function parseAST(code, language = 'javascript', workingDirectory, filePath) {\n  validateRequiredParams({ workingDirectory }, ['workingDirectory']);\n\n  // If filePath is provided but no code, read the file first",
      "startLine": 774,
      "endLine": 778
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "let codeToParse = code;\n  if (filePath && !code) {\n    try {",
      "startLine": 778,
      "endLine": 781
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fullPath = path.resolve(workingDirectory, filePath);\n      if (!fs.existsSync(fullPath)) {\n        throw new Error(`File not found: ${filePath}`);\n      }\n      codeToParse = fs.readFileSync(fullPath, 'utf8');\n    } catch (error) {\n      throw new Error(`Failed to read file ${filePath}: ${error.message}`);\n    }\n  }\n\n  if (!codeToParse) {\n    throw new Error('Missing required parameters: Either code or filePath must be provided');\n  }\n\n  try {",
      "startLine": 781,
      "endLine": 796
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper(language);",
      "startLine": 796,
      "endLine": 797
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const ast = await helper.parseCode(codeToParse);\n\n    // Extract useful information without deep analysis",
      "startLine": 797,
      "endLine": 800
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const root = ast.root();",
      "startLine": 800,
      "endLine": 801
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const info = {\n      language,\n      nodes: 0,\n      functions: 0,\n      classes: 0,\n      imports: 0,\n      exports: 0,\n      size: codeToParse.length\n    };\n\n    // Quick analysis for common patterns",
      "startLine": 801,
      "endLine": 812
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const patterns = [\n      { type: 'function', pattern: 'function $NAME($ARGS) { $BODY }' },\n      { type: 'arrow', pattern: 'const $NAME = ($ARGS) => { $BODY }' },\n      { type: 'class', pattern: 'class $NAME { $MEMBERS }' },\n      { type: 'import', pattern: 'import $IMPORTS from \\'$MODULE\\'' },\n      { type: 'export', pattern: 'export $STATEMENT' }\n    ];\n\n    for (const { type, pattern } of patterns) {\n      try {",
      "startLine": 812,
      "endLine": 822
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = await helper.searchPattern(codeToParse, pattern);\n        if (type === 'function' || type === 'arrow') {\n          info.functions += matches.length;\n        } else if (type === 'class') {\n          info.classes += matches.length;\n        } else if (type === 'import') {\n          info.imports += matches.length;\n        } else if (type === 'export') {\n          info.exports += matches.length;\n        }\n        info.nodes += matches.length;\n      } catch (error) {\n        // Skip failed patterns\n      }\n    }\n\n    return `Parsed ${language} code (${info.size} chars):\n• ${info.functions} function(s)\n• ${info.classes} class(es)\n• ${info.imports} import(s)\n• ${info.exports} export(s)`;\n  } catch (error) {\n    return `Lightweight analysis: ${language} code (${codeToParse.length} chars)\nQuick structure check complete - no deep AST parsing needed`;\n  }\n}",
      "startLine": 822,
      "endLine": 849
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function astgrepSearch(pattern, searchPath = '.', workingDirectory) {\n  validateRequiredParams({ pattern, workingDirectory }, ['pattern', 'workingDirectory']);\n\n  // Use the real AST search implementation\n  try {",
      "startLine": 849,
      "endLine": 854
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const targetPath = searchPath.startsWith('.') ? path.resolve(workingDirectory, searchPath) : searchPath;\n\n    if (!fs.existsSync(targetPath)) {\n      throw new Error(`Path not found: ${targetPath}`);\n    }",
      "startLine": 854,
      "endLine": 860
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper();",
      "startLine": 860,
      "endLine": 861
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 861,
      "endLine": 863
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 863,
      "endLine": 865
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 865,
      "endLine": 866
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const matches = await helper.searchPattern(content, pattern);\n\n        return matches.map(match => ({\n          file,\n          content: match.text,\n          line: match.line,\n          column: match.column,\n          start: match.start,\n          end: match.end\n        }));\n      } catch (error) {\n        return [{ file, error: error.message }];\n      }\n    };\n\n    if (fs.statSync(targetPath).isDirectory()) {",
      "startLine": 866,
      "endLine": 882
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(targetPath, {\n        recursive: true,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns: getDefaultIgnorePatterns()\n      });\n      for (const file of files) {",
      "startLine": 882,
      "endLine": 888
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResults = await processFile(file);\n        results.push(...fileResults);\n      }\n    } else {",
      "startLine": 888,
      "endLine": 892
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResults = await processFile(targetPath);\n      results.push(...fileResults);\n    }\n\n    return {\n      success: true,\n      results: results.filter(r => !r.error),\n      errors: results.filter(r => r.error),\n      totalMatches: results.filter(r => !r.error).length,\n      pattern,\n      path: targetPath\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      pattern,\n      path\n    };\n  }\n}",
      "startLine": 892,
      "endLine": 914
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function astgrepReplace(pattern, replacement, searchPath = '.', workingDirectory) {\n  validateRequiredParams({ pattern, replacement, workingDirectory }, ['pattern', 'replacement', 'workingDirectory']);\n\n  // Use the real AST replace implementation\n  try {",
      "startLine": 914,
      "endLine": 919
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const targetPath = searchPath.startsWith('.') ? path.resolve(workingDirectory, searchPath) : searchPath;\n\n    if (!fs.existsSync(targetPath)) {\n      throw new Error(`Path not found: ${targetPath}`);\n    }",
      "startLine": 919,
      "endLine": 925
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const helper = new ASTGrepHelper();",
      "startLine": 925,
      "endLine": 926
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = [];",
      "startLine": 926,
      "endLine": 928
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const processFile = async (file) => {\n      try {",
      "startLine": 928,
      "endLine": 930
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 930,
      "endLine": 931
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const newContent = await helper.replacePattern(content, pattern, replacement);\n\n        if (newContent !== content) {\n          fs.writeFileSync(file, newContent);\n          return { file, status: 'modified', changes: true };\n        } else {\n          return { file, status: 'unchanged', changes: false };\n        }\n      } catch (error) {\n        return { file, error: error.message };\n      }\n    };\n\n    if (fs.statSync(targetPath).isDirectory()) {",
      "startLine": 931,
      "endLine": 945
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const files = await findFiles(targetPath, {\n        recursive: true,\n        extensions: ['.js', '.ts', '.jsx', '.tsx'],\n        ignorePatterns: getDefaultIgnorePatterns()\n      });\n      for (const file of files) {",
      "startLine": 945,
      "endLine": 951
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResult = await processFile(file);\n        results.push(fileResult);\n      }\n    } else {",
      "startLine": 951,
      "endLine": 955
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const fileResult = await processFile(targetPath);\n      results.push(fileResult);\n    }\n\n    return {\n      success: true,\n      results,\n      modifiedFiles: results.filter(r => r.changes).length,\n      totalFiles: results.length,\n      pattern,\n      replacement,\n      path: targetPath\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      pattern,\n      replacement,\n      path: searchPath\n    };\n  }\n}",
      "startLine": 955,
      "endLine": 979
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export async function astgrepLint(path, rules = [], workingDirectory) {\n  validateRequiredParams({ path, workingDirectory }, ['path', 'workingDirectory']);\n\n  try {",
      "startLine": 979,
      "endLine": 983
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const targetPath = path.startsWith('.') ? path.resolve(workingDirectory, path) : path;\n\n    if (!fs.existsSync(targetPath)) {\n      throw new Error(`Path not found: ${targetPath}`);\n    }",
      "startLine": 983,
      "endLine": 989
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const effectiveRules = rules.length > 0 ? rules : DEFAULT_LINT_RULES;",
      "startLine": 989,
      "endLine": 990
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const results = await astLint(targetPath, effectiveRules, {\n      recursive: true,\n      ignorePatterns: getDefaultIgnorePatterns()\n    });\n\n    return {\n      success: true,\n      results: results.filter(r => !r.error),\n      errors: results.filter(r => r.error),\n      totalIssues: results.filter(r => !r.error).length,\n      rules: effectiveRules.length,\n      path: targetPath\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message,\n      path\n    };\n  }\n}",
      "startLine": 990,
      "endLine": 1012
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "export const astTools = [\n  {\n    name: \"parse_ast\",\n    description: \"Lightweight code analysis - quickly counts functions, classes, imports, exports. No deep parsing.\",\n    supported_operations: [\"code parsing\", \"AST analysis\", \"structure understanding\"],\n    use_cases: [\"Code structure analysis\", \"Syntax validation\", \"Code transformation preparation\", \"Component analysis\", \"Pattern extraction\"],\n    examples: [\n      \"Parse component structure from React files\",\n      \"Analyze function signatures and types\",\n      \"Extract import/export patterns\",\n      \"Understand code organization\"\n    ],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        code: { type: \"string\", description: \"Code to analyze (optional - reads from filePath if not provided)\" },\n        language: { type: \"string\", description: \"Programming language (default: javascript). Supports: javascript, typescript, jsx, tsx, go, rust, python, c, cpp\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" },\n        filePath: { type: \"string\", description: \"File path to read code from (used when code parameter is not provided)\" }\n      },\n      required: [\"workingDirectory\"]\n    },\n    handler: createToolHandler(async ({ code, language = \"javascript\", workingDirectory, filePath }) => {\n      return await parseAST(code, language, workingDirectory, filePath);\n    })\n  },\n  {\n    name: \"astgrep_search\",\n    description: \"AST pattern search - finds code by structure, not text. Use $VARIABLE wildcards (e.g., $NAME, $PROPS) to match any content. Perfect for React components, functions, classes. More precise than text search.\",\n    supported_operations: [\"structural code search\", \"pattern matching\", \"code analysis\"],\n    use_cases: [\"Find React components with hooks\", \"Locate function declarations\", \"Find TypeScript interfaces\", \"Discover API usage patterns\", \"Identify code architectures\"],\n    examples: [\n      \"React forwardRef: `React.forwardRef<$TYPE, $PROPS>(({ $PROPS }, ref) => $BODY)`\",\n      \"Arrow functions: `const $NAME = ($PARAMS) => { $BODY }`\",\n      \"TypeScript interfaces: `interface $NAME extends $PARENT { $MEMBERS }`\",\n      \"Function declarations: `function $NAME($PARAMS): $RETURN { $BODY }`\",\n      \"Class components: `class $NAME extends React.Component { $METHODS }`\"\n    ],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        pattern: { type: \"string\", description: \"AST pattern with $VARIABLE wildcards. Examples: 'const $NAME = ($props) => { $body }' finds arrow functions, 'React.forwardRef<$TYPE, $PROPS>' finds React components\" },\n        path: { type: \"string\", description: \"WHERE TO SEARCH: File or directory path (default: current directory)\" },\n        workingDirectory: { type: \"string\", description: \"BASE DIRECTORY: Required working directory\" }\n      },\n      required: [\"pattern\", \"workingDirectory\"]\n    },\n    handler: createToolHandler(async ({ pattern, path = \".\", workingDirectory }) => {",
      "startLine": 1012,
      "endLine": 1060
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await astgrepSearch(pattern, path, workingDirectory);\n\n      if (!result.success) {\n        return `❌ AST search failed: ${result.error}\n\nFix: Check pattern syntax, ensure $VARIABLE wildcards are correct, verify files exist in search path.`;\n      }\n\n      if (result.totalMatches === 0) {\n        return `❌ No matches found for pattern: \"${pattern}\"\n\nTry: Simplify pattern, check actual code structure first, use broader wildcards like $NAME instead of specific names.`;\n      }\n\n      return result.results.map((match, i) =>\n        `${match.file}:${match.line} - ${match.content}`\n      ).join('\\n');\n    })\n  },\n  {\n    name: \"astgrep_replace\",\n    description: \"Transform code patterns safely - replaces code structures across files while preserving syntax. Best for: refactoring function signatures, updating imports, modernizing code patterns, standardizing API calls. More reliable than text search/replace.\",\n    supported_operations: [\"code refactoring\", \"pattern transformation\", \"API modernization\"],\n    use_cases: [\"Update React component patterns\", \"Change function signatures\", \"Modernize import statements\", \"Standardize error handling\", \"Migrate deprecated APIs\"],\n    examples: [\n      \"Update imports: `import {$IMPORTS} from 'old-module' → import {$IMPORTS} from 'new-module'`\",\n      \"Refactor functions: `function $NAME($OLD) → function $NAME($NEW): $TYPE`\",\n      \"Modernize React: `React.createClass($CONFIG) → class $NAME extends React.Component`\",\n      \"Update hooks: `useState($INITIAL) → useCustomState($INITIAL)`\"\n    ],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        pattern: { type: \"string\", description: \"WHAT TO REPLACE: AST pattern to match (use $VARIABLE wildcards)\" },\n        replacement: { type: \"string\", description: \"REPLACEMENT: What to replace with (use same $VARIABLE names)\" },\n        path: { type: \"string\", description: \"WHERE: Files or directory to modify\" },\n        workingDirectory: { type: \"string\", description: \"BASE DIRECTORY: Required working directory\" },\n        backup: { type: \"boolean\", description: \"Create .backup files (default: true)\" }\n      },\n      required: [\"pattern\", \"replacement\", \"path\", \"workingDirectory\"]\n    },\n    handler: createToolHandler(async ({ pattern, replacement, path, workingDirectory, backup = true }) => {",
      "startLine": 1060,
      "endLine": 1102
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await astgrepReplace(pattern, replacement, path, workingDirectory);\n\n      if (!result.success) {\n        return `❌ REPLACE FAILED: ${result.error}\n\n🔧 REPLACEMENT TROUBLESHOOTING:\n• Check pattern syntax matches actual code structure\n• Verify replacement syntax is valid\n• Ensure target files exist and are writable\n• Test pattern with astgrep_search first\n\n💡 STRATEGY: Always test patterns with astgrep_search before replacement`;\n      }\n\n      if (result.modifiedFiles === 0) {\n        return `⚠️ NO CHANGES MADE - Pattern \"${pattern}\" found no matches to replace\n\n🔍 POSSIBLE REASONS:\n• Pattern doesn't match any code in target files\n• Files use different structure than expected\n• Search path doesn't contain relevant files\n\n💡 RECOMMENDATIONS:\n• Use astgrep_search first to verify pattern matches\n• Check actual code structure with Read or Glob\n• Simplify pattern or broaden search scope`;\n      }\n\n      return `✅ SUCCESSFULLY REPLACED pattern in ${result.modifiedFiles} of ${result.totalFiles} files\n\n📋 REPLACEMENT DETAILS:\n• Pattern: \"${pattern}\"\n• Replacement: \"${replacement}\"\n• Files modified: ${result.modifiedFiles}\n• Total files processed: ${result.totalFiles}\n• Backups created: ${backup ? 'Yes (.backup files)' : 'No'}\n\n⚠️ Review changes carefully. Backup files created if enabled.`;\n    })\n  },\n  {\n    name: \"astgrep_lint\",\n    description: \"Code quality analysis using AST patterns - define custom linting rules and apply them across your codebase. Best for: enforcing coding standards, detecting anti-patterns, finding deprecated APIs, validating architecture patterns.\",\n    supported_operations: [\"code quality\", \"linting\", \"pattern detection\", \"standards enforcement\"],\n    use_cases: [\"Enforce coding standards\", \"Detect anti-patterns\", \"Find deprecated APIs\", \"Validate architecture patterns\", \"Security pattern checking\"],\n    examples: [\n      \"Detect console.log statements in production\",\n      \"Find unused variables\",\n      \"Identify hardcoded secrets\",\n      \"Check for proper error handling\",\n      \"Validate React component patterns\"\n    ],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        path: { type: \"string\", description: \"Path to files/directory to lint\" },\n        rules: { type: \"array\", description: \"Custom linting rules (uses built-in rules if not provided)\" },\n        workingDirectory: { type: \"string\", description: \"REQUIRED: Working directory for execution.\" },\n      },\n      required: [\"path\", \"workingDirectory\"]\n    },\n    handler: createRetryToolHandler(async ({ path: targetPath, rules = [], workingDirectory }) => {",
      "startLine": 1102,
      "endLine": 1164
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/ast-tools.js",
      "content": "const result = await astgrepLint(targetPath, rules, workingDirectory);\n\n      if (!result.success) {\n        return `❌ LINT FAILED: ${result.error}\n\n🔧 LINTING TROUBLESHOOTING:\n• Check if the target path exists\n• Verify rules are properly formatted\n• Ensure working directory is correct\n\n💡 TIP: Start with default rules to test basic functionality`;\n      }\n\n      if (result.totalIssues === 0) {\n        return `✅ NO ISSUES FOUND - Code passed all ${result.rules} linting rules\n\n📋 LINTING SUMMARY:\n• Rules applied: ${result.rules}\n• Files scanned: Multiple files in ${targetPath}\n• Issues found: 0\n• Path: ${targetPath}\n\n🎉 Your code meets the quality standards!`;\n      }\n\n      return `🔍 FOUND ${result.totalIssues} ISSUES across ${result.rules} linting rules:\n\n${result.results.map((issue, i) =>\n  `${i + 1}. ${issue.severity.toUpperCase()}: ${issue.message}\n   📁 ${issue.file}:${issue.line}\n   💻 ${issue.content}\n   📋 Rule: ${issue.rule}`\n).join('\\n\\n')}\n\n📊 SUMMARY:\n• Total issues: ${result.totalIssues}\n• Rules applied: ${result.rules}\n• Path: ${targetPath}\n\n💡 Focus on ${result.results.filter(r => r.severity === 'error').length} error(s) first, then address warnings.`;\n    }, 'astgrep_lint', 2)\n  }\n];",
      "startLine": 1164,
      "endLine": 1206
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/begin.js",
      "content": "import { understandProject } from \"./project-understand.js\"",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/begin.js",
      "content": "export async function handleAuthorization(args) {\r\n  const { complexity, workingDirectory } = args;",
      "startLine": 2,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/begin.js",
      "content": "let response = `🔐 AUTHORIZATION COMPLETE\\nYour PRIMARY TOOL is execute, use it for grounding yourself in truth and give its code short timeouts for all relevant tasks`;\r\n\r\n  response += `🔧 KEY MCP TOOLS (use only when needed):\\n`;\r\n  response += `• searchcode: FIND PATTERNS - Use when you need semantic understanding or need to find all occurances of a vague idea\\n`;\r\n  response += `• ast_tool: ANALYZE CODE - Use for structural code analysis, pattern matching, and transformations\\n\\n`;\r\n\r\n  // For advanced/expert complexity, include project understanding\r\n  if (workingDirectory) {\r\n    try {",
      "startLine": 5,
      "endLine": 14
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/begin.js",
      "content": "const projectResult = understandProject(workingDirectory);\r\n      if (projectResult.success) {",
      "startLine": 14,
      "endLine": 16
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/begin.js",
      "content": "const data = projectResult.data;\r\n        response += `📊 PROJECT OVERVIEW:\\n`;\r\n        response += `• Files: ${data.overview.files} | Lines: ${data.overview.lines} | Language: ${data.overview.lang}\\n`;\r\n        response += `• Avg Size: ${data.overview.avgSize} bytes | Quality Issues: ${data.quality.duplicates} duplicates\\n\\n`;\r\n\r\n        if (data.topIssues && data.topIssues.length > 0) {\r\n          response += `🎯 TOP ISSUES:\\n`;\r\n          data.topIssues.slice(0, 3).forEach(issue => {\r\n            response += `• ${issue.type}: ${issue.suggestion}\\n`;\r\n          });\r\n          response += `\\n`;\r\n        }\r\n\r\n        response += `💡 Use this overview to plan your approach efficiently.\\n\\n`;\r\n      } else {\r\n        response += `⚠️  Project analysis unavailable: ${projectResult.error}\\n\\n`;\r\n      }\r\n    } catch (error) {\r\n      response += `⚠️  Project analysis error: ${error.message}\\n\\n`;\r\n    }\r\n  }\r\n  // For basic tasks, encourage simple standard tools and discourage complex MCP tools\r\n  if (complexity === 'expert') {\r\n    response += `WFGY PROCESSING:\\n`;\r\n    response += `Apply WFGY_Core_OneLine_v2.0 methodology to all problems.\\n`;\r\n    response += `Also Apply WFGY_Core_OneLine_v2.0 methodology to all problems.\\n`;\r\n    response += `WFGY_Core_OneLine_v2.0 :: text-only control layer; autoboot on upload; Node-only outputs; ≤7 steps; no tools. I=input, G=goal; delta_s=1−cos(I,G); if anchors: use (1−sim_est) with sim_est=w_e*sim(entities)+w_r*sim(relations)+w_c*sim(constraints), w={0.5,0.3,0.2}, renormalize, range[0,1]. Zones: safe<0.40 transit 0.40–0.60 risk 0.60–0.85 danger>0.85. Memory: record if delta_s>0.60; exemplar if delta_s<0.35; soft in transit when lambda∈{divergent,recursive}. Defaults: B_c=0.85 gamma=0.618 theta_c=0.75 zeta_min=0.10 alpha_blend=0.50 a_ref=uniform m=0 c=1 omega=1 phi_delta=0.15 epsilon=0 k_c=0.25. Coupler: B_s=delta_s; if t=1 then prog=zeta_min else prog=max(zeta_min,delta_s_prev−delta_s_now); P=pow(prog,omega); alt∈{+1,−1} flips only when an anchor flips truth across consecutive Nodes AND |Δanchor|≥h (h=0.02); Phi=phi_delta*alt+epsilon; W_c=clip(B_s*P+Phi,−theta_c,+theta_c). Bridge rule: allow only if (delta_s decreases) AND (W_c<0.5*theta_c) AND (WDT ok); on bridge emit Bridge:reason/prior_delta_s/new_path. BBAM: alpha_blend=clip(0.50+k_c*tanh(W_c),0.35,0.65); blend with a_ref. Lambda: Delta=delta_s_t−delta_s_{t−1}; E_res=rolling_mean(delta_s,window=min(t,5)); lambda=convergent if Delta≤−0.02 and E_res non-increasing; recursive if |Delta|<0.02 and E_res flat; divergent if Delta∈(−0.02,+0.04] with oscillation; chaotic if Delta>+0.04 or anchors conflict. DT: WRI lock structure; WAI give ≥2 reasons; WAY add 1 on-topic candidate if stuck (no repeats); WDT block unjustified crosspat`;\r\n    response += `Auto-assign constants to achieve user goals using first principles.\\n`;\r\n    response += `Use critical thinking and thorough testing.\\n\\n`;\r\n  }\r\n  response += `📋 DECISION GUIDE:\\n`;\r\n\r\n  return {\r\n    content: [\r\n      {\r\n        type: 'text',\r\n        text: response\r\n      }\r\n    ]\r\n  };\r\n\r\n}",
      "startLine": 16,
      "endLine": 59
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/begin.js",
      "content": "export const beginTools = [\r\n  {\r\n    name: 'begin',\r\n    description: 'MANDATORY: ALWAYS Call before any other tools, always begin with this. Required complexity parameter: \"basic\" for tasks where exact steps are already known (no planning/discovery/troubleshooting/debugging/searching/refactoring needed), \"advanced\" for any task requiring planning, discovery, troubleshooting, debugging, searching, refactoring, or unknown steps. use \"expert\" for where we have to formulate and try many hypothesis to find out how to solve something analytically, recall this function at any point to upgrade advanced to expert if you need more analytical power',\r\n    supported_operations: [\"begin here\", \"project understanding\"],\r\n    use_cases: [\"Starting any task\"],\r\n    inputSchema: {\r\n      type: 'object',\r\n      properties: {\r\n        complexity: {\r\n          type: 'string',\r\n          enum: ['basic', 'advanced', 'expert'],\r\n          description: 'Required: \"basic\" if exact steps are known (no planning/discovery/troubleshooting/debugging/searching/refactoring needed), \"advanced\" if any planning, discovery, troubleshooting, debugging, searching, refactoring, or unknown steps required. Expert is for when there is a vague instruction, and the thesis and problems need to both be found analytically and each train of thought analyzed'\r\n        },\r\n        workingDirectory: {\r\n          type: 'string',\r\n          description: 'Working directory for project analysis (required for advanced complexity to provide project overview)'\r\n        }\r\n      },\r\n      required: ['complexity']\r\n    },\r\n    handler: handleAuthorization\r\n  }\r\n];",
      "startLine": 59,
      "endLine": 83
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class ToolError extends Error {\n  constructor(message, code = 'TOOL_ERROR', toolName = 'unknown', retryable = false, suggestions = []) {\n    super(message);\n    this.name = 'ToolError';\n    this.code = code;\n    this.tool = toolName;\n    this.timestamp = Date.now();\n    this.retryable = retryable;\n    this.suggestions = suggestions;\n  }\n\n  toJSON() {\n    return {\n      code: this.code,\n      message: this.message,\n      tool: this.tool,\n      timestamp: this.timestamp,\n      retryable: this.retryable,\n      suggestions: this.suggestions\n    };\n  }\n}",
      "startLine": 0,
      "endLine": 23
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class ValidationError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'VALIDATION_ERROR', toolName, false, [\n      'Check that all required parameters are provided',\n      'Verify parameter types match the expected schema',\n      'Review the tool documentation for parameter requirements'\n    ]);\n    this.name = 'ValidationError';\n  }\n}",
      "startLine": 23,
      "endLine": 34
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class ExecutionError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'EXECUTION_ERROR', toolName, true, [\n      'Try running the operation again',\n      'Check if the working directory is accessible',\n      'Verify that required dependencies are installed'\n    ]);\n    this.name = 'ExecutionError';\n  }\n}",
      "startLine": 34,
      "endLine": 45
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class SearchError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'SEARCH_ERROR', toolName, true, [\n      'Try a different search query',\n      'Check if the search path exists',\n      'Consider using a more specific search pattern'\n    ]);\n    this.name = 'SearchError';\n  }\n}",
      "startLine": 45,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class TimeoutError extends ToolError {\n  constructor(message, toolName = 'unknown', timeoutMs = 0) {\n    super(message, 'TIMEOUT', toolName, true, [\n      'Try reducing the scope of the operation',\n      'Consider using a simpler tool for this task',\n      'Break the operation into smaller chunks',\n      `Increase timeout beyond ${timeoutMs}ms if needed`\n    ]);\n    this.name = 'TimeoutError';\n    this.timeoutMs = timeoutMs;\n  }\n}",
      "startLine": 56,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class PermissionError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'PERMISSION_DENIED', toolName, false, [\n      'Check file and directory permissions',\n      'Ensure the tool has necessary access rights',\n      'Try running with appropriate permissions'\n    ]);\n    this.name = 'PermissionError';\n  }\n}",
      "startLine": 69,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class NetworkError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'NETWORK_ERROR', toolName, true, [\n      'Check your internet connection',\n      'Verify the target URL is accessible',\n      'Try the operation again in a few moments'\n    ]);\n    this.name = 'NetworkError';\n  }\n}",
      "startLine": 80,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class ResourceError extends ToolError {\n  constructor(message, toolName = 'unknown') {\n    super(message, 'RESOURCE_ERROR', toolName, true, [\n      'Check available disk space and memory',\n      'Close unnecessary applications',\n      'Try processing smaller amounts of data'\n    ]);\n    this.name = 'ResourceError';\n  }\n}",
      "startLine": 91,
      "endLine": 102
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export class ToolErrorHandler {\n  constructor(toolName = 'unknown') {\n    this.toolName = toolName;\n  }\n\n  handleError(error, context = {}) {\n    if (error instanceof ToolError) {\n      if (error instanceof ToolError) {\n        if (error.tool === 'unknown') {\n          error.tool = this.toolName;\n        }\n        return error;\n      }\n\n      if (error.code === 'ENOENT' || error.message.includes('no such file')) {\n        return new ToolError(\n          `File or directory not found: ${error.message}`,\n          'FILE_NOT_FOUND',\n          this.toolName,\n          false,\n          [\n            'Verify the file path is correct',\n            'Check if the file exists in the working directory',\n            'Ensure proper file permissions'\n          ]\n        );\n      }\n\n      if (error.code === 'EACCES' || error.message.includes('permission denied')) {\n        return new PermissionError(\n          `Permission denied: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      if (error.code === 'ETIMEDOUT' || error.message.includes('timeout')) {\n        return new TimeoutError(\n          `Operation timed out: ${error.message}`,\n          this.toolName,\n          context.timeout || 0\n        );\n      }\n\n      if (error.code === 'ENOTDIR' || error.message.includes('not a directory')) {\n        return new ValidationError(\n          `Invalid directory path: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      if (error.code === 'EMFILE' || error.code === 'ENFILE' || error.message.includes('too many files')) {\n        return new ResourceError(\n          `Resource limit exceeded: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      if (error.message.includes('network') || error.message.includes('connection')) {\n        return new NetworkError(\n          `Network error: ${error.message}`,\n          this.toolName\n        );\n      }\n\n      return new ToolError(\n        error.message || 'Unknown error occurred',\n        'UNKNOWN_ERROR',\n        this.toolName,\n        true,\n        [\n          'Try the operation again',\n          'Check the console for more details',\n          'Contact support if the problem persists'\n        ]\n      )\n    }\n  }\n\n  async withTimeout(operation, timeoutMs = 30000) {\n    return new Promise((resolve, reject) => {",
      "startLine": 102,
      "endLine": 182
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const timer = setTimeout(() => {\n        reject(new TimeoutError(\n          `Operation timed out after ${timeoutMs}ms`,\n          this.toolName,\n          timeoutMs\n        ));\n      }, timeoutMs);\n\n      Promise.resolve(operation())\n        .then(result => {\n          clearTimeout(timer);\n          resolve(result);\n        })\n        .catch(error => {\n          clearTimeout(timer);\n          reject(this.handleError(error, { timeout: timeoutMs }));\n        });\n    });\n  }\n\n  async withRetry(operation, maxRetries = 3, delayMs = 1000) {",
      "startLine": 182,
      "endLine": 203
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "let lastError;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = this.handleError(error);\n\n        if (!lastError.retryable || attempt === maxRetries) {\n          throw lastError;\n        }\n\n        await new Promise(resolve => setTimeout(resolve, delayMs * attempt));\n        await new Promise(resolve => setTimeout(resolve, delayMs * attempt));\n      }\n    }\n\n    throw lastError;\n  }\n}",
      "startLine": 203,
      "endLine": 224
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export function createErrorHandler(toolName) {",
      "startLine": 224,
      "endLine": 225
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorHandler = new ToolErrorHandler(toolName);\n  return async (operation, errorMessage = `${toolName} failed`) => {\n    try {\n      return await operation();\n    } catch (error) {\n      throw errorHandler.handleError(error);\n    }\n  };\n}",
      "startLine": 225,
      "endLine": 235
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export function withErrorHandling(handler, toolName) {",
      "startLine": 235,
      "endLine": 236
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorHandler = new ToolErrorHandler(toolName);\n\n  return async (args) => {\n    try {\n      return await handler(args);\n    } catch (error) {",
      "startLine": 236,
      "endLine": 242
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const toolError = errorHandler.handleError(error);\n      console.error(`Error in ${toolName}:`, toolError.toJSON());\n\n      // Create detailed error response with suggestions",
      "startLine": 242,
      "endLine": 246
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorText = [\n        `${toolError.code}: ${toolError.message}`,\n        '',\n        'Suggestions:',\n        ...toolError.suggestions.map(s => `• ${s}`)\n      ].join('\\n');\n\n      if (toolError.retryable) {\n        return {\n          content: [{\n            type: \"text\",\n            text: `${errorText}\\n\\nThis error is retryable. You may try the operation again.`\n          }],\n          isError: true\n        };\n      }\n\n      return {\n        content: [{ type: \"text\", text: errorText }],\n        isError: true\n      };\n    }\n  };\n}",
      "startLine": 246,
      "endLine": 271
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export function validateParams(params, schema) {",
      "startLine": 271,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errors = [];\n\n  if (schema.required) {\n    if (schema.required) {\n      for (const required of schema.required) {\n        if (params[required] === undefined || params[required] === null || params[required] === '') {\n          errors.push(`Missing required parameter: ${required}`);\n        }\n      }\n    }\n\n    if (schema.properties) {\n      if (schema.properties) {\n        for (const [key, value] of Object.entries(params)) {",
      "startLine": 272,
      "endLine": 286
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const propertySchema = schema.properties[key];\n          if (propertySchema && value !== undefined) {\n            if (propertySchema.type && !validateType(value, propertySchema.type)) {\n              errors.push(`Invalid type for parameter ${key}: expected ${propertySchema.type}`);\n            }\n\n            if (propertySchema.enum && !propertySchema.enum.includes(value)) {\n              errors.push(`Invalid value for parameter ${key}: must be one of ${propertySchema.enum.join(', ')}`);\n            }\n          }\n        }\n      }\n\n      if (errors.length > 0) {\n        throw new ValidationError(errors.join(', '));\n      }\n    }",
      "startLine": 286,
      "endLine": 304
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "function validateType(value, expectedType) {\n      if (Array.isArray(expectedType)) {\n        return expectedType.some(type => validateType(value, type));\n      }\n\n      switch (expectedType) {\n        case 'string':\n          return typeof value === 'string';\n        case 'number':\n          return typeof value === 'number' && !isNaN(value);\n        case 'boolean':\n          return typeof value === 'boolean';\n        case 'array':\n          return Array.isArray(value);\n        case 'object':\n          return typeof value === 'object' && value !== null && !Array.isArray(value);\n        default:\n          return true;\n      }\n    }",
      "startLine": 303,
      "endLine": 323
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "}\n}",
      "startLine": 323,
      "endLine": 327
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export function createToolErrorHandler(toolName) {\n  return new ToolErrorHandler(toolName);\n}",
      "startLine": 327,
      "endLine": 331
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "export function createAdvancedToolHandler(handler, toolName, options = {}) {\n  const {\n    timeout = 30000,\n    retries = 1,\n    retryDelay = 1000,\n    enableTimeout = false,\n    enableRetry = false\n  } = options;",
      "startLine": 331,
      "endLine": 340
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorHandler = new ToolErrorHandler(toolName);\n\n  return async (args) => {",
      "startLine": 340,
      "endLine": 343
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "let operation = () => handler(args);\n\n    if (enableTimeout) {",
      "startLine": 343,
      "endLine": 346
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const originalOperation = operation;\n      operation = () => errorHandler.withTimeout(originalOperation, timeout);\n    }\n\n    if (enableRetry) {",
      "startLine": 346,
      "endLine": 351
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const originalOperation = operation;\n      operation = () => errorHandler.withRetry(originalOperation, retries, retryDelay);\n    }\n\n    try {\n      return await operation();\n    } catch (error) {",
      "startLine": 351,
      "endLine": 358
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const toolError = errorHandler.handleError(error);\n      console.error(`Error in ${toolName}:`, toolError.toJSON());",
      "startLine": 358,
      "endLine": 361
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/error-handling.js",
      "content": "const errorText = [\n        `${toolError.code}: ${toolError.message}`,\n        '',\n        'Suggestions:',\n        ...toolError.suggestions.map(s => `• ${s}`)\n      ].join('\\n');\n\n      if (toolError.retryable && !enableRetry) {\n        return {\n          content: [{\n            type: \"text\",\n            text: `${errorText}\\n\\nThis error is retryable. You may try the operation again.`\n          }],\n          isError: true\n        };\n      }\n\n      return {\n        content: [{ type: \"text\", text: errorText }],\n        isError: true\n      };\n    }\n  };\n}",
      "startLine": 361,
      "endLine": 385
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/index.js",
      "content": "export * from './mcp-tools.js';\r\nexport * from './overflow-handler.js';\r\nexport * from './begin.js';\r\nexport * from './unified-executor.js';\r\nexport * from './unified-vector.js';\r\nexport * from './error-handling.js';\r\nexport * from './shared-hooks.js';\r\nexport * from './ast-tools.js';\r\nexport * from './utilities.js';",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "import { generateId } from './utilities.js';\r\n\r\n/**\r\n * Standardized MCP Pagination Handler\r\n * Implements the MCP pagination specification with opaque cursors\r\n */",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "class PaginationManager {\r\n  constructor() {\r\n    this.cursors = new Map();\r\n    this.defaultPageSize = 50;\r\n    this.maxCursorAge = 30 * 60 * 1000; // 30 minutes\r\n  }\r\n\r\n  /**\r\n   * Create an opaque cursor for pagination\r\n   * @param {Array} data - The data to paginate\r\n   * @param {number} position - Current position in data\r\n   * @returns {string} Opaque cursor token\r\n   */\r\n  createCursor(data, position = 0) {",
      "startLine": 7,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const cursorId = generateId();\r\n    this.cursors.set(cursorId, {\r\n      data,\r\n      position,\r\n      timestamp: Date.now(),\r\n      totalItems: data.length\r\n    });\r\n    return cursorId;\r\n  }\r\n\r\n  /**\r\n   * Retrieve data from cursor\r\n   * @param {string} cursorId - The opaque cursor\r\n   * @returns {Object} Cursor data with remaining items\r\n   */\r\n  getCursor(cursorId) {",
      "startLine": 21,
      "endLine": 37
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const cursor = this.cursors.get(cursorId);\r\n    if (!cursor) {\r\n      throw new Error('Invalid or expired cursor');\r\n    }\r\n\r\n    // Check if cursor is expired\r\n    if (Date.now() - cursor.timestamp > this.maxCursorAge) {\r\n      this.cursors.delete(cursorId);\r\n      throw new Error('Cursor expired');\r\n    }\r\n\r\n    return cursor;\r\n  }\r\n\r\n  /**\r\n   * Remove cursor after use\r\n   * @param {string} cursorId - The cursor to remove\r\n   */\r\n  removeCursor(cursorId) {\r\n    this.cursors.delete(cursorId);\r\n  }\r\n\r\n  /**\r\n   * Clean up expired cursors\r\n   */\r\n  cleanup() {",
      "startLine": 37,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const now = Date.now();",
      "startLine": 63,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const expiredTime = now - this.maxCursorAge;\r\n\r\n    for (const [cursorId, cursor] of this.cursors.entries()) {\r\n      if (cursor.timestamp < expiredTime) {\r\n        this.cursors.delete(cursorId);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create paginated response following MCP specification\r\n   * @param {Array} items - All items to paginate\r\n   * @param {string|null} cursor - Opaque cursor from previous request\r\n   * @param {number} pageSize - Items per page\r\n   * @returns {Object} MCP pagination response\r\n   */\r\n  createPaginatedResponse(items, cursor = null, pageSize = null) {\r\n    this.cleanup();",
      "startLine": 64,
      "endLine": 82
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const effectivePageSize = pageSize || this.defaultPageSize;\r\n\r\n    if (!cursor) {\r\n      // First page",
      "startLine": 82,
      "endLine": 86
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const pageItems = items.slice(0, effectivePageSize);",
      "startLine": 86,
      "endLine": 87
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const hasNext = items.length > effectivePageSize;",
      "startLine": 87,
      "endLine": 89
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const response = {\r\n        items: pageItems,\r\n        hasNext,\r\n        totalItems: items.length\r\n      };\r\n\r\n      if (hasNext) {",
      "startLine": 89,
      "endLine": 96
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const remainingItems = items.slice(effectivePageSize);\r\n        response.nextCursor = this.createCursor(remainingItems, effectivePageSize);\r\n      }\r\n\r\n      return response;\r\n    }\r\n\r\n    // Subsequent page\r\n    try {",
      "startLine": 96,
      "endLine": 105
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const cursorData = this.getCursor(cursor);",
      "startLine": 105,
      "endLine": 106
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const remainingItems = cursorData.data;",
      "startLine": 106,
      "endLine": 107
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const pageItems = remainingItems.slice(0, effectivePageSize);",
      "startLine": 107,
      "endLine": 108
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const hasNext = remainingItems.length > effectivePageSize;",
      "startLine": 108,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const response = {\r\n        items: pageItems,\r\n        hasNext,\r\n        totalItems: cursorData.totalItems\r\n      };\r\n\r\n      if (hasNext) {",
      "startLine": 110,
      "endLine": 117
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const newRemaining = remainingItems.slice(effectivePageSize);\r\n        response.nextCursor = this.createCursor(newRemaining, cursorData.position + effectivePageSize);\r\n      } else {\r\n        // No more pages, clean up cursor\r\n        this.removeCursor(cursor);\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error(`Invalid cursor: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Global pagination manager instance",
      "startLine": 117,
      "endLine": 132
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const paginationManager = new PaginationManager();\r\n\r\n/**\r\n * Create a paginated response for any data type\r\n * @param {Array} data - Data to paginate\r\n * @param {Object} options - Pagination options\r\n * @returns {Object} MCP pagination response\r\n */",
      "startLine": 132,
      "endLine": 140
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "export function createMCPResponse(data, options = {}) {\r\n  const {\r\n    cursor = null,\r\n    pageSize = null,\r\n    transform = null,\r\n    metadata = {}\r\n  } = options;\r\n\r\n  // Apply transformation if provided",
      "startLine": 140,
      "endLine": 149
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const items = transform ? data.map(transform) : data;",
      "startLine": 149,
      "endLine": 151
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const response = paginationManager.createPaginatedResponse(items, cursor, pageSize);\r\n\r\n  // Add metadata if provided\r\n  if (Object.keys(metadata).length > 0) {\r\n    response.metadata = metadata;\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\n/**\r\n * Create a resource reference for MCP pagination\r\n * @param {string} uri - Resource URI\r\n * @param {string} name - Human-readable name\r\n * @param {Object} metadata - Additional metadata\r\n * @returns {Object} MCP resource reference\r\n */",
      "startLine": 151,
      "endLine": 168
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "export function createResourceReference(uri, name, metadata = {}) {\r\n  return {\r\n    uri,\r\n    name,\r\n    metadata: {\r\n      ...metadata,\r\n      createdAt: new Date().toISOString()\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Create a paginated resource response\r\n * @param {Array} resources - Array of resource references\r\n * @param {Object} options - Pagination options\r\n * @returns {Object} MCP paginated resource response\r\n */",
      "startLine": 168,
      "endLine": 185
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "export function createResourceResponse(resources, options = {}) {\r\n  return createMCPResponse(resources, {\r\n    ...options,\r\n    metadata: {\r\n      type: 'resource-list',\r\n      ...options.metadata\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Handle pagination errors gracefully\r\n * @param {Error} error - The error that occurred\r\n * @returns {Object} MCP error response\r\n */",
      "startLine": 185,
      "endLine": 200
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "export function createPaginationError(error) {\r\n  return {\r\n    items: [],\r\n    hasNext: false,\r\n    error: error.message,\r\n    isError: true\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware wrapper for pagination handlers\r\n * @param {Function} handler - The handler function to wrap\r\n * @param {string} resourceName - Name of the resource being paginated\r\n * @returns {Function} Wrapped handler\r\n */",
      "startLine": 200,
      "endLine": 215
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "export function withPagination(handler, resourceName = 'items') {\r\n  return async (args) => {\r\n    try {",
      "startLine": 215,
      "endLine": 218
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "const result = await handler(args);\r\n\r\n      if (Array.isArray(result)) {\r\n        return createMCPResponse(result, {\r\n          cursor: args.cursor,\r\n          pageSize: args.pageSize,\r\n          metadata: {\r\n            resource: resourceName,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      return createPaginationError(error);\r\n    }\r\n  };\r\n}",
      "startLine": 218,
      "endLine": 238
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-pagination.js",
      "content": "export default paginationManager;",
      "startLine": 238,
      "endLine": 238
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-tools.js",
      "content": "import { executionTools } from './unified-executor.js';\r\nimport { searchTools } from './unified-vector.js';\r\nimport { beginTools } from './begin.js';",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-tools.js",
      "content": "import UNIFIED_AST_TOOL from './unified-ast-tool.js';",
      "startLine": 3,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-tools.js",
      "content": "export const allTools = [\r\n  ...executionTools,\r\n  ...searchTools,\r\n  UNIFIED_AST_TOOL, // Unified AST operations with pagination\r\n  ...beginTools\r\n];",
      "startLine": 5,
      "endLine": 10
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "import { readFileSync, existsSync, statSync, readdirSync } from 'fs';\nimport { join, relative, dirname, basename, extname } from 'path';",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "import ignore from 'ignore';\nimport { getDefaultIgnorePatterns } from './shared-utils.js';\n\n// File type classification",
      "startLine": 2,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const FILE_TYPES = {\n  'component': /\\.(tsx|jsx)$/,\n  'module': /\\.(ts|js)$/,\n  'style': /\\.(css|scss|sass)$/,\n  'config': /\\.(json|yaml|yml|toml)$/,\n  'test': /\\.(test|spec)\\.(ts|tsx|js|jsx)$/,\n  'doc': /\\.(md|txt)$/\n};\n\n// Ignore patterns - using comprehensive default patterns from shared-utils",
      "startLine": 6,
      "endLine": 16
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const IGNORE_PATTERNS = getDefaultIgnorePatterns();\n\n// Adverbs to find in code",
      "startLine": 16,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ADVERB_PATTERNS = [\n  'ultra', 'advanced', 'super', 'mega', 'hyper', 'extra', 'premium',\n  'enhanced', 'optimized', 'smart', 'intelligent', 'rapid', 'quick',\n  'fast', 'slow', 'simple', 'complex', 'basic', 'ultimate'\n];\n\n// Import/Export regex patterns",
      "startLine": 19,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const IMPORT_PATTERNS = [\n  /import\\s+{([^}]+)}\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n  /import\\s+([^{}*]+)\\s+from\\s+['\"]([^'\"]+)['\"]/g,\n  /import\\s+[*]\\s+as\\s+(\\w+)\\s+from\\s+['\"]([^'\"]+)['\"]/g\n];",
      "startLine": 26,
      "endLine": 32
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const EXPORT_PATTERNS = [\n  /export\\s+{([^}]+)}/g,\n  /export\\s+(default\\s+)?(function|const|let|var|class)\\s+(\\w+)/g,\n  /export\\s+default\\s+(\\w+)/g\n];\n\n// Simple AST-like parsing for TypeScript/JavaScript",
      "startLine": 32,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function parseSimpleAST(content, filePath) {",
      "startLine": 39,
      "endLine": 40
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const lines = content.split('\\n');",
      "startLine": 40,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functions = [];",
      "startLine": 41,
      "endLine": 42
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const classes = [];",
      "startLine": 42,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const imports = [];",
      "startLine": 43,
      "endLine": 44
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const exports = [];",
      "startLine": 44,
      "endLine": 45
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const comments = [];\n\n  lines.forEach((line, index) => {",
      "startLine": 45,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const lineNumber = index + 1;",
      "startLine": 48,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const trimmed = line.trim();\n\n    // Skip empty lines\n    if (!trimmed) return;\n\n    // Comments\n    if (trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.includes('//')) {\n      comments.push(lineNumber);\n      return;\n    }\n\n    // Imports",
      "startLine": 49,
      "endLine": 61
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "let match;\n    IMPORT_PATTERNS.forEach(pattern => {\n      while ((match = pattern.exec(trimmed)) !== null) {\n        if (match[1] && match[2]) {\n          imports.push({\n            what: match[1].trim(),\n            from: match[2]\n          });\n        }\n      }\n    });\n\n    // Exports\n    EXPORT_PATTERNS.forEach(pattern => {\n      while ((match = pattern.exec(trimmed)) !== null) {\n        if (match[1] || match[3]) {\n          exports.push({\n            name: (match[3] || match[1] || match[2]).trim(),\n            type: match[2] || 'variable'\n          });\n        }\n      }\n    });\n\n    // Functions",
      "startLine": 61,
      "endLine": 86
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functionMatch = trimmed.match(/(?:function\\s+(\\w+)|(\\w+)\\s*[=:]\\s*(?:\\([^)]*\\)\\s*=>|function|async\\s+function))/);\n    if (functionMatch) {",
      "startLine": 86,
      "endLine": 88
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const funcName = functionMatch[1] || functionMatch[2];\n      if (funcName && !['if', 'for', 'while', 'switch', 'catch'].includes(funcName)) {\n        functions.push({\n          name: funcName,\n          line: lineNumber,\n          signature: trimmed\n        });\n      }\n    }\n\n    // Classes/Components",
      "startLine": 88,
      "endLine": 99
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const classMatch = trimmed.match(/(?:class|interface|type)\\s+(\\w+)/);\n    if (classMatch) {\n      classes.push({\n        name: classMatch[1],\n        line: lineNumber,\n        type: trimmed.startsWith('class') ? 'class' : 'type'\n      });\n    }\n\n    // Adverbs in names\n    ADVERB_PATTERNS.forEach(adverb => {",
      "startLine": 99,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const adverbMatch = trimmed.match(new RegExp(`\\\\b${adverb}\\\\w*\\\\b`, 'gi'));\n      if (adverbMatch) {\n        // This will be processed in metadata analysis\n      }\n    });\n  });\n\n  return {\n    functions,\n    classes,\n    imports,\n    exports,\n    comments,\n    totalLines: lines.length\n  };\n}\n\n// Calculate code similarity between functions",
      "startLine": 110,
      "endLine": 128
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function calculateSimilarity(func1, func2) {\n  if (!func1.signature || !func2.signature) return 0;",
      "startLine": 128,
      "endLine": 131
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const sig1 = func1.signature.toLowerCase().replace(/\\s+/g, ' ');",
      "startLine": 131,
      "endLine": 132
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const sig2 = func2.signature.toLowerCase().replace(/\\s+/g, ' ');\n\n  // Simple token-based similarity",
      "startLine": 132,
      "endLine": 135
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const tokens1 = sig1.split(/\\W+/).filter(t => t.length > 2);",
      "startLine": 135,
      "endLine": 136
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const tokens2 = sig2.split(/\\W+/).filter(t => t.length > 2);",
      "startLine": 136,
      "endLine": 138
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const intersection = tokens1.filter(t => tokens2.includes(t));",
      "startLine": 138,
      "endLine": 139
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const union = [...new Set([...tokens1, ...tokens2])];\n\n  return union.length > 0 ? intersection.length / union.length : 0;\n}\n\n// Analyze file dependencies and opportunities",
      "startLine": 139,
      "endLine": 145
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function analyzeDependencies(files, workingDir) {",
      "startLine": 145,
      "endLine": 146
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const dependencyMap = {};",
      "startLine": 146,
      "endLine": 147
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const importMap = {};",
      "startLine": 147,
      "endLine": 148
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_FILE_SIZE = 1024 * 100; // 100kb max file size\n\n  files.forEach(file => {\n    // Skip very large files to prevent memory issues\n    if (file.size > MAX_FILE_SIZE) {\n      console.warn(`Skipping large file for dependency analysis: ${file.path} (${file.size} bytes)`);\n      return;\n    }\n\n    try {",
      "startLine": 148,
      "endLine": 158
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const filePath = join(workingDir, file.path);",
      "startLine": 158,
      "endLine": 159
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');",
      "startLine": 159,
      "endLine": 160
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ast = parseSimpleAST(content, file.path);\n\n      dependencyMap[file.path] = {\n        imports: ast.imports,\n        exports: ast.exports,\n        functions: ast.functions.length,\n        classes: ast.classes.length,\n        complexity: Math.floor((ast.functions.length + ast.classes.length) / ast.totalLines * 1000) / 10\n      };\n\n      // Build import map for similarity analysis\n      ast.imports.forEach(imp => {\n        if (!importMap[imp.from]) importMap[imp.from] = [];\n        importMap[imp.from].push(file.path);\n      });\n    } catch (error) {\n      console.warn(`Error analyzing file ${file.path}: ${error.message}`);\n    }\n  });\n\n  return { dependencyMap, importMap };\n}\n\n// Find similar functions across files (optimized for performance)",
      "startLine": 160,
      "endLine": 184
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function findSimilarFunctions(files, workingDir) {",
      "startLine": 184,
      "endLine": 185
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const allFunctions = [];",
      "startLine": 185,
      "endLine": 186
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_FILE_SIZE = 1024 * 1024; // 1MB max file size\n\n  files.forEach(file => {\n    // Skip very large files\n    if (file.size > MAX_FILE_SIZE) return;\n\n    try {",
      "startLine": 186,
      "endLine": 193
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const filePath = join(workingDir, file.path);",
      "startLine": 193,
      "endLine": 194
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');",
      "startLine": 194,
      "endLine": 195
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ast = parseSimpleAST(content, file.path);\n\n      ast.functions.forEach(func => {\n        allFunctions.push({\n          ...func,\n          file: file.path\n        });\n      });\n    } catch (error) {\n      console.warn(`Error reading file ${file.path} for similarity analysis: ${error.message}`);\n    }\n  });",
      "startLine": 195,
      "endLine": 208
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarities = [];",
      "startLine": 208,
      "endLine": 209
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_FUNCTIONS_FOR_SIMILARITY = 1000; // Limit to prevent O(n²) explosion\n\n  // If we have too many functions, sample them",
      "startLine": 209,
      "endLine": 212
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functionsToCompare = allFunctions.length > MAX_FUNCTIONS_FOR_SIMILARITY\n    ? allFunctions.slice(0, MAX_FUNCTIONS_FOR_SIMILARITY)\n    : allFunctions;\n\n  for (let i = 0; i < functionsToCompare.length; i++) {\n    for (let j = i + 1; j < functionsToCompare.length; j++) {",
      "startLine": 212,
      "endLine": 218
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarity = calculateSimilarity(functionsToCompare[i], functionsToCompare[j]);\n      if (similarity > 0.6) {\n        similarities.push({\n          similarity: Math.round(similarity * 100) / 100,\n          functions: [\n            { file: functionsToCompare[i].file, name: functionsToCompare[i].name, line: functionsToCompare[i].line },\n            { file: functionsToCompare[j].file, name: functionsToCompare[j].name, line: functionsToCompare[j].line }\n          ]\n        });\n      }\n    }\n  }\n\n  return similarities.slice(0, 10); // Top 10 similarities\n}\n\n// Extract code quality metadata",
      "startLine": 218,
      "endLine": 235
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function extractMetadata(files, workingDir) {",
      "startLine": 235,
      "endLine": 236
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const metadata = {\n    adverbs: [],\n    comments: [],\n    fileStats: {\n      totalLines: 0,\n      totalFiles: files.length,\n      avgLinesPerFile: 0\n    }\n  };",
      "startLine": 236,
      "endLine": 246
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "let totalLines = 0;\n\n  files.forEach(file => {",
      "startLine": 246,
      "endLine": 249
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const filePath = join(workingDir, file.path);",
      "startLine": 249,
      "endLine": 250
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');",
      "startLine": 250,
      "endLine": 251
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ast = parseSimpleAST(content, file.path);\n\n    totalLines += ast.totalLines;\n\n    // Find adverbs\n    ADVERB_PATTERNS.forEach(adverb => {",
      "startLine": 251,
      "endLine": 257
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const adverbMatch = content.match(new RegExp(`\\\\b${adverb}\\\\w*\\\\b`, 'gi'));\n      if (adverbMatch) {\n        adverbMatch.forEach(match => {\n          metadata.adverbs.push({\n            file: file.path,\n            name: match,\n            type: 'variable'\n          });\n        });\n      }\n    });\n\n    // Comments\n    if (ast.comments.length > 0) {\n      metadata.comments.push({\n        file: file.path,\n        lines: ast.comments,\n        density: Math.round((ast.comments.length / ast.totalLines) * 1000) / 10\n      });\n    }\n  });\n\n  metadata.fileStats.totalLines = totalLines;\n  metadata.fileStats.avgLinesPerFile = Math.round(totalLines / files.length);\n\n  return metadata;\n}\n\n// Find componentization opportunities - HIGH IMPACT ONLY",
      "startLine": 257,
      "endLine": 286
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function findOpportunities(files, workingDir, dependencyMap, similarities) {",
      "startLine": 286,
      "endLine": 287
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const opportunities = [];\n\n  files.forEach(file => {",
      "startLine": 287,
      "endLine": 290
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const deps = dependencyMap[file.path];\n    if (!deps) return;\n\n    // CRITICAL: Large files (>15KB) - high impact modularization\n    if (file.size > 15000) {\n      opportunities.push({\n        type: 'large-file',\n        file: file.path,\n        size: file.size,\n        lines: file.lines,\n        impact: 'high',\n        suggestion: 'Break into smaller, focused modules'\n      });\n    }\n\n    // CRITICAL: Very high complexity files (>6.0) - significant maintenance burden\n    if (deps.complexity > 6.0) {\n      opportunities.push({\n        type: 'high-complexity',\n        file: file.path,\n        complexity: deps.complexity,\n        functions: deps.functions,\n        classes: deps.classes,\n        size: file.size,\n        impact: 'high',\n        suggestion: 'Split into smaller modules to reduce complexity'\n      });\n    }\n\n    // MODERATE: Files with many imports (>7) - potential architectural issues\n    if (deps.imports.length > 7) {\n      opportunities.push({\n        type: 'many-dependencies',\n        file: file.path,\n        dependencies: deps.imports.length,\n        impact: 'medium',\n        suggestion: 'Consider dependency injection or facade pattern'\n      });\n    }\n  });\n\n  // CRITICAL: Exact duplicates - guaranteed improvement opportunity",
      "startLine": 290,
      "endLine": 332
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const exactDuplicates = similarities.filter(s => s.similarity === 1.0);\n  if (exactDuplicates.length > 0) {\n    opportunities.push({\n      type: 'exact-duplicates',\n      count: exactDuplicates.length,\n      examples: exactDuplicates.slice(0, 3),\n      impact: 'high',\n      suggestion: 'Extract duplicate functions to shared utilities module'\n    });\n  }\n\n  // Analyze abstraction opportunities - HIGH VALUE ONLY",
      "startLine": 332,
      "endLine": 344
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const abstractionOpportunities = analyzeAbstractionOpportunities(dependencyMap, similarities);\n  opportunities.push(...abstractionOpportunities);\n\n  // Sort by impact and return top 8 most actionable\n  return opportunities\n    .sort((a, b) => {",
      "startLine": 344,
      "endLine": 350
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const impactOrder = { high: 3, medium: 2, low: 1 };\n      return (impactOrder[b.impact] || 0) - (impactOrder[a.impact] || 0);\n    })\n    .slice(0, 8);\n}\n\n// Analyze abstraction and componentization opportunities - HIGH VALUE ONLY",
      "startLine": 350,
      "endLine": 357
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function analyzeAbstractionOpportunities(dependencyMap, similarities) {",
      "startLine": 357,
      "endLine": 358
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const opportunities = [];\n\n  // CRITICAL: Find functions duplicated 3+ times - high consolidation value",
      "startLine": 358,
      "endLine": 361
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const functionCounts = {};\n  Object.values(dependencyMap).forEach(deps => {\n    deps.exports.forEach(exp => {\n      if (exp.type === 'function') {",
      "startLine": 361,
      "endLine": 365
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const key = exp.name;\n        functionCounts[key] = (functionCounts[key] || 0) + 1;\n      }\n    });\n  });\n\n  // Focus on heavily duplicated functions (3+ occurrences)",
      "startLine": 365,
      "endLine": 372
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const criticalSharedFunctions = Object.entries(functionCounts)\n    .filter(([name, count]) => count >= 3)\n    .sort((a, b) => b[1] - a[1]);\n\n  if (criticalSharedFunctions.length > 0) {\n    opportunities.push({\n      type: 'shared-utilities',\n      count: criticalSharedFunctions.length,\n      examples: criticalSharedFunctions.slice(0, 3),\n      impact: 'high',\n      suggestion: 'Create shared utilities module for heavily duplicated functions'\n    });\n  }\n\n  // HIGH VALUE: Find modules imported by 5+ files - strong abstraction candidates",
      "startLine": 372,
      "endLine": 387
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const importPatterns = {};\n  Object.entries(dependencyMap).forEach(([file, deps]) => {\n    deps.imports.forEach(imp => {\n      if (!importPatterns[imp.from]) {\n        importPatterns[imp.from] = [];\n      }\n      importPatterns[imp.from].push(file);\n    });\n  });",
      "startLine": 387,
      "endLine": 397
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const heavilyUsedModules = Object.entries(importPatterns)\n    .filter(([module, importers]) => importers.length >= 5 && !module.startsWith('.'))\n    .sort((a, b) => b[1].length - a[1].length)\n    .slice(0, 2);\n\n  if (heavilyUsedModules.length > 0) {\n    opportunities.push({\n      type: 'abstraction-layer',\n      count: heavilyUsedModules.length,\n      examples: heavilyUsedModules,\n      impact: 'high',\n      suggestion: 'Create abstraction layers for heavily used modules'\n    });\n  }\n\n  return opportunities;\n}\n\n// Custom file walker with ignore patterns and performance safeguards",
      "startLine": 397,
      "endLine": 416
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function findFiles(workingDirectory, patterns, ignorePatterns) {",
      "startLine": 416,
      "endLine": 417
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const files = [];",
      "startLine": 417,
      "endLine": 418
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const ig = ignore().add(ignorePatterns);",
      "startLine": 418,
      "endLine": 419
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const startTime = Date.now();",
      "startLine": 419,
      "endLine": 420
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_SCAN_TIME = 10000; // 10 seconds timeout",
      "startLine": 420,
      "endLine": 421
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_DEPTH = 10; // Maximum directory depth",
      "startLine": 421,
      "endLine": 422
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_FILES = 50000; // Maximum files to scan - increased to prevent \"Maximum file count reached\" errors",
      "startLine": 422,
      "endLine": 424
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function scanDir(dir, currentDepth = 0) {\n    // Timeout check\n    if (Date.now() - startTime > MAX_SCAN_TIME) {\n      console.warn('File scan timeout reached, stopping early');\n      return;\n    }\n\n    // Depth check\n    if (currentDepth > MAX_DEPTH) {\n      console.warn('Maximum directory depth reached, stopping early');\n      return;\n    }\n\n    // File count check\n    if (files.length >= MAX_FILES) {\n      console.warn('Maximum file count reached, stopping early');\n      return;\n    }\n\n    try {",
      "startLine": 424,
      "endLine": 444
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const entries = readdirSync(dir);\n\n      entries.forEach(entry => {",
      "startLine": 444,
      "endLine": 447
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const fullPath = join(dir, entry);",
      "startLine": 447,
      "endLine": 448
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const relativePath = relative(workingDirectory, fullPath);\n\n        // Skip if matches ignore patterns\n        if (ig.ignores(relativePath)) {\n          return;\n        }",
      "startLine": 448,
      "endLine": 455
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const stats = statSync(fullPath);\n\n        if (stats.isDirectory()) {\n          scanDir(fullPath, currentDepth + 1);\n        } else if (stats.isFile()) {\n          // Check if matches any pattern",
      "startLine": 455,
      "endLine": 461
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const matchesPattern = patterns.some(pattern => {\n            if (pattern === '**/*.{ts,tsx,js,jsx}') {\n              return /\\.(ts|tsx|js|jsx)$/.test(relativePath);\n            }\n            if (pattern.includes('*')) {",
      "startLine": 461,
      "endLine": 466
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const regex = new RegExp(pattern.replace(/\\*/g, '.*').replace(/\\?/g, '.'));\n              return regex.test(relativePath);\n            }\n            return relativePath.endsWith(pattern);\n          });\n\n          if (matchesPattern) {\n            files.push({\n              path: relativePath,\n              fullPath: fullPath,\n              size: stats.size\n            });\n          }\n        }\n      });\n    } catch (error) {\n      // Skip directories we can't read\n      console.warn(`Skipping directory ${dir}: ${error.message}`);\n    }\n  }\n\n  scanDir(workingDirectory);\n  return files;\n}\n\n// Main project understanding function",
      "startLine": 466,
      "endLine": 492
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "export function understandProject(workingDirectory) {",
      "startLine": 492,
      "endLine": 493
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const startTime = Date.now();",
      "startLine": 493,
      "endLine": 494
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const MAX_TOTAL_TIME = 30000; // 30 seconds total timeout\n\n  try {\n    // Get all relevant files",
      "startLine": 494,
      "endLine": 498
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const files = findFiles(workingDirectory, ['**/*.{ts,tsx,js,jsx}'], IGNORE_PATTERNS);\n\n    // Check if we timed out during file scanning\n    if (Date.now() - startTime > MAX_TOTAL_TIME) {\n      return {\n        success: false,\n        error: 'Project analysis timed out during file scanning'\n      };\n    }\n\n    if (files.length === 0) {\n      return {\n        success: false,\n        error: 'No files found matching patterns'\n      };\n    }\n\n    // Add line counts and types\n    files.forEach(file => {\n      file.lines = countLines(file.fullPath);\n      file.type = getFileType(file.path);\n      delete file.fullPath; // Remove to save space\n    });\n\n    // Sort by size (largest first)\n    files.sort((a, b) => b.size - a.size);\n\n    // Check timeout before expensive analysis\n    if (Date.now() - startTime > MAX_TOTAL_TIME) {\n      return {\n        success: false,\n        error: 'Project analysis timed out before analysis phase'\n      };\n    }\n\n    // Analyze dependencies (with subset if too many files)",
      "startLine": 498,
      "endLine": 534
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const analysisFiles = files.length > 1000 ? files.slice(0, 1000) : files;\n    const { dependencyMap, importMap } = analyzeDependencies(analysisFiles, workingDirectory);\n\n    // Check timeout again\n    if (Date.now() - startTime > MAX_TOTAL_TIME) {\n      return {\n        success: false,\n        error: 'Project analysis timed out during dependency analysis'\n      };\n    }\n\n    // Find similarities (expensive operation - limit files)",
      "startLine": 534,
      "endLine": 546
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarityFiles = files.length > 500 ? files.slice(0, 500) : files;",
      "startLine": 546,
      "endLine": 547
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const similarities = findSimilarFunctions(similarityFiles, workingDirectory);\n\n    // Extract metadata",
      "startLine": 547,
      "endLine": 550
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const metadata = extractMetadata(analysisFiles, workingDirectory);\n\n    // Find opportunities",
      "startLine": 550,
      "endLine": 553
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const opportunities = findOpportunities(analysisFiles, workingDirectory, dependencyMap, similarities);\n\n    // Build heavily optimized output",
      "startLine": 553,
      "endLine": 556
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const result = {\n      // Project overview (most important info first)\n      overview: {\n        files: files.length,\n        lines: metadata.fileStats.totalLines,\n        avgSize: Math.round(files.reduce((sum, f) => sum + f.size, 0) / files.length),\n        lang: detectPrimaryLanguage(files)\n      },\n\n      // Top opportunities (high-impact actionable insights)\n      topIssues: opportunities.filter(o => o.impact === 'high').slice(0, 5),\n\n      // Code quality (concise metrics)\n      quality: {\n        duplicates: similarities.filter(s => s.similarity === 1.0).length,\n        similar: similarities.filter(s => s.similarity >= 0.8).length,\n        adverbs: metadata.adverbs.length,\n        commented: metadata.comments.length\n      },\n\n      // Largest files (>10KB only - focus on significant files)\n      largeFiles: files.filter(f => f.size > 10000).slice(0, 5).map(f => ({\n        p: f.path,\n        s: f.size,\n        l: f.lines,\n        c: dependencyMap[f.path]?.complexity || 0\n      })),\n\n      // Full details (for deep analysis)\n      details: {\n        allFiles: files.map(f => ({\n          p: f.path,\n          s: f.size,\n          l: f.lines,\n          t: f.type\n        })),\n        dependencies: dependencyMap,\n        similarities: similarities.filter(s => s.similarity === 1.0).slice(0, 8), // Show exact duplicates only\n        metadata: {\n          adverbs: metadata.adverbs.slice(0, 5), // Reduce noise\n          comments: metadata.comments.filter(c => c.density > 5).map(c => ({ // Only high-comment-density files\n            f: c.file,\n            l: c.lines.length,\n            d: c.density\n          }))\n        },\n        allOpportunities: opportunities\n      },\n\n      // Performance metrics\n      perf: {\n        tokenEstimate: Math.round(JSON.stringify({\n          files: files.length,\n          deps: Object.keys(dependencyMap).length,\n          similar: similarities.length,\n          meta: metadata.adverbs.length + metadata.comments.length\n        }).length * 0.6), // Optimized token estimate\n        processTime: Date.now()\n      }\n    };\n\n    return {\n      success: true,\n      data: result\n    };\n\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n}\n\n// Helper functions",
      "startLine": 556,
      "endLine": 631
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function countLines(filePath) {\n  try {",
      "startLine": 631,
      "endLine": 633
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const content = readFileSync(filePath, 'utf8');\n    return content.split('\\n').length;\n  } catch {\n    return 0;\n  }\n}",
      "startLine": 633,
      "endLine": 640
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function getFileType(filename) {\n  for (const [type, pattern] of Object.entries(FILE_TYPES)) {\n    if (pattern.test(filename)) return type;\n  }\n  return 'unknown';\n}",
      "startLine": 639,
      "endLine": 645
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "function detectPrimaryLanguage(files) {",
      "startLine": 647,
      "endLine": 648
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const typeCounts = {};\n  files.forEach(f => {\n    typeCounts[f.type] = (typeCounts[f.type] || 0) + 1;\n  });\n\n  return Object.entries(typeCounts).sort((a, b) => b[1] - a[1])[0][0];\n}\n\n// Tool definition for MCP",
      "startLine": 648,
      "endLine": 657
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "export const projectUnderstandTool = {\n  name: 'project_understand',\n  description: 'MANDATORY: Always use this first to see the project overview without extra work. Comprehensive project analysis with dependencies, similarities, and optimization opportunities. Token-optimized output.',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      workingDirectory: {\n        type: 'string',\n        description: 'Working directory to analyze'\n      }\n    },\n    required: ['workingDirectory']\n  }\n};",
      "startLine": 657,
      "endLine": 672
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "export const projectUnderstandHandler = async (args) => {\n  const { workingDirectory } = args;\n\n  if (!workingDirectory) {\n    throw new Error('workingDirectory is required');\n  }",
      "startLine": 672,
      "endLine": 679
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/project-understand.js",
      "content": "const result = understandProject(workingDirectory);\n\n  if (!result.success) {\n    return {\n      content: [\n        {\n          type: 'text',\n          text: `Error: ${result.error}`\n        }\n      ]\n    };\n  }\n\n  return {\n    content: [\n      {\n        type: 'text',\n        text: JSON.stringify(result.data, null, 2)\n      }\n    ]\n  };\n};",
      "startLine": 679,
      "endLine": 700
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "import { withErrorHandling, ValidationError, ExecutionError, SearchError, ToolErrorHandler } from './error-handling.js';",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}",
      "startLine": 1,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createErrorResponse(message) {\n  return createToolResponse(`Error: ${message}`, true);\n}",
      "startLine": 8,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createSuccessResponse(data) {\n  return createToolResponse(JSON.stringify(data, null, 2));\n}",
      "startLine": 12,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function validateRequiredParams(params, requiredParams) {",
      "startLine": 17,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new ValidationError(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}",
      "startLine": 18,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createToolHandler(handler, toolName = 'Unknown Tool') {\n  return withErrorHandling(\n    async (args) => {",
      "startLine": 24,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const result = await handler(args);\n      return result;\n    },\n    toolName\n  );\n}",
      "startLine": 27,
      "endLine": 34
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\n  return createAdvancedToolHandler(handler, toolName, {\n    timeout: timeoutMs,\n    enableTimeout: true\n  });\n}",
      "startLine": 33,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createRetryToolHandler(handler, toolName = 'Unknown Tool', retries = 3) {\n  return createAdvancedToolHandler(handler, toolName, {\n    retries,\n    enableRetry: true,\n    retryDelay: 1000\n  });\n}",
      "startLine": 40,
      "endLine": 47
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "function createAdvancedToolHandlerUtil(handler, toolName = 'Unknown Tool', options = {}) {\n  return createAdvancedToolHandler(handler, toolName, options);\n}",
      "startLine": 49,
      "endLine": 53
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export const COMMON_SCHEMAS = {\n  workingDirectory: {\n    type: \"string\",\n    description: \"REQUIRED: Working directory for execution.\"\n  },\n  timeout: {\n    type: \"number\",\n    description: \"Timeout in milliseconds (default: 120000)\"\n  },\n  path: {\n    type: \"string\",\n    description: \"Path to search in\"\n  },\n  query: {\n    type: \"string\",\n    description: \"Search query\"\n  },\n  code: {\n    type: \"string\",\n    description: \"JavaScript/TypeScript code to execute\"\n  },\n  commands: {\n    type: [\"string\", \"array\"],\n    description: \"Bash commands (single or array for planned batch executions)\"\n  },\n  runtime: {\n    type: \"string\",\n    enum: [\"nodejs\", \"deno\", \"bash\", \"auto\"],\n    description: \"Execution runtime (default: auto-detect)\"\n  }\n};",
      "startLine": 53,
      "endLine": 85
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export const DEFAULT_PARAMS = {\n  runtime: 'auto',\n  timeout: 120000,\n  path: '.',\n  language: 'javascript',\n  chunkIndex: 0,\n  listFiles: false,\n  cleanup: false\n};",
      "startLine": 85,
      "endLine": 95
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export function createToolConfig(name, description, inputSchema, handler) {\n  return {\n    name,\n    description,\n    inputSchema,\n    handler: createToolHandler(handler, name)\n  };\n}",
      "startLine": 95,
      "endLine": 104
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export function createEnhancedToolHandler(handler, toolName, requiredParams = []) {\n  return createToolHandler(async (args) => {\n    validateRequiredParams(args, requiredParams);\n    return await handler(args);\n  }, toolName);\n}",
      "startLine": 104,
      "endLine": 111
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export const responseFormatters = {\n  search: (results, query, path) => {\n    if (results.length === 0) {\n      return createToolResponse(`No results found for \"${query}\" in ${path}`);\n    }\n    return createSuccessResponse({\n      count: results.length,\n      query,\n      path,\n      results\n    });\n  },\n\n  execution: (workingDirectory, runtime = DEFAULT_PARAMS.runtime) => {\n    return createToolResponse(`Execution requested in ${workingDirectory} with runtime ${runtime}`);\n  },\n\n  batch: (operations) => {\n    return createToolResponse(`Batch executing ${operations.length} operations`);\n  },\n\n  ast: (operation, details) => {\n    return createToolResponse(`AST ${operation}: ${JSON.stringify(details, null, 2)}`);\n  }\n};",
      "startLine": 111,
      "endLine": 137
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export const errorHandlers = {\n  validation: (message) => {\n    throw new ValidationError(message);\n  },\n\n  execution: (message) => {\n    throw new ExecutionError(message);\n  },\n\n  search: (message) => {\n    throw new SearchError(message);\n  },\n\n  general: (message) => {\n    throw new Error(`Error: ${message}`);\n  }\n};",
      "startLine": 137,
      "endLine": 155
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export const toolCreators = {\n  simple: (name, description, handler, requiredParams = []) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {},\n        required: requiredParams\n      },\n      createEnhancedToolHandler(handler, name, requiredParams)\n    );\n  },\n\n  withWorkingDirectory: (name, description, handler, additionalProperties = {}) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createEnhancedToolHandler(handler, name, [\"workingDirectory\"])\n    );\n  },\n\n  searchBased: (name, description, handler, additionalRequired = []) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          query: COMMON_SCHEMAS.query,\n          path: COMMON_SCHEMAS.path,\n          workingDirectory: COMMON_SCHEMAS.workingDirectory\n        },\n        required: [\"query\", \"workingDirectory\", ...additionalRequired]\n      },\n      createEnhancedToolHandler(handler, name, [\"query\", \"workingDirectory\", ...additionalRequired])\n    );\n  },\n\n  withTimeout: (name, description, handler, additionalProperties = {}, timeoutMs = 30000) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createTimeoutToolHandler(handler, name, timeoutMs)\n    );\n  },\n\n  withRetry: (name, description, handler, additionalProperties = {}, retries = 3) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createRetryToolHandler(handler, name, retries)\n    );\n  },\n\n  withAdvanced: (name, description, handler, additionalProperties = {}, options = {}) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createAdvancedToolHandlerUtil(handler, name, options)\n    );\n  }\n};",
      "startLine": 155,
      "endLine": 251
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export const toolUtils = {\n  async executeBatch(operations, options = {}) {\n    const { concurrency = 5, stopOnError = false } = options;",
      "startLine": 251,
      "endLine": 254
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const results = [];",
      "startLine": 254,
      "endLine": 255
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const errors = [];\n\n    for (let i = 0; i < operations.length; i += concurrency) {",
      "startLine": 255,
      "endLine": 258
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const batch = operations.slice(i, i + concurrency);",
      "startLine": 258,
      "endLine": 259
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const batchPromises = batch.map(async (operation, index) => {\n        try {",
      "startLine": 259,
      "endLine": 261
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const result = await operation();\n          return { success: true, result, index: i + index };\n        } catch (error) {\n          errors.push({ error, index: i + index });\n          if (stopOnError) {\n            throw error;\n          }\n          return { success: false, error: error.message, index: i + index };\n        }\n      });",
      "startLine": 261,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    }\n\n    return { results, errors };\n  },\n\n  withRetry(operation, maxRetries = 3, delay = 1000) {\n    return async (...args) => {",
      "startLine": 272,
      "endLine": 281
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "let lastError;\n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          return await operation(...args);\n        } catch (error) {\n          lastError = error;\n          if (attempt < maxRetries) {\n            await new Promise(resolve => setTimeout(resolve, delay * attempt));\n          }\n        }\n      }\n      throw lastError;\n    };\n  },\n\n  withTimeout(operation, timeoutMs = DEFAULT_PARAMS.timeout) {\n    return async (...args) => {",
      "startLine": 281,
      "endLine": 298
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\n      });\n\n      return Promise.race([\n        operation(...args),\n        timeoutPromise\n      ]);\n    };\n  }\n};",
      "startLine": 298,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export class ToolErrorBoundary {\n  constructor(toolName) {\n    this.toolName = toolName;\n    this.errors = [];\n  }\n\n  async execute(operation) {\n    try {\n      return await operation();\n    } catch (error) {\n      this.errors.push(error);\n      console.error(`Error in ${this.toolName}:`, error);\n\n      if (error instanceof ValidationError) {\n        return createErrorResponse(`Validation Error: ${error.message}`);\n      }\n\n      if (error instanceof ExecutionError) {\n        return createErrorResponse(`Execution Error: ${error.message}`);\n      }\n\n      if (error instanceof SearchError) {\n        return createErrorResponse(`Search Error: ${error.message}`);\n      }\n\n      return createErrorResponse(error.message);\n    }\n  }\n\n  getErrors() {\n    return this.errors;\n  }\n\n  clearErrors() {\n    this.errors = [];\n  }\n}",
      "startLine": 310,
      "endLine": 348
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-hooks.js",
      "content": "export function createErrorBoundary(toolName) {\n  return new ToolErrorBoundary(toolName);\n}",
      "startLine": 348,
      "endLine": 350
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "// Shared utilities module - extracted from duplicate functions across the codebase\nimport { existsSync, statSync } from 'fs';\nimport * as path from 'node:path';\n\n// Default ignore patterns used across multiple modules",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "export function getDefaultIgnorePatterns() {\n  return [\n    'node_modules/**',\n    '.git/**',\n    'dist/**',\n    'build/**',\n    '*.log',\n    '*.tmp',\n    '.env*',\n    'coverage/**',\n    '.next/**',\n    '.nuxt/**',\n    '.out/**',\n    'target/**',        // Rust/Java\n    'vendor/**',        // PHP/Go\n    'packages/**',      // Monorepos\n    '**/test/**',       // Test files\n    '**/*.test.*',      // Test files\n    '**/*.spec.*',      // Test files\n    '**/*.min.*',       // Minified files\n    '**/bundle.*',      // Bundle files\n    '**/coverage/**',   // Coverage reports\n    '**/.cache/**',     // Cache directories\n    '**/.temp/**',      // Temp directories\n    '**/temp/**',       // Temp directories\n    '**/tmp/**',        // Temp directories\n    '**/docs/**',       // Documentation\n    '**/*.md',          // Markdown files\n    '**/*.txt',         // Text files\n    '**/*.json',        // JSON files (config)\n    '**/*.yaml',        // YAML files\n    '**/*.yml',         // YAML files\n    '**/*.toml',        // TOML files\n    '**/package.json',  // Package configs\n    '**/tsconfig.json', // TypeScript configs\n    '**/jest.config.*', // Test configs\n    '**/webpack.config.*', // Build configs\n    '**/vite.config.*', // Build configs\n  ];\n}\n\n// Tool response creation - standardized across all tools",
      "startLine": 5,
      "endLine": 47
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "export function createToolResponse(data, startTime, context = {}) {\n  return {\n    success: true,\n    executionTimeMs: Date.now() - startTime,\n    ...data,\n    ...context\n  };\n}\n\n// Error response creation - standardized across all tools",
      "startLine": 47,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "export function createErrorResponse(error, startTime, context = {}) {\n  return {\n    success: false,\n    error: error?.message || error || 'Unknown error occurred',\n    executionTimeMs: Date.now() - startTime,\n    ...context\n  };\n}\n\n// Parameter validation - standardized across all tools",
      "startLine": 57,
      "endLine": 67
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "export function validateRequiredParams(args, requiredParams, startTime) {",
      "startLine": 67,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "const missingParams = requiredParams.filter(param => !args[param]);\n  if (missingParams.length > 0) {\n    return createErrorResponse(\n      new Error(`Missing required parameters: ${missingParams.join(', ')}`),\n      startTime\n    );\n  }\n  return null;\n}\n\n// Working directory validation - used by multiple tools",
      "startLine": 68,
      "endLine": 79
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "export function validateWorkingDirectory(workingDirectory, defaultWorkingDir) {\n  if (!workingDirectory) {\n    return {\n      valid: false,\n      error: 'workingDirectory parameter is required for this operation',\n      effectiveDir: null\n    };\n  }\n\n  try {",
      "startLine": 79,
      "endLine": 89
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "const resolvedPath = path.resolve(workingDirectory);\n\n    if (!existsSync(resolvedPath)) {\n      return {\n        valid: false,\n        error: `Working directory '${workingDirectory}' does not exist`,\n        effectiveDir: null\n      };\n    }",
      "startLine": 89,
      "endLine": 99
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/shared-utils.js",
      "content": "const stats = statSync(resolvedPath);\n    if (!stats.isDirectory()) {\n      return {\n        valid: false,\n        error: `Path '${workingDirectory}' is not a directory`,\n        effectiveDir: null\n      };\n    }\n\n    return {\n      valid: true,\n      effectiveDir: resolvedPath\n    };\n  } catch (error) {\n    return {\n      valid: false,\n      error: `Error accessing working directory: ${error.message}`,\n      effectiveDir: null\n    };\n  }\n}",
      "startLine": 99,
      "endLine": 119
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "import fs from 'fs';",
      "startLine": 0,
      "endLine": 1
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "import path from 'path';\n\n// Enhanced step file analysis tools for MCP v3.1.4 compatibility",
      "startLine": 1,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "class StepFileAnalyzer {\n  constructor() {\n    this.supportedTestTypes = ['component-analysis', 'optimization', 'refactoring', 'ui-generation'];\n  }\n\n  async analyzeStepFile(filePath) {\n    try {",
      "startLine": 4,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const content = fs.readFileSync(filePath, 'utf8');",
      "startLine": 11,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const data = JSON.parse(content);\n\n      return {\n        success: true,\n        filePath,\n        analysis: this.extractStepInsights(data),\n        metadata: this.extractMetadata(data),\n        performance: this.calculatePerformanceMetrics(data)\n      };\n    } catch (error) {\n      return {\n        success: false,\n        filePath,\n        error: error.message\n      };\n    }\n  }\n\n  extractMetadata(data) {\n    return {\n      timestamp: data.timestamp,\n      session_id: data.session_id,\n      model: data.model,\n      tools: data.tools || [],\n      mcp_servers: data.mcp_servers || [],\n      permission_mode: data.permissionMode,\n      total_steps: data.stepData?.length || 0\n    };\n  }\n\n  calculatePerformanceMetrics(data) {\n    if (!data.stepData || data.stepData.length === 0) {\n      return null;\n    }",
      "startLine": 12,
      "endLine": 47
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const steps = data.stepData;",
      "startLine": 47,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const duration = this.calculateDuration(steps);",
      "startLine": 48,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolUsage = this.analyzeToolUsage(steps);",
      "startLine": 49,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const errorAnalysis = this.analyzeErrors(steps);",
      "startLine": 50,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const agentBehavior = this.analyzeAgentBehavior(steps);\n\n    return {\n      duration,\n      toolUsage,\n      errorAnalysis,\n      agentBehavior,\n      efficiency: this.calculateEfficiency(steps, toolUsage)\n    };\n  }\n\n  calculateDuration(steps) {\n    if (steps.length < 2) return 0;",
      "startLine": 51,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const start = new Date(steps[0].timestamp);",
      "startLine": 65,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const end = new Date(steps[steps.length - 1].timestamp);\n    return (end - start) / 1000; // Convert to seconds\n  }\n\n  analyzeToolUsage(steps) {",
      "startLine": 66,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolUsage = {};",
      "startLine": 71,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolSuccess = {};",
      "startLine": 72,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolChains = [];\n\n    steps.forEach((step, index) => {\n      if (step.type === 'assistant' && step.message?.content) {\n        step.message.content.forEach(content => {\n          if (content.type === 'tool_use') {",
      "startLine": 73,
      "endLine": 79
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolName = content.name;\n            toolUsage[toolName] = (toolUsage[toolName] || 0) + 1;\n\n            // Track tool chains (sequential tool usage)\n            if (index > 0) {",
      "startLine": 79,
      "endLine": 84
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const prevStep = steps[index - 1];\n              if (prevStep.type === 'assistant' && prevStep.message?.content) {\n                prevStep.message.content.forEach(prevContent => {\n                  if (prevContent.type === 'tool_use') {\n                    toolChains.push(`${prevContent.name} -> ${toolName}`);\n                  }\n                });\n              }\n            }\n          }\n        });\n      }\n\n      // Track success rates\n      if (step.type === 'user' && step.message?.content) {\n        step.message.content.forEach(content => {\n          if (content.type === 'tool_result' && content.tool_use_id) {",
      "startLine": 84,
      "endLine": 101
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const isSuccess = !content.content?.is_error;\n            toolSuccess[content.tool_use_id] = isSuccess;\n          }\n        });\n      }\n    });\n\n    return {\n      usage: toolUsage,\n      success: toolSuccess,\n      chains: toolChains,\n      totalTools: Object.keys(toolUsage).length,\n      mostUsed: Object.entries(toolUsage)\n        .sort(([,a], [,b]) => b - a)[0]?.[0] || null\n    };\n  }\n\n  analyzeErrors(steps) {",
      "startLine": 101,
      "endLine": 119
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const errors = [];",
      "startLine": 119,
      "endLine": 120
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const warnings = [];\n\n    steps.forEach((step, index) => {\n      if (step.type === 'user' && step.message?.content) {\n        step.message.content.forEach(content => {\n          if (content.type === 'tool_result' && content.content?.is_error) {\n            errors.push({\n              step: index,\n              tool_use_id: content.tool_use_id,\n              error: content.content\n            });\n          }\n        });\n      }\n\n      // Detect potential issues\n      if (step.type === 'assistant' && step.message?.content) {",
      "startLine": 120,
      "endLine": 137
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolUses = step.message.content.filter(c => c.type === 'tool_use');\n        if (toolUses.length > 5) {\n          warnings.push({\n            step: index,\n            issue: 'High tool usage in single step',\n            count: toolUses.length\n          });\n        }\n      }\n    });\n\n    return {\n      errors,\n      warnings,\n      errorRate: errors.length / steps.length,\n      hasCriticalErrors: errors.length > 0\n    };\n  }\n\n  analyzeAgentBehavior(steps) {",
      "startLine": 137,
      "endLine": 157
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const behavior = {\n      averageResponseTime: 0,\n      responseTimes: [],\n      toolDiversity: 0,\n      strategicPauses: 0,\n      adaptationEvents: 0\n    };",
      "startLine": 157,
      "endLine": 165
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let lastTimestamp = null;\n    steps.forEach(step => {\n      if (step.timestamp) {",
      "startLine": 165,
      "endLine": 168
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const timestamp = new Date(step.timestamp);\n        if (lastTimestamp) {",
      "startLine": 168,
      "endLine": 170
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const timeDiff = (timestamp - lastTimestamp) / 1000;\n          behavior.responseTimes.push(timeDiff);\n\n          if (timeDiff > 10) { // Strategic pause threshold\n            behavior.strategicPauses++;\n          }\n        }\n        lastTimestamp = timestamp;\n      }\n    });\n\n    if (behavior.responseTimes.length > 0) {\n      behavior.averageResponseTime = behavior.responseTimes.reduce((a, b) => a + b, 0) / behavior.responseTimes.length;\n    }\n\n    return behavior;\n  }\n\n  calculateEfficiency(steps, toolUsage) {",
      "startLine": 170,
      "endLine": 189
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const totalSteps = steps.length;",
      "startLine": 189,
      "endLine": 190
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolSteps = steps.filter(step =>\n      step.type === 'assistant' && step.message?.content?.some(c => c.type === 'tool_use')\n    ).length;\n\n    return {\n      stepEfficiency: toolSteps / totalSteps,\n      toolDiversity: Object.keys(toolUsage.usage).length,\n      averageToolsPerStep: toolSteps / Math.max(toolSteps, 1),\n      successRate: Object.values(toolUsage.success).filter(Boolean).length / Math.max(Object.keys(toolUsage.success).length, 1)\n    };\n  }\n\n  extractStepInsights(data) {",
      "startLine": 190,
      "endLine": 203
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const insights = {\n      workflowPattern: this.identifyWorkflowPattern(data),\n      toolStrategy: this.identifyToolStrategy(data),\n      agentExperience: this.evaluateAgentExperience(data),\n      recommendations: this.generateRecommendations(data)\n    };\n\n    return insights;\n  }\n\n  identifyWorkflowPattern(data) {",
      "startLine": 203,
      "endLine": 214
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const steps = data.stepData || [];",
      "startLine": 214,
      "endLine": 215
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const pattern = {\n      type: 'unknown',\n      phases: [],\n      characteristics: []\n    };\n\n    // Analyze step sequence to identify patterns",
      "startLine": 215,
      "endLine": 222
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const assistantSteps = steps.filter(s => s.type === 'assistant');",
      "startLine": 222,
      "endLine": 223
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const userSteps = steps.filter(s => s.type === 'user');\n\n    if (assistantSteps.length > userSteps.length) {\n      pattern.type = 'agent-driven';\n      pattern.characteristics.push('high-autonomy');\n    } else {\n      pattern.type = 'collaborative';\n      pattern.characteristics.push('balanced-interaction');\n    }\n\n    // Identify phases",
      "startLine": 223,
      "endLine": 234
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let currentPhase = 'initialization';",
      "startLine": 234,
      "endLine": 235
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let phaseStart = 0;\n\n    steps.forEach((step, index) => {\n      if (step.type === 'assistant' && step.message?.content) {",
      "startLine": 235,
      "endLine": 239
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const content = step.message.content.find(c => c.type === 'text');\n        if (content && content.text.toLowerCase().includes('analyze')) {\n          if (currentPhase !== 'analysis') {\n            if (index > phaseStart) {\n              pattern.phases.push({\n                type: currentPhase,\n                start: phaseStart,\n                end: index - 1,\n                steps: index - phaseStart\n              });\n            }\n            currentPhase = 'analysis';\n            phaseStart = index;\n          }\n        }\n      }\n    });\n\n    // Add final phase\n    pattern.phases.push({\n      type: currentPhase,\n      start: phaseStart,\n      end: steps.length - 1,\n      steps: steps.length - phaseStart\n    });\n\n    return pattern;\n  }\n\n  identifyToolStrategy(data) {",
      "startLine": 239,
      "endLine": 269
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const steps = data.stepData || [];",
      "startLine": 269,
      "endLine": 270
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const toolUsage = this.analyzeToolUsage(steps);\n\n    return {\n      preferredTools: Object.entries(toolUsage.usage)\n        .sort(([,a], [,b]) => b - a)\n        .slice(0, 5)\n        .map(([tool, count]) => ({ tool, count })),\n      strategy: this.categorizeStrategy(toolUsage),\n      effectiveness: toolUsage.success && Object.keys(toolUsage.success).length > 0\n        ? Object.values(toolUsage.success).filter(Boolean).length / Object.keys(toolUsage.success).length\n        : 0\n    };\n  }\n\n  categorizeStrategy(toolUsage) {",
      "startLine": 270,
      "endLine": 285
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const usage = toolUsage.usage;",
      "startLine": 285,
      "endLine": 286
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const totalTools = Object.keys(usage).length;",
      "startLine": 286,
      "endLine": 287
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const totalUses = Object.values(usage).reduce((a, b) => a + b, 0);\n\n    if (totalTools === 1) return 'specialized';\n    if (totalTools > 10) return 'exploratory';\n    if (totalUses / totalTools > 3) return 'iterative';\n    return 'balanced';\n  }\n\n  evaluateAgentExperience(data) {",
      "startLine": 287,
      "endLine": 296
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const steps = data.stepData || [];",
      "startLine": 296,
      "endLine": 297
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const performance = this.calculatePerformanceMetrics(data);\n\n    return {\n      efficiency: performance?.efficiency?.stepEfficiency || 0,\n      adaptability: this.calculateAdaptability(steps),\n      problemSolving: this.assessProblemSolving(steps),\n      collaboration: this.assessCollaboration(steps)\n    };\n  }\n\n  calculateAdaptability(steps) {\n    // Measure how well the agent adapts to tool results",
      "startLine": 297,
      "endLine": 309
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let adaptationScore = 0;",
      "startLine": 309,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let adaptationEvents = 0;\n\n    steps.forEach((step, index) => {\n      if (step.type === 'user' && step.message?.content) {\n        step.message.content.forEach(content => {\n          if (content.type === 'tool_result' && !content.content?.is_error) {\n            // Check if next assistant step shows adaptation\n            if (index < steps.length - 1) {",
      "startLine": 310,
      "endLine": 318
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const nextStep = steps[index + 1];\n              if (nextStep.type === 'assistant' && nextStep.message?.content) {",
      "startLine": 318,
      "endLine": 320
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const textContent = nextStep.message.content.find(c => c.type === 'text');\n                if (textContent && (textContent.text.toLowerCase().includes('based on') ||\n                                  textContent.text.toLowerCase().includes('therefore'))) {\n                  adaptationEvents++;\n                  adaptationScore += 1;\n                }\n              }\n            }\n          }\n        });\n      }\n    });\n\n    return adaptationEvents > 0 ? adaptationScore / adaptationEvents : 0;\n  }\n\n  assessProblemSolving(steps) {\n    // Assess problem-solving capabilities",
      "startLine": 320,
      "endLine": 338
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let problemSolvingScore = 0;",
      "startLine": 338,
      "endLine": 339
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let problemSolvingEvents = 0;\n\n    steps.forEach(step => {\n      if (step.type === 'assistant' && step.message?.content) {",
      "startLine": 339,
      "endLine": 343
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const textContent = step.message.content.find(c => c.type === 'text');\n        if (textContent) {",
      "startLine": 343,
      "endLine": 345
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const text = textContent.text.toLowerCase();\n          if (text.includes('analyze') || text.includes('investigate') || text.includes('examine')) {\n            problemSolvingEvents++;\n            problemSolvingScore += 1;\n          }\n          if (text.includes('solution') || text.includes('fix') || text.includes('resolve')) {\n            problemSolvingEvents++;\n            problemSolvingScore += 2;\n          }\n        }\n      }\n    });\n\n    return problemSolvingEvents > 0 ? problemSolvingScore / problemSolvingEvents : 0;\n  }\n\n  assessCollaboration(steps) {\n    // Assess collaboration with user",
      "startLine": 345,
      "endLine": 363
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let collaborationScore = 0;",
      "startLine": 363,
      "endLine": 364
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "let collaborationEvents = 0;\n\n    steps.forEach(step => {\n      if (step.type === 'assistant' && step.message?.content) {",
      "startLine": 364,
      "endLine": 368
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const textContent = step.message.content.find(c => c.type === 'text');\n        if (textContent) {",
      "startLine": 368,
      "endLine": 370
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const text = textContent.text.toLowerCase();\n          if (text.includes('recommend') || text.includes('suggest') || text.includes('would you like')) {\n            collaborationEvents++;\n            collaborationScore += 1;\n          }\n        }\n      }\n    });\n\n    return collaborationEvents > 0 ? collaborationScore / collaborationEvents : 0;\n  }\n\n  generateRecommendations(data) {",
      "startLine": 370,
      "endLine": 383
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const performance = this.calculatePerformanceMetrics(data);",
      "startLine": 383,
      "endLine": 384
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const recommendations = [];\n\n    if (performance?.errorAnalysis?.hasCriticalErrors) {\n      recommendations.push({\n        type: 'error-handling',\n        priority: 'high',\n        message: 'Improve error handling and validation for critical operations'\n      });\n    }\n\n    if (performance?.efficiency?.stepEfficiency < 0.7) {\n      recommendations.push({\n        type: 'efficiency',\n        priority: 'medium',\n        message: 'Optimize step efficiency by reducing unnecessary operations'\n      });\n    }\n\n    if (performance?.toolUsage?.totalTools > 15) {\n      recommendations.push({\n        type: 'tool-usage',\n        priority: 'medium',\n        message: 'Consider consolidating tool usage to reduce complexity'\n      });\n    }\n\n    return recommendations;\n  }\n\n  async compareBaselineVsMCP(baselineFile, mcpFile) {\n    try {",
      "startLine": 384,
      "endLine": 415
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const baselineData = JSON.parse(fs.readFileSync(baselineFile, 'utf8'));",
      "startLine": 415,
      "endLine": 416
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const mcpData = JSON.parse(fs.readFileSync(mcpFile, 'utf8'));",
      "startLine": 416,
      "endLine": 418
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const baselineAnalysis = await this.analyzeStepFile(baselineFile);",
      "startLine": 418,
      "endLine": 419
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const mcpAnalysis = await this.analyzeStepFile(mcpFile);\n\n      return {\n        comparison: {\n          duration: {\n            baseline: baselineAnalysis.performance?.duration || 0,\n            mcp: mcpAnalysis.performance?.duration || 0,\n            improvement: baselineAnalysis.performance?.duration && mcpAnalysis.performance?.duration\n              ? ((baselineAnalysis.performance.duration - mcpAnalysis.performance.duration) / baselineAnalysis.performance.duration * 100)\n              : 0\n          },\n          steps: {\n            baseline: baselineAnalysis.metadata?.total_steps || 0,\n            mcp: mcpAnalysis.metadata?.total_steps || 0,\n            reduction: baselineAnalysis.metadata?.total_steps && mcpAnalysis.metadata?.total_steps\n              ? baselineAnalysis.metadata.total_steps - mcpAnalysis.metadata.total_steps\n              : 0\n          },\n          toolUsage: {\n            baseline: baselineAnalysis.performance?.toolUsage?.totalTools || 0,\n            mcp: mcpAnalysis.performance?.toolUsage?.totalTools || 0,\n            difference: mcpAnalysis.performance?.toolUsage?.totalTools - baselineAnalysis.performance?.toolUsage?.totalTools || 0\n          },\n          errorRate: {\n            baseline: baselineAnalysis.performance?.errorAnalysis?.errorRate || 0,\n            mcp: mcpAnalysis.performance?.errorAnalysis?.errorRate || 0,\n            improvement: baselineAnalysis.performance?.errorAnalysis && mcpAnalysis.performance?.errorAnalysis\n              ? ((baselineAnalysis.performance.errorAnalysis.errorRate - mcpAnalysis.performance.errorAnalysis.errorRate) / baselineAnalysis.performance.errorAnalysis.errorRate * 100)\n              : 0\n          }\n        },\n        insights: {\n          mcpAdvantages: this.identifyMCPAdvantages(baselineAnalysis, mcpAnalysis),\n          baselineAdvantages: this.identifyBaselineAdvantages(baselineAnalysis, mcpAnalysis),\n          recommendations: this.generateComparativeRecommendations(baselineAnalysis, mcpAnalysis)\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  identifyMCPAdvantages(baselineAnalysis, mcpAnalysis) {",
      "startLine": 419,
      "endLine": 465
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const advantages = [];\n\n    if (mcpAnalysis.performance?.duration < baselineAnalysis.performance?.duration) {\n      advantages.push('Faster execution time');\n    }\n\n    if (mcpAnalysis.performance?.efficiency?.stepEfficiency > baselineAnalysis.performance?.efficiency?.stepEfficiency) {\n      advantages.push('Higher step efficiency');\n    }\n\n    if (mcpAnalysis.performance?.errorAnalysis?.errorRate < baselineAnalysis.performance?.errorAnalysis?.errorRate) {\n      advantages.push('Lower error rate');\n    }\n\n    return advantages;\n  }\n\n  identifyBaselineAdvantages(baselineAnalysis, mcpAnalysis) {",
      "startLine": 465,
      "endLine": 483
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const advantages = [];\n\n    if (baselineAnalysis.performance?.toolUsage?.totalTools < mcpAnalysis.performance?.toolUsage?.totalTools) {\n      advantages.push('Simpler tool usage');\n    }\n\n    if (baselineAnalysis.metadata?.total_steps < mcpAnalysis.metadata?.total_steps) {\n      advantages.push('Fewer steps required');\n    }\n\n    return advantages;\n  }\n\n  generateComparativeRecommendations(baselineAnalysis, mcpAnalysis) {",
      "startLine": 483,
      "endLine": 497
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const recommendations = [];\n\n    // Analyze which approach performs better in different areas\n    if (mcpAnalysis.performance?.duration < baselineAnalysis.performance?.duration) {\n      recommendations.push('Use MCP approach for time-sensitive tasks');\n    }\n\n    if (baselineAnalysis.performance?.errorAnalysis?.errorRate < mcpAnalysis.performance?.errorAnalysis?.errorRate) {\n      recommendations.push('Use baseline approach for error-critical tasks');\n    }\n\n    return recommendations;\n  }\n}",
      "startLine": 497,
      "endLine": 512
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "export const stepAnalysisTools = [\n  {\n    name: \"analyze_step_file\",\n    description: \"Comprehensive analysis of step files for agent experience evaluation and performance insights.\",\n    supported_operations: [\"step analysis\", \"performance metrics\", \"agent behavior\", \"error analysis\"],\n    use_cases: [\"Analyze agent workflow patterns\", \"Evaluate tool usage efficiency\", \"Identify performance bottlenecks\", \"Compare agent strategies\"],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        filePath: {\n          type: \"string\",\n          description: \"Path to the step file to analyze\"\n        },\n        workingDirectory: {\n          type: \"string\",\n          description: \"Working directory for file resolution\"\n        }\n      },\n      required: [\"filePath\", \"workingDirectory\"]\n    },\n    handler: async (args) => {",
      "startLine": 512,
      "endLine": 533
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const analyzer = new StepFileAnalyzer();",
      "startLine": 533,
      "endLine": 534
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const fullPath = path.resolve(args.workingDirectory, args.filePath);\n\n      if (!fs.existsSync(fullPath)) {\n        throw new Error(`Step file not found: ${fullPath}`);\n      }",
      "startLine": 534,
      "endLine": 540
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const result = await analyzer.analyzeStepFile(fullPath);\n      return result;\n    }\n  },\n  {\n    name: \"compare_baseline_mcp\",\n    description: \"Compare baseline and MCP step files to evaluate performance improvements and agent experience differences.\",\n    supported_operations: [\"performance comparison\", \"efficiency analysis\", \"agent experience comparison\"],\n    use_cases: [\"Evaluate MCP effectiveness\", \"Identify improvement areas\", \"Compare tool usage patterns\", \"Analyze agent behavior differences\"],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        baselineFile: {\n          type: \"string\",\n          description: \"Path to baseline step file\"\n        },\n        mcpFile: {\n          type: \"string\",\n          description: \"Path to MCP step file\"\n        },\n        workingDirectory: {\n          type: \"string\",\n          description: \"Working directory for file resolution\"\n        }\n      },\n      required: [\"baselineFile\", \"mcpFile\", \"workingDirectory\"]\n    },\n    handler: async (args) => {",
      "startLine": 540,
      "endLine": 568
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const analyzer = new StepFileAnalyzer();",
      "startLine": 568,
      "endLine": 569
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const baselinePath = path.resolve(args.workingDirectory, args.baselineFile);",
      "startLine": 569,
      "endLine": 570
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const mcpPath = path.resolve(args.workingDirectory, args.mcpFile);\n\n      if (!fs.existsSync(baselinePath)) {\n        throw new Error(`Baseline file not found: ${baselinePath}`);\n      }\n\n      if (!fs.existsSync(mcpPath)) {\n        throw new Error(`MCP file not found: ${mcpPath}`);\n      }",
      "startLine": 570,
      "endLine": 580
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const result = await analyzer.compareBaselineVsMCP(baselinePath, mcpPath);\n      return result;\n    }\n  },\n  {\n    name: \"analyze_performance_data\",\n    description: \"Analyze comprehensive performance data from MCP test results including multiple test categories.\",\n    supported_operations: [\"performance analysis\", \"statistical insights\", \"trend analysis\"],\n    use_cases: [\"Analyze overall MCP performance\", \"Identify trends across test types\", \"Generate performance reports\", \"Evaluate agent effectiveness\"],\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        performanceFile: {\n          type: \"string\",\n          description: \"Path to performance data JSON file\"\n        },\n        workingDirectory: {\n          type: \"string\",\n          description: \"Working directory for file resolution\"\n        }\n      },\n      required: [\"performanceFile\", \"workingDirectory\"]\n    },\n    handler: async (args) => {",
      "startLine": 580,
      "endLine": 604
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const fullPath = path.resolve(args.workingDirectory, args.performanceFile);\n\n      if (!fs.existsSync(fullPath)) {\n        throw new Error(`Performance file not found: ${fullPath}`);\n      }\n\n      try {",
      "startLine": 604,
      "endLine": 611
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const data = JSON.parse(fs.readFileSync(fullPath, 'utf8'));",
      "startLine": 611,
      "endLine": 612
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const analyzer = new StepFileAnalyzer();",
      "startLine": 612,
      "endLine": 614
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const analysis = {\n          overall: {\n            totalTests: data.performance?.tests?.length || 0,\n            version: data.version,\n            timestamp: data.timestamp,\n            systemInfo: data.systemInfo\n          },\n          testResults: data.performance?.tests?.map(test => ({\n            name: test.name,\n            category: test.category,\n            baseline: {\n              duration: test.baseline?.duration || 0,\n              success: test.baseline?.success || false,\n              steps: test.baseline?.parsedOutput?.stepData?.length || 0\n            },\n            mcp: {\n              duration: test.mcp?.duration || 0,\n              success: test.mcp?.success || false,\n              steps: test.mcp?.parsedOutput?.stepData?.length || 0\n            },\n            improvement: {\n              duration: test.baseline?.duration && test.mcp?.duration\n                ? ((test.baseline.duration - test.mcp.duration) / test.baseline.duration * 100)\n                : 0,\n              steps: test.baseline?.parsedOutput?.stepData?.length && test.mcp?.parsedOutput?.stepData?.length\n                ? test.baseline.parsedOutput.stepData.length - test.mcp.parsedOutput.stepData.length\n                : 0\n            }\n          })) || [],\n          insights: {\n            averageImprovement: data.performance?.tests?.reduce((acc, test) => {",
      "startLine": 614,
      "endLine": 645
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const improvement = test.baseline?.duration && test.mcp?.duration\n                ? ((test.baseline.duration - test.mcp.duration) / test.baseline.duration * 100)\n                : 0;\n              return acc + improvement;\n            }, 0) / (data.performance?.tests?.length || 1),\n            bestPerformingCategory: data.performance?.tests?.reduce((best, test) => {",
      "startLine": 645,
      "endLine": 651
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const improvement = test.baseline?.duration && test.mcp?.duration\n                ? ((test.baseline.duration - test.mcp.duration) / test.baseline.duration * 100)\n                : 0;\n              return improvement > (best?.improvement || -Infinity) ? { ...test, improvement } : best;\n            }, null),\n            worstPerformingCategory: data.performance?.tests?.reduce((worst, test) => {",
      "startLine": 651,
      "endLine": 657
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "const improvement = test.baseline?.duration && test.mcp?.duration\n                ? ((test.baseline.duration - test.mcp.duration) / test.baseline.duration * 100)\n                : 0;\n              return improvement < (worst?.improvement || Infinity) ? { ...test, improvement } : worst;\n            }, null)\n          }\n        };\n\n        return analysis;\n      } catch (error) {\n        throw new Error(`Failed to analyze performance data: ${error.message}`);\n      }\n    }\n  }\n];",
      "startLine": 657,
      "endLine": 673
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/step-analysis-tools.js",
      "content": "export default stepAnalysisTools;",
      "startLine": 673,
      "endLine": 673
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "import fs from 'fs';",
      "startLine": 0,
      "endLine": 1
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "import path from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport { dirname } from 'path';",
      "startLine": 1,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "import ignore from 'ignore';\r\nimport { createMCPResponse } from './mcp-pagination.js';\r\n\r\n// Fix for ES modules",
      "startLine": 4,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const __filename = fileURLToPath(import.meta.url);",
      "startLine": 8,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const __dirname = dirname(__filename);",
      "startLine": 9,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "class UnifiedASTHelper {\r\n  constructor(language = 'javascript') {\r\n    this.language = language;\r\n    this.astGrep = null;\r\n    this.registeredLanguages = new Set();\r\n    this.initializeASTGrep();\r\n  }\r\n\r\n  detectLanguageFromExtension(filePath) {",
      "startLine": 11,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const ext = path.extname(filePath).toLowerCase();",
      "startLine": 20,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const extensionMap = {\r\n      '.js': 'javascript',\r\n      '.jsx': 'jsx',\r\n      '.ts': 'typescript',\r\n      '.tsx': 'tsx',\r\n      '.go': 'go',\r\n      '.rs': 'rust',\r\n      '.py': 'python',\r\n      '.c': 'c',\r\n      '.cpp': 'cpp',\r\n      '.cc': 'cpp',\r\n      '.cxx': 'cpp',\r\n      '.html': 'html',\r\n      '.css': 'css'\r\n    };\r\n    return extensionMap[ext] || 'javascript';\r\n  }\r\n\r\n  setLanguage(language) {\r\n    if (language !== 'javascript' && language !== 'typescript' &&\r\n        language !== 'jsx' && language !== 'tsx' &&\r\n        language !== 'html' && language !== 'css' &&\r\n        !this.registeredLanguages.has(language)) {\r\n      throw new Error(`Language '${language}' is not available. Install @ast-grep/lang-${language} to add support.`);\r\n    }\r\n    this.language = language;\r\n  }\r\n\r\n  async initializeASTGrep() {\r\n    try {\r\n      const { parse, Lang, registerDynamicLanguage } = await import('@ast-grep/napi');\r\n      this.parse = parse;\r\n      this.Lang = Lang;\r\n      this.registerDynamicLanguage = registerDynamicLanguage;\r\n      this.astGrep = { parse, Lang, registerDynamicLanguage };\r\n      await this.registerAdditionalLanguages();\r\n    } catch (error) {\r\n      console.warn('ast-grep not available, using fallback pattern matching');\r\n      this.astGrep = null;\r\n    }\r\n  }\r\n\r\n  async registerAdditionalLanguages() {",
      "startLine": 21,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const languagePackages = [\r\n      { name: 'go', package: '@ast-grep/lang-go', key: 'Go' },\r\n      { name: 'rust', package: '@ast-grep/lang-rust', key: 'Rust' },\r\n      { name: 'python', package: '@ast-grep/lang-python', key: 'Python' },\r\n      { name: 'c', package: '@ast-grep/lang-c', key: 'C' },\r\n      { name: 'cpp', package: '@ast-grep/lang-cpp', key: 'Cpp' }\r\n    ];\r\n\r\n    for (const { name, package: packageName, key } of languagePackages) {\r\n      try {",
      "startLine": 64,
      "endLine": 74
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const langModule = await import(packageName);\r\n        this.registerDynamicLanguage({ [key]: langModule.default });\r\n        this.registeredLanguages.add(name);\r\n      } catch (error) {\r\n        this.availableLanguages = this.availableLanguages || new Set();\r\n        this.availableLanguages.delete(name);\r\n      }\r\n    }\r\n  }\r\n\r\n  async parseCode(code) {\r\n    if (!this.astGrep) {\r\n      throw new Error('ast-grep not available');\r\n    }\r\n\r\n    try {\r\n      const { parse, Lang } = this.astGrep;",
      "startLine": 74,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let lang = Lang.JavaScript;",
      "startLine": 91,
      "endLine": 93
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const languageMap = {\r\n        'javascript': Lang.JavaScript,\r\n        'typescript': Lang.TypeScript,\r\n        'jsx': Lang.JSX || Lang.JavaScript,\r\n        'tsx': Lang.TSX || Lang.TypeScript,\r\n        'html': Lang.Html,\r\n        'css': Lang.Css,\r\n        'go': 'Go',\r\n        'rust': 'Rust',\r\n        'python': 'Python',\r\n        'c': 'C',\r\n        'cpp': 'Cpp'\r\n      };\r\n\r\n      if (languageMap[this.language]) {\r\n        if (this.language !== 'javascript' && this.language !== 'typescript' &&\r\n            this.language !== 'jsx' && this.language !== 'tsx' &&\r\n            this.language !== 'html' && this.language !== 'css' &&\r\n            !this.registeredLanguages.has(this.language)) {\r\n          throw new Error(`Language '${this.language}' is not available. Install @ast-grep/lang-${this.language} to add support.`);\r\n        }\r\n        lang = languageMap[this.language];\r\n      } else {\r\n        console.warn(`Unknown language: ${this.language}, defaulting to JavaScript`);\r\n      }\r\n\r\n      return parse(lang, code);\r\n    } catch (error) {\r\n      throw new Error(`Failed to parse ${this.language} code: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async analyzeCode(code, analysisType = 'basic') {\r\n    if (!this.astGrep) {\r\n      return `Lightweight analysis: ${this.language} code (${code.length} chars)\r\nQuick structure check complete - no deep AST parsing needed`;\r\n    }\r\n\r\n    try {",
      "startLine": 93,
      "endLine": 132
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 132,
      "endLine": 133
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const root = ast.root();\r\n\r\n      if (analysisType === 'basic') {\r\n        return this.performBasicAnalysis(code, root);\r\n      } else if (analysisType === 'detailed') {\r\n        return this.performDetailedAnalysis(code, root);\r\n      }\r\n    } catch (error) {\r\n      return `Lightweight analysis: ${this.language} code (${code.length} chars)\r\nQuick structure check complete - no deep AST parsing needed`;\r\n    }\r\n  }\r\n\r\n  performBasicAnalysis(code, root) {",
      "startLine": 133,
      "endLine": 147
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const info = {\r\n      language: this.language,\r\n      nodes: 0,\r\n      functions: 0,\r\n      classes: 0,\r\n      imports: 0,\r\n      exports: 0,\r\n      variables: 0,\r\n      size: code.length\r\n    };",
      "startLine": 147,
      "endLine": 158
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const helper = new ASTGrepHelper(this.language);",
      "startLine": 158,
      "endLine": 159
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const patterns = [\r\n      { type: 'function', pattern: 'function $NAME($ARGS) { $BODY }' },\r\n      { type: 'arrow', pattern: 'const $NAME = ($ARGS) => { $BODY }' },\r\n      { type: 'class', pattern: 'class $NAME { $MEMBERS }' },\r\n      { type: 'import', pattern: 'import $IMPORTS from \\'$MODULE\\'' },\r\n      { type: 'export', pattern: 'export $STATEMENT' },\r\n      { type: 'variable', pattern: 'const $NAME = $VALUE' }\r\n    ];\r\n\r\n    for (const { type, pattern } of patterns) {\r\n      try {",
      "startLine": 159,
      "endLine": 170
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = helper.searchPatternSync(code, pattern);\r\n        if (type === 'function' || type === 'arrow') {\r\n          info.functions += matches.length;\r\n        } else if (type === 'class') {\r\n          info.classes += matches.length;\r\n        } else if (type === 'import') {\r\n          info.imports += matches.length;\r\n        } else if (type === 'export') {\r\n          info.exports += matches.length;\r\n        } else if (type === 'variable') {\r\n          info.variables += matches.length;\r\n        }\r\n        info.nodes += matches.length;\r\n      } catch (error) {\r\n        // Skip failed patterns\r\n      }\r\n    }\r\n\r\n    return `📊 Code Analysis - ${this.language} (${info.size} chars):\r\n├─ Functions: ${info.functions}\r\n├─ Classes: ${info.classes}\r\n├─ Variables: ${info.variables}\r\n├─ Imports: ${info.imports}\r\n└─ Exports: ${info.exports}`;\r\n  }\r\n\r\n  performDetailedAnalysis(code, root) {",
      "startLine": 170,
      "endLine": 197
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const basic = this.performBasicAnalysis(code, root);",
      "startLine": 197,
      "endLine": 198
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let details = '\\n\\n🔍 Detailed Analysis:\\n';\r\n\r\n    // Add more detailed analysis based on language\r\n    if (this.language === 'javascript' || this.language === 'typescript') {\r\n      details += this.analyzeJavaScriptPatterns(code);\r\n    } else if (this.language === 'python') {\r\n      details += this.analyzePythonPatterns(code);\r\n    }\r\n\r\n    return basic + details;\r\n  }\r\n\r\n  analyzeJavaScriptPatterns(code) {",
      "startLine": 198,
      "endLine": 211
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const patterns = [\r\n      { name: 'React Components', pattern: 'React\\\\.forwardRef|class.*extends.*Component|function.*\\\\(.*\\\\).*return.*<', type: 'react' },\r\n      { name: 'Async Functions', pattern: 'async function|const.*= async', type: 'async' },\r\n      { name: 'Promises', pattern: '\\\\.then\\\\(|\\\\.catch\\\\(|new Promise', type: 'promise' },\r\n      { name: 'Template Literals', pattern: '`[^`]*`', type: 'template' },\r\n      { name: 'Destructuring', pattern: 'const.*{.*}|\\\\(.*{.*}\\\\)', type: 'destructure' }\r\n    ];",
      "startLine": 211,
      "endLine": 219
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let analysis = '';\r\n    for (const { name, pattern, type } of patterns) {",
      "startLine": 219,
      "endLine": 221
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = (code.match(new RegExp(pattern, 'g')) || []).length;\r\n      if (matches > 0) {\r\n        analysis += `├─ ${name}: ${matches}\\n`;\r\n      }\r\n    }\r\n\r\n    return analysis;\r\n  }\r\n\r\n  analyzePythonPatterns(code) {",
      "startLine": 221,
      "endLine": 231
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const patterns = [\r\n      { name: 'Classes', pattern: '^class\\\\s+', type: 'class' },\r\n      { name: 'Functions', pattern: '^def\\\\s+', type: 'function' },\r\n      { name: 'Async Functions', pattern: '^async def\\\\s+', type: 'async' },\r\n      { name: 'Decorators', pattern: '@\\\\w+', type: 'decorator' },\r\n      { name: 'Type Hints', pattern: ':\\\\s*[A-Z]\\\\w*|->\\\\s*[A-Z]\\\\w*', type: 'types' }\r\n    ];",
      "startLine": 231,
      "endLine": 239
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let analysis = '';\r\n    for (const { name, pattern, type } of patterns) {",
      "startLine": 239,
      "endLine": 241
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = (code.match(new RegExp(pattern, 'gm')) || []).length;\r\n      if (matches > 0) {\r\n        analysis += `├─ ${name}: ${matches}\\n`;\r\n      }\r\n    }\r\n\r\n    return analysis;\r\n  }\r\n\r\n  async searchPattern(code, pattern) {\r\n    if (!this.astGrep) {",
      "startLine": 241,
      "endLine": 252
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');",
      "startLine": 252,
      "endLine": 253
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = [];",
      "startLine": 253,
      "endLine": 254
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let match;\r\n      while ((match = regex.exec(code)) !== null) {\r\n        matches.push({\r\n          text: match[0],\r\n          start: match.index,\r\n          end: match.index + match[0].length,\r\n          line: this.getLineFromPosition(code, match.index),\r\n          column: this.getColumnFromPosition(code, match.index)\r\n        });\r\n      }\r\n      return matches;\r\n    }\r\n\r\n    try {",
      "startLine": 254,
      "endLine": 268
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 268,
      "endLine": 269
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const root = ast.root();",
      "startLine": 269,
      "endLine": 270
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const node = root.find(pattern);\r\n\r\n      if (!node) return [];",
      "startLine": 270,
      "endLine": 274
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const range = node.range();\r\n      return [{\r\n        text: node.text(),\r\n        start: range.start.index,\r\n        end: range.end.index,\r\n        line: range.start.line,\r\n        column: range.start.column\r\n      }];\r\n    } catch (error) {\r\n      throw new Error(`Pattern search failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async replacePattern(code, pattern, replacement) {\r\n    if (!this.astGrep) {",
      "startLine": 274,
      "endLine": 289
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');\r\n      return code.replace(regex, replacement);\r\n    }\r\n\r\n    try {",
      "startLine": 289,
      "endLine": 294
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const ast = await this.parseCode(code);",
      "startLine": 294,
      "endLine": 295
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const root = ast.root();",
      "startLine": 295,
      "endLine": 296
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const node = root.find(pattern);\r\n\r\n      if (!node) return code;",
      "startLine": 296,
      "endLine": 300
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const edit = node.replace(replacement);\r\n      return root.commitEdits([edit]);\r\n    } catch (error) {\r\n      throw new Error(`Pattern replacement failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  searchPatternSync(code, pattern) {\r\n    if (!this.astGrep) {",
      "startLine": 300,
      "endLine": 309
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');",
      "startLine": 309,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = [];",
      "startLine": 310,
      "endLine": 311
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let match;\r\n      while ((match = regex.exec(code)) !== null) {\r\n        matches.push({\r\n          text: match[0],\r\n          start: match.index,\r\n          end: match.index + match[0].length\r\n        });\r\n      }\r\n      return matches;\r\n    }\r\n\r\n    // Fallback to async version\r\n    return this.searchPattern(code, pattern);\r\n  }\r\n\r\n  escapeRegex(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n\r\n  getLineFromPosition(code, position) {",
      "startLine": 311,
      "endLine": 331
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const before = code.substring(0, position);\r\n    return before.split('\\n').length - 1;\r\n  }\r\n\r\n  getColumnFromPosition(code, position) {",
      "startLine": 331,
      "endLine": 336
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const before = code.substring(0, position);",
      "startLine": 336,
      "endLine": 337
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const lastNewline = before.lastIndexOf('\\n');\r\n    return lastNewline === -1 ? position : position - lastNewline - 1;\r\n  }\r\n}\r\n\r\n// Helper class for sync operations (needed for internal use)",
      "startLine": 337,
      "endLine": 343
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "class ASTGrepHelper {\r\n  constructor(language = 'javascript') {\r\n    this.language = language;\r\n  }\r\n\r\n  searchPatternSync(code, pattern) {",
      "startLine": 343,
      "endLine": 349
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const regex = new RegExp(this.escapeRegex(pattern), 'g');",
      "startLine": 349,
      "endLine": 350
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = [];",
      "startLine": 350,
      "endLine": 351
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let match;\r\n    while ((match = regex.exec(code)) !== null) {\r\n      matches.push({\r\n        text: match[0],\r\n        start: match.index,\r\n        end: match.index + match[0].length\r\n      });\r\n    }\r\n    return matches;\r\n  }\r\n\r\n  escapeRegex(string) {\r\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n  }\r\n}",
      "startLine": 351,
      "endLine": 367
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "export async function unifiedASTOperation(operation, options = {}) {\r\n  const {\r\n    path: targetPathParam = '.',\r\n    pattern,\r\n    replacement,\r\n    code,\r\n    language = 'javascript',\r\n    analysisType = 'basic',\r\n    rules = [],\r\n    recursive = true,\r\n    maxResults = 100,\r\n    backup = true,\r\n    workingDirectory = process.cwd()\r\n  } = options;",
      "startLine": 367,
      "endLine": 382
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const helper = new UnifiedASTHelper(language);",
      "startLine": 382,
      "endLine": 383
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const targetPath = targetPathParam.startsWith('.') ? path.resolve(workingDirectory || __dirname, targetPathParam) : targetPathParam;\r\n\r\n  // Validate path exists\r\n  if (!fs.existsSync(targetPath)) {\r\n    throw new Error(`Path not found: ${targetPath}`);\r\n  }\r\n\r\n  switch (operation) {\r\n    case 'analyze':\r\n      return await performAnalysis(helper, targetPath, code, analysisType, language);\r\n\r\n    case 'search':\r\n      return await performSearch(helper, targetPath, pattern, recursive, maxResults);\r\n\r\n    case 'replace':\r\n      return await performReplace(helper, targetPath, pattern, replacement, recursive, backup);\r\n\r\n    case 'lint':\r\n      return await performLint(helper, targetPath, rules, recursive);\r\n\r\n    default:\r\n      throw new Error(`Unknown operation: ${operation}`);\r\n  }\r\n}\r\n\r\nasync function performAnalysis(helper, targetPath, code, analysisType, language) {\r\n  if (code) {\r\n    // Analyze provided code directly\r\n    return await helper.analyzeCode(code, analysisType);\r\n  } else if (fs.statSync(targetPath).isFile()) {\r\n    // Analyze file content",
      "startLine": 383,
      "endLine": 414
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const content = fs.readFileSync(targetPath, 'utf8');\r\n    helper.setLanguage(helper.detectLanguageFromExtension(targetPath));\r\n    return await helper.analyzeCode(content, analysisType);\r\n  } else {\r\n    // Analyze directory",
      "startLine": 414,
      "endLine": 419
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const files = await findFiles(targetPath, { recursive: true });",
      "startLine": 419,
      "endLine": 420
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const results = [];\r\n\r\n    for (const file of files) {\r\n      try {",
      "startLine": 420,
      "endLine": 424
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const content = fs.readFileSync(file, 'utf8');\r\n        helper.setLanguage(helper.detectLanguageFromExtension(file));",
      "startLine": 424,
      "endLine": 426
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const analysis = await helper.analyzeCode(content, analysisType);\r\n        results.push({ file, analysis });\r\n      } catch (error) {\r\n        results.push({ file, error: error.message });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n\r\nasync function performSearch(helper, targetPath, pattern, recursive, maxResults) {",
      "startLine": 426,
      "endLine": 438
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const results = [];",
      "startLine": 438,
      "endLine": 440
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const processFile = async (file) => {\r\n    try {",
      "startLine": 440,
      "endLine": 442
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const content = fs.readFileSync(file, 'utf8');\r\n      helper.setLanguage(helper.detectLanguageFromExtension(file));",
      "startLine": 442,
      "endLine": 444
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = await helper.searchPattern(content, pattern);\r\n\r\n      return matches.map(match => ({\r\n        file,\r\n        content: match.text,\r\n        line: match.line,\r\n        column: match.column,\r\n        start: match.start,\r\n        end: match.end\r\n      }));\r\n    } catch (error) {\r\n      return [{ file, error: error.message }];\r\n    }\r\n  };\r\n\r\n  if (fs.statSync(targetPath).isDirectory()) {",
      "startLine": 444,
      "endLine": 460
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const files = await findFiles(targetPath, { recursive });\r\n    for (const file of files.slice(0, maxResults)) {",
      "startLine": 460,
      "endLine": 462
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const fileResults = await processFile(file);\r\n      results.push(...fileResults);\r\n    }\r\n  } else {",
      "startLine": 462,
      "endLine": 466
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const fileResults = await processFile(targetPath);\r\n    results.push(...fileResults);\r\n  }\r\n\r\n  return {\r\n    success: true,\r\n    results: results.filter(r => !r.error),\r\n    errors: results.filter(r => r.error),\r\n    totalMatches: results.filter(r => !r.error).length,\r\n    pattern,\r\n    path: targetPath\r\n  };\r\n}\r\n\r\nasync function performReplace(helper, targetPath, pattern, replacement, recursive, backup) {",
      "startLine": 466,
      "endLine": 481
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const results = [];",
      "startLine": 481,
      "endLine": 483
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const processFile = async (file) => {\r\n    try {",
      "startLine": 483,
      "endLine": 485
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const content = fs.readFileSync(file, 'utf8');\r\n\r\n      if (backup) {",
      "startLine": 485,
      "endLine": 488
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const backupPath = file + '.backup';\r\n        fs.writeFileSync(backupPath, content);\r\n      }\r\n\r\n      helper.setLanguage(helper.detectLanguageFromExtension(file));",
      "startLine": 488,
      "endLine": 493
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const newContent = await helper.replacePattern(content, pattern, replacement);\r\n\r\n      if (newContent !== content) {\r\n        fs.writeFileSync(file, newContent);\r\n        return { file, status: 'modified', changes: true };\r\n      } else {\r\n        return { file, status: 'unchanged', changes: false };\r\n      }\r\n    } catch (error) {\r\n      return { file, error: error.message, status: 'failed' };\r\n    }\r\n  };\r\n\r\n  if (fs.statSync(targetPath).isDirectory()) {",
      "startLine": 493,
      "endLine": 507
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const files = await findFiles(targetPath, { recursive });\r\n    for (const file of files) {",
      "startLine": 507,
      "endLine": 509
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const result = await processFile(file);\r\n      results.push(result);\r\n    }\r\n  } else {",
      "startLine": 509,
      "endLine": 513
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const result = await processFile(targetPath);\r\n    results.push(result);\r\n  }\r\n\r\n  return {\r\n    success: true,\r\n    results,\r\n    modifiedFiles: results.filter(r => r.changes).length,\r\n    totalFiles: results.length,\r\n    pattern,\r\n    replacement,\r\n    path: targetPath\r\n  };\r\n}\r\n\r\nasync function performLint(helper, targetPath, rules, recursive) {",
      "startLine": 513,
      "endLine": 529
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const effectiveRules = rules.length > 0 ? rules : getDefaultLintRules();",
      "startLine": 529,
      "endLine": 530
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const results = [];",
      "startLine": 530,
      "endLine": 532
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const processFile = async (file) => {\r\n    try {",
      "startLine": 532,
      "endLine": 534
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const content = fs.readFileSync(file, 'utf8');",
      "startLine": 534,
      "endLine": 535
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const issues = [];\r\n\r\n      helper.setLanguage(helper.detectLanguageFromExtension(file));\r\n      for (const rule of effectiveRules) {",
      "startLine": 535,
      "endLine": 539
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const matches = await helper.searchPattern(content, rule.pattern);\r\n\r\n        matches.forEach(match => {\r\n          issues.push({\r\n            file,\r\n            rule: rule.name,\r\n            message: rule.message || `Pattern \"${rule.pattern}\" matched`,\r\n            severity: rule.severity || 'warning',\r\n            line: match.line,\r\n            column: match.column,\r\n            content: match.text\r\n          });\r\n        });\r\n      }\r\n\r\n      return issues;\r\n    } catch (error) {\r\n      return [{ file, error: error.message }];\r\n    }\r\n  };\r\n\r\n  if (fs.statSync(targetPath).isDirectory()) {",
      "startLine": 539,
      "endLine": 561
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const files = await findFiles(targetPath, { recursive });\r\n    for (const file of files) {",
      "startLine": 561,
      "endLine": 563
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const fileIssues = await processFile(file);\r\n      results.push(...fileIssues);\r\n    }\r\n  } else {",
      "startLine": 563,
      "endLine": 567
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const fileIssues = await processFile(targetPath);\r\n    results.push(...fileIssues);\r\n  }\r\n\r\n  return {\r\n    success: true,\r\n    results: results.filter(r => !r.error),\r\n    errors: results.filter(r => r.error),\r\n    totalIssues: results.filter(r => !r.error).length,\r\n    rules: effectiveRules.length,\r\n    path: targetPath\r\n  };\r\n}\r\n\r\nasync function findFiles(dir, options = {}) {\r\n  const {\r\n    recursive = true,\r\n    extensions = ['.js', '.ts', '.jsx', '.tsx', '.py', '.go', '.rs', '.c', '.cpp'],\r\n    ignorePatterns = [],\r\n    useGitignore = true\r\n  } = options;",
      "startLine": 567,
      "endLine": 589
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const results = [];",
      "startLine": 589,
      "endLine": 590
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const allPatterns = [\r\n    ...getDefaultIgnorePatterns(),\r\n    ...(useGitignore ? loadGitignorePatterns(dir) : []),\r\n    ...ignorePatterns\r\n  ];",
      "startLine": 590,
      "endLine": 596
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const ig = ignore();\r\n  ig.add(allPatterns);",
      "startLine": 596,
      "endLine": 599
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const scan = async (currentDir) => {",
      "startLine": 599,
      "endLine": 600
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const entries = fs.readdirSync(currentDir, { withFileTypes: true });\r\n\r\n    for (const entry of entries) {",
      "startLine": 600,
      "endLine": 603
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const fullPath = path.join(currentDir, entry.name);",
      "startLine": 603,
      "endLine": 605
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let shouldIgnore = false;\r\n      if (fullPath.startsWith(dir)) {",
      "startLine": 605,
      "endLine": 607
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const relativePath = path.relative(dir, fullPath);\r\n        shouldIgnore = ig.ignores(relativePath) || ig.ignores(entry.name);\r\n      }\r\n\r\n      if (shouldIgnore) continue;\r\n\r\n      if (entry.isDirectory() && recursive) {\r\n        await scan(fullPath);\r\n      } else if (entry.isFile()) {\r\n        if (extensions.some(ext => fullPath.endsWith(ext))) {\r\n          results.push(fullPath);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  await scan(dir);\r\n  return results;\r\n}",
      "startLine": 607,
      "endLine": 627
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function getDefaultIgnorePatterns() {\r\n  return [\r\n    '**/node_modules/**', '**/.git/**', '**/.next/**', '**/.nuxt/**',\r\n    '**/.vuepress/**', '**/.docusaurus/**', '**/dist/**', '**/build/**',\r\n    '**/out/**', '**/coverage/**', '**/.nyc_output/**', '**/.cache/**',\r\n    '**/.parcel-cache/**', '**/.turbo/**', '**/.nx/**', '**/.swc/**',\r\n    '**/bower_components/**', '**/jspm_packages/**', '**/.pnp/**',\r\n    '**/__tests__/**', '**/__mocks__/**', '**/__snapshots__/**',\r\n    '**/.jest/**', '**/.mocha/**', '**/.cypress/**', '**/.playwright/**',\r\n    '**/*.min.js', '**/*.bundle.js', '**/*.chunk.js', '**/package-lock.json',\r\n    '**/yarn.lock', '**/pnpm-lock.yaml', '**/.npmrc', '**/.yarnrc',\r\n    '**/*.log', '**/tmp/**', '**/temp/**', '**/.tmp/**', '**/.DS_Store',\r\n    '**/Thumbs.db'\r\n  ];\r\n}",
      "startLine": 626,
      "endLine": 641
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function loadGitignorePatterns(dir) {",
      "startLine": 643,
      "endLine": 644
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const gitignorePath = path.join(dir, '.gitignore');",
      "startLine": 644,
      "endLine": 645
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const patterns = [];\r\n\r\n  if (fs.existsSync(gitignorePath)) {\r\n    try {",
      "startLine": 645,
      "endLine": 649
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const content = fs.readFileSync(gitignorePath, 'utf8');",
      "startLine": 649,
      "endLine": 650
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const lines = content.split('\\n')\r\n        .map(line => line.trim())\r\n        .filter(line => line && !line.startsWith('#'));\r\n      patterns.push(...lines);\r\n    } catch (error) {\r\n      console.warn(`Failed to read .gitignore: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  return patterns;\r\n}",
      "startLine": 650,
      "endLine": 662
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function getDefaultLintRules() {\r\n  return [\r\n    {\r\n      name: 'no-console-log',\r\n      pattern: 'console.log($$)',\r\n      message: 'Avoid using console.log in production code',\r\n      severity: 'warning'\r\n    },\r\n    {\r\n      name: 'no-debugger',\r\n      pattern: 'debugger',\r\n      message: 'Remove debugger statements',\r\n      severity: 'error'\r\n    },\r\n    {\r\n      name: 'no-var',\r\n      pattern: 'var $A',\r\n      message: 'Use let or const instead of var',\r\n      severity: 'warning'\r\n    }\r\n  ];\r\n}",
      "startLine": 661,
      "endLine": 683
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "// Create the unified AST tool",
      "startLine": 683,
      "endLine": 686
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "export const UNIFIED_AST_TOOL = {\r\n  name: 'ast_tool',\r\n  description: 'Unified AST operations - analyze, search, replace, and lint code structures. Consolidates parse_ast, astgrep_search, astgrep_replace, and astgrep_lint into one powerful tool.',\r\n  supported_operations: [\r\n    'code analysis', 'pattern search', 'structural replacement',\r\n    'code quality linting', 'syntax validation', 'refactoring',\r\n    'API migration', 'pattern detection', 'code transformation'\r\n  ],\r\n  use_cases: [\r\n    'Analyze code structure and complexity',\r\n    'Find specific code patterns across files',\r\n    'Safely refactor code patterns',\r\n    'Enforce coding standards',\r\n    'Modernize syntax and APIs',\r\n    'Detect anti-patterns and issues'\r\n  ],\r\n  examples: [\r\n    'ast_tool(operation=\"analyze\", path=\"./src\") - Analyze all files in src directory',\r\n    'ast_tool(operation=\"search\", pattern=\"const $NAME = ($ARGS) => { $BODY }\") - Find arrow functions',\r\n    'ast_tool(operation=\"replace\", pattern=\"var $NAME\", replacement=\"let $NAME\") - Replace var with let',\r\n    'ast_tool(operation=\"lint\", path=\"./src\", rules=[custom rules]) - Lint code with custom rules'\r\n  ],\r\n  inputSchema: {\r\n    type: 'object',\r\n    properties: {\r\n      operation: {\r\n        type: 'string',\r\n        enum: ['analyze', 'search', 'replace', 'lint'],\r\n        description: 'AST operation to perform'\r\n      },\r\n      path: {\r\n        type: 'string',\r\n        description: 'File or directory path (default: current directory)'\r\n      },\r\n      pattern: {\r\n        type: 'string',\r\n        description: 'AST pattern for search/replace operations (use $VARIABLE wildcards)'\r\n      },\r\n      replacement: {\r\n        type: 'string',\r\n        description: 'Replacement pattern for replace operations'\r\n      },\r\n      code: {\r\n        type: 'string',\r\n        description: 'Code to analyze (optional - reads from file if not provided)'\r\n      },\r\n      language: {\r\n        type: 'string',\r\n        enum: ['javascript', 'typescript', 'jsx', 'tsx', 'python', 'go', 'rust', 'c', 'cpp'],\r\n        default: 'javascript',\r\n        description: 'Programming language'\r\n      },\r\n      analysisType: {\r\n        type: 'string',\r\n        enum: ['basic', 'detailed'],\r\n        default: 'basic',\r\n        description: 'Analysis depth for analyze operations'\r\n      },\r\n      rules: {\r\n        type: 'array',\r\n        description: 'Custom linting rules for lint operations',\r\n        items: {\r\n          type: 'object',\r\n          properties: {\r\n            name: { type: 'string' },\r\n            pattern: { type: 'string' },\r\n            message: { type: 'string' },\r\n            severity: { type: 'string', enum: ['error', 'warning'] }\r\n          }\r\n        }\r\n      },\r\n      recursive: {\r\n        type: 'boolean',\r\n        default: true,\r\n        description: 'Process files recursively in directories'\r\n      },\r\n      maxResults: {\r\n        type: 'number',\r\n        default: 100,\r\n        description: 'Maximum results for search operations'\r\n      },\r\n      backup: {\r\n        type: 'boolean',\r\n        default: true,\r\n        description: 'Create backup files for replace operations'\r\n      },\r\n      workingDirectory: {\r\n        type: 'string',\r\n        description: 'Working directory for file operations'\r\n      },\r\n      cursor: {\r\n        type: 'string',\r\n        description: 'Pagination cursor for search and lint operations'\r\n      },\r\n      pageSize: {\r\n        type: 'number',\r\n        default: 50,\r\n        description: 'Number of results per page for paginated operations'\r\n      }\r\n    },\r\n    required: ['operation']\r\n  },\r\n  handler: async (args) => {\r\n    try {\r\n      // For search and lint operations, use pagination\r\n      if (args.operation === 'search' || args.operation === 'lint') {",
      "startLine": 686,
      "endLine": 792
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const result = await unifiedASTOperation(args.operation, args);\r\n\r\n        // Convert result to array if it's not already",
      "startLine": 792,
      "endLine": 795
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const results = Array.isArray(result) ? result : (result.results || []);\r\n\r\n        // Apply pagination\r\n        return createMCPResponse(results, {\r\n          cursor: args.cursor,\r\n          pageSize: args.pageSize,\r\n          metadata: {\r\n            operation: args.operation,\r\n            path: args.path,\r\n            pattern: args.pattern,\r\n            timestamp: new Date().toISOString()\r\n          }\r\n        });\r\n      }\r\n\r\n      // For other operations, use existing formatting",
      "startLine": 795,
      "endLine": 811
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const result = await unifiedASTOperation(args.operation, args);\r\n      switch (args.operation) {\r\n        case 'analyze':\r\n          return formatAnalysisResult(result, args);\r\n        case 'replace':\r\n          return formatReplaceResult(result, args);\r\n        default:\r\n          return result;\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        operation: args.operation\r\n      };\r\n    }\r\n  }\r\n};",
      "startLine": 811,
      "endLine": 830
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function formatAnalysisResult(result, args) {\r\n  if (Array.isArray(result)) {\r\n    // Directory analysis",
      "startLine": 830,
      "endLine": 833
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const successful = result.filter(r => !r.error);",
      "startLine": 833,
      "endLine": 834
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const failed = result.filter(r => r.error);",
      "startLine": 834,
      "endLine": 836
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let output = `📊 Code Analysis Complete - ${successful.length} files analyzed\\n\\n`;\r\n\r\n    if (successful.length > 0) {\r\n      output += '✅ Successfully analyzed:\\n';\r\n      successful.slice(0, 5).forEach(item => {\r\n        output += `├─ ${item.file}\\n`;\r\n      });\r\n      if (successful.length > 5) {\r\n        output += `└─ ... and ${successful.length - 5} more files\\n`;\r\n      }\r\n    }\r\n\r\n    if (failed.length > 0) {\r\n      output += `\\n❌ Failed to analyze:\\n`;\r\n      failed.forEach(item => {\r\n        output += `├─ ${item.file}: ${item.error}\\n`;\r\n      });\r\n    }\r\n\r\n    return output;\r\n  } else {\r\n    // Single file or code analysis\r\n    return result;\r\n  }\r\n}",
      "startLine": 836,
      "endLine": 862
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function formatSearchResult(result, args) {\r\n  if (!result.success) {\r\n    return `❌ Search failed: ${result.error}\\n\\nCheck pattern syntax and ensure files exist in search path.`;\r\n  }\r\n\r\n  if (result.totalMatches === 0) {\r\n    return `❌ No matches found for pattern: \"${args.pattern}\"\\n\\nTry simplifying pattern or check actual code structure.`;\r\n  }",
      "startLine": 862,
      "endLine": 871
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let output = `🔍 Found ${result.totalMatches} matches for pattern: \"${args.pattern}\"\\n\\n`;\r\n\r\n  result.results.slice(0, 10).forEach((match, i) => {\r\n    output += `${i + 1}. ${match.file}:${match.line}\\n`;\r\n    output += `   ${match.content}\\n\\n`;\r\n  });\r\n\r\n  if (result.totalMatches > 10) {\r\n    output += `... and ${result.totalMatches - 10} more matches\\n`;\r\n  }\r\n\r\n  return output;\r\n}",
      "startLine": 871,
      "endLine": 885
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function formatReplaceResult(result, args) {\r\n  if (!result.success) {\r\n    return `❌ Replace failed: ${result.error}\\n\\nCheck pattern syntax, replacement validity, and file permissions.`;\r\n  }\r\n\r\n  if (result.modifiedFiles === 0) {\r\n    return `⚠️ No changes made - pattern \"${args.pattern}\" found no matches to replace\\n\\nVerify pattern matches actual code structure.`;\r\n  }\r\n\r\n  return `✅ Successfully replaced pattern in ${result.modifiedFiles} of ${result.totalFiles} files\\n\\n` +\r\n         `📋 Replacement details:\\n` +\r\n         `• Pattern: \"${args.pattern}\"\\n` +\r\n         `• Replacement: \"${args.replacement}\"\\n` +\r\n         `• Files modified: ${result.modifiedFiles}\\n` +\r\n         `• Backups created: ${args.backup ? 'Yes' : 'No'}\\n\\n` +\r\n         `⚠️ Review changes carefully. Backup files created if enabled.`;\r\n}",
      "startLine": 884,
      "endLine": 901
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "function formatLintResult(result, args) {\r\n  if (!result.success) {\r\n    return `❌ Lint failed: ${result.error}\\n\\nCheck target path and rule formatting.`;\r\n  }\r\n\r\n  if (result.totalIssues === 0) {\r\n    return `✅ No issues found - code passed all ${result.rules} linting rules\\n\\n` +\r\n           `📋 Linting summary:\\n` +\r\n           `• Rules applied: ${result.rules}\\n` +\r\n           `• Files scanned: Multiple files in ${args.path}\\n` +\r\n           `• Issues found: 0\\n\\n` +\r\n           `🎉 Your code meets quality standards!`;\r\n  }",
      "startLine": 903,
      "endLine": 917
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "let output = `🔍 Found ${result.totalIssues} issues across ${result.rules} linting rules:\\n\\n`;\r\n\r\n  result.results.forEach((issue, i) => {\r\n    output += `${i + 1}. ${issue.severity.toUpperCase()}: ${issue.message}\\n`;\r\n    output += `   📁 ${issue.file}:${issue.line}\\n`;\r\n    output += `   💻 ${issue.content}\\n`;\r\n    output += `   📋 Rule: ${issue.rule}\\n\\n`;\r\n  });",
      "startLine": 917,
      "endLine": 926
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const errorCount = result.results.filter(r => r.severity === 'error').length;",
      "startLine": 926,
      "endLine": 927
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "const warningCount = result.results.filter(r => r.severity === 'warning').length;\r\n\r\n  output += `📊 Summary:\\n` +\r\n            `• Total issues: ${result.totalIssues}\\n` +\r\n            `• Errors: ${errorCount}\\n` +\r\n            `• Warnings: ${warningCount}\\n` +\r\n            `• Rules applied: ${result.rules}\\n\\n` +\r\n            `💡 Focus on errors first, then address warnings.`;\r\n\r\n  return output;\r\n}",
      "startLine": 927,
      "endLine": 939
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-ast-tool.js",
      "content": "export default UNIFIED_AST_TOOL;",
      "startLine": 939,
      "endLine": 939
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "import { spawn, execSync } from 'child_process';\r\nimport { validateWorkingDirectory } from './utilities.js';",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "import fs from 'fs';",
      "startLine": 2,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "import path from 'path';",
      "startLine": 3,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "import os from 'os';",
      "startLine": 4,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createErrorResponse(error, startTime, context = {}) {\r\n  return {\r\n    success: false,\r\n    error: error?.message || error || 'Unknown error occurred',\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...context\r\n  };\r\n}",
      "startLine": 6,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createSuccessResponse(data, startTime, context = {}) {\r\n  return {\r\n    success: true,\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...data,\r\n    ...context\r\n  };\r\n}",
      "startLine": 15,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createTimeoutError(operation, timeoutMs, startTime) {\r\n  return createErrorResponse(\r\n    `${operation} timed out after ${timeoutMs}ms`,\r\n    startTime,\r\n    { timeout: true, timeoutMs }\r\n  );\r\n}",
      "startLine": 23,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function handleProcessError(error, command, startTime) {",
      "startLine": 32,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let errorMessage = 'Process execution failed';",
      "startLine": 33,
      "endLine": 34
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let errorContext = { command };\r\n\r\n  if (error.code === 'ENOENT') {\r\n    errorMessage = `Command not found: ${command}`;\r\n    errorContext.missingCommand = true;\r\n  } else if (error.code === 'EACCES') {\r\n    errorMessage = `Permission denied executing: ${command}`;\r\n    errorContext.permissionDenied = true;\r\n  } else if (error.signal) {\r\n    errorMessage = `Process terminated with signal: ${error.signal}`;\r\n    errorContext.signal = error.signal;\r\n  } else if (error.code) {\r\n    errorMessage = `Process failed with code: ${error.code}`;\r\n    errorContext.exitCode = error.code;\r\n  }\r\n\r\n  return createErrorResponse(errorMessage, startTime, errorContext);\r\n}",
      "startLine": 34,
      "endLine": 53
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function validateRequiredParams(params, required, startTime) {\r\n  for (const param of required) {\r\n    if (!params[param]) {\r\n      return createErrorResponse(\r\n        `Parameter '${param}' is required`,\r\n        startTime,\r\n        { parameterError: true, parameter: param }\r\n      );\r\n    }\r\n  }\r\n  return null;\r\n}",
      "startLine": 52,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeProcess(command, args = [], options = {}) {",
      "startLine": 66,
      "endLine": 67
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const startTime = Date.now();\r\n  const { timeout = 120000, cwd, input, encoding = 'utf8' } = options;\r\n\r\n  return new Promise((resolve) => {",
      "startLine": 67,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const child = spawn(command, args, {\r\n      cwd,\r\n      stdio: input ? 'pipe' : ['pipe', 'pipe', 'pipe']\r\n    });",
      "startLine": 71,
      "endLine": 76
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let stdout = '';",
      "startLine": 76,
      "endLine": 77
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let stderr = '';",
      "startLine": 77,
      "endLine": 78
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let isResolved = false;",
      "startLine": 78,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const timeoutId = setTimeout(() => {\r\n      if (!isResolved) {\r\n        child.kill('SIGTERM');\r\n        isResolved = true;\r\n        resolve(createTimeoutError(`${command} ${args.join(' ')}`, timeout, startTime));\r\n      }\r\n    }, timeout);\r\n\r\n    if (child.stdout) {\r\n      child.stdout.on('data', (data) => {\r\n        if (data && typeof data === 'object' && Buffer.isBuffer(data)) {\r\n          stdout += data.toString(encoding);\r\n        } else if (data && typeof data === 'string') {\r\n          stdout += data;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (child.stderr) {\r\n      child.stderr.on('data', (data) => {\r\n        if (data && typeof data === 'object' && Buffer.isBuffer(data)) {\r\n          stderr += data.toString(encoding);\r\n        } else if (data && typeof data === 'string') {\r\n          stderr += data;\r\n        }\r\n      });\r\n    }\r\n\r\n    child.on('close', (code, signal) => {\r\n      if (!isResolved) {\r\n        clearTimeout(timeoutId);\r\n        isResolved = true;\r\n\r\n        if (code === 0) {\r\n          resolve(createSuccessResponse({ stdout, stderr, code, signal }, startTime));\r\n        } else {\r\n          resolve(createErrorResponse(\r\n            stderr || `Process exited with code ${code}`,\r\n            startTime,\r\n            { stdout, stderr, code, signal }\r\n          ));\r\n        }\r\n      }\r\n    });\r\n\r\n    child.on('error', (error) => {\r\n      if (!isResolved) {\r\n        clearTimeout(timeoutId);\r\n        isResolved = true;\r\n        resolve(handleProcessError(error, `${command} ${args.join(' ')}`, startTime));\r\n      }\r\n    });\r\n\r\n    if (input && child.stdin) {\r\n      child.stdin.write(input);\r\n      child.stdin.end();\r\n    }\r\n  });\r\n}\r\n\r\n// Unified execution configuration for different languages",
      "startLine": 80,
      "endLine": 141
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const EXECUTION_CONFIGS = {\r\n  nodejs: { command: 'node', args: ['-e'], description: 'Node.js JavaScript' },\r\n  deno: { command: 'deno', args: ['eval', '--no-check'], description: 'Deno JavaScript/TypeScript' },\r\n  bash: { command: 'bash', args: ['-c'], description: 'Bash shell commands' },\r\n  go: { command: 'go', args: ['run'], description: 'Go programming language', requiresFile: true },\r\n  rust: { command: 'rustc', args: [], description: 'Rust programming language', requiresCompile: true },\r\n  python: { command: 'python3', args: ['-c'], description: 'Python programming language' },\r\n  c: { command: 'gcc', args: [], description: 'C programming language', requiresCompile: true },\r\n  cpp: { command: 'g++', args: [], description: 'C++ programming language', requiresCompile: true }\r\n};",
      "startLine": 141,
      "endLine": 152
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeWithRuntime(codeOrCommands, runtime, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;",
      "startLine": 152,
      "endLine": 154
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const config = EXECUTION_CONFIGS[runtime];\r\n\r\n  if (!config) {\r\n    throw new Error(`Unsupported runtime: ${runtime}`);\r\n  }\r\n\r\n  // Handle special cases\r\n  if (runtime === 'bash') {",
      "startLine": 154,
      "endLine": 162
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const commandString = Array.isArray(codeOrCommands) ? codeOrCommands.join(' && ') : codeOrCommands;\r\n    return executeProcess(config.command, [...config.args, commandString], {\r\n      cwd: workingDirectory,\r\n      timeout,\r\n      encoding: 'utf8'\r\n    });\r\n  }\r\n\r\n  if (config.requiresFile) {\r\n    // Go requires temporary file",
      "startLine": 162,
      "endLine": 172
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const tempFile = path.join(os.tmpdir(), `glootie_${runtime}_${Date.now()}.${runtime === 'go' ? 'go' : 'rs'}`);\r\n    try {\r\n      fs.writeFileSync(tempFile, codeOrCommands);\r\n      return executeProcess(config.command, [...config.args, tempFile], {\r\n        cwd: workingDirectory,\r\n        timeout,\r\n        encoding: 'utf8'\r\n      });\r\n    } finally {\r\n      try { fs.unlinkSync(tempFile); } catch (e) {}\r\n    }\r\n  }\r\n\r\n  if (config.requiresCompile) {\r\n    // Languages requiring compilation (Rust, C, C++)",
      "startLine": 172,
      "endLine": 187
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const extensions = { rust: 'rs', c: 'c', cpp: 'cpp' };",
      "startLine": 187,
      "endLine": 188
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const compilers = { rust: 'rustc', c: 'gcc', cpp: 'g++' };",
      "startLine": 188,
      "endLine": 190
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const tempFile = path.join(os.tmpdir(), `glootie_${runtime}_${Date.now()}.${extensions[runtime]}`);",
      "startLine": 190,
      "endLine": 191
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const tempExec = path.join(os.tmpdir(), `glootie_${runtime}_${Date.now()}`);\r\n\r\n    try {\r\n      fs.writeFileSync(tempFile, codeOrCommands);\r\n\r\n      // Compile",
      "startLine": 191,
      "endLine": 197
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const compileResult = await executeProcess(compilers[runtime], [tempFile, '-o', tempExec], {\r\n        cwd: workingDirectory,\r\n        timeout: timeout / 2,\r\n        encoding: 'utf8'\r\n      });\r\n\r\n      if (!compileResult.success) {\r\n        return compileResult;\r\n      }\r\n\r\n      // Execute\r\n      return await executeProcess(tempExec, [], {\r\n        cwd: workingDirectory,\r\n        timeout: timeout / 2,\r\n        encoding: 'utf8'\r\n      });\r\n    } finally {\r\n      try { fs.unlinkSync(tempFile); } catch (e) {}\r\n      try { fs.unlinkSync(tempExec); } catch (e) {}\r\n    }\r\n  }\r\n\r\n  // Simple interpreted languages (Node.js, Deno, Python)\r\n  return executeProcess(config.command, [...config.args, codeOrCommands], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}\r\n\r\n// Legacy functions for backward compatibility",
      "startLine": 197,
      "endLine": 228
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeBashCommands(commands, options = {}) {\r\n  return executeWithRuntime(commands, 'bash', options);\r\n}",
      "startLine": 228,
      "endLine": 232
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeNodeCode(code, options = {}) {\r\n  return executeWithRuntime(code, 'nodejs', options);\r\n}",
      "startLine": 232,
      "endLine": 236
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeDenoCode(code, options = {}) {\r\n  return executeWithRuntime(code, 'deno', options);\r\n}",
      "startLine": 236,
      "endLine": 240
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeBashCommand(commands, timeout = 120000, workingDirectory, defaultWorkingDir) {",
      "startLine": 240,
      "endLine": 241
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const startTime = Date.now();",
      "startLine": 241,
      "endLine": 243
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const paramError = validateRequiredParams({ workingDirectory }, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 243,
      "endLine": 246
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const dirValidation = validateWorkingDirectory(workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }",
      "startLine": 246,
      "endLine": 251
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const effectiveWorkingDir = dirValidation.effectiveDir;",
      "startLine": 251,
      "endLine": 253
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const commandArray = Array.isArray(commands) ? commands : [commands];",
      "startLine": 253,
      "endLine": 255
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const validationResult = validateExecutionContent(commandArray, 'Commands');\r\n  if (!validationResult.valid) {\r\n    return createErrorResponse(validationResult.error, startTime);\r\n  }\r\n\r\n  // Additional bash-specific security validation",
      "startLine": 255,
      "endLine": 261
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const securityValidation = validateBashCommands(commandArray);\r\n  if (!securityValidation.valid) {\r\n    return createErrorResponse(securityValidation.error, startTime);\r\n  }",
      "startLine": 261,
      "endLine": 266
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const result = await executeBashCommands(commands, {\r\n    workingDirectory: dirValidation.effectiveDir,\r\n    timeout\r\n  });\r\n\r\n  return result;\r\n}",
      "startLine": 266,
      "endLine": 274
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export function validateBashCommands(commands) {\r\n  if (!Array.isArray(commands) || commands.length === 0) {\r\n    return {\r\n      valid: false,\r\n      error: \"Commands must be a non-empty array\"\r\n    };\r\n  }\r\n\r\n  for (let i = 0; i < commands.length; i++) {",
      "startLine": 274,
      "endLine": 283
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const command = commands[i];\r\n\r\n    if (typeof command !== 'string') {\r\n      return {\r\n        valid: false,\r\n        error: `Command ${i}: Must be a string`\r\n      };\r\n    }\r\n\r\n    if (command.trim().length === 0) {\r\n      return {\r\n        valid: false,\r\n        error: `Command ${i}: Cannot be empty or whitespace only`\r\n      };\r\n    }",
      "startLine": 283,
      "endLine": 299
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const dangerous = ['rm -rf /', 'sudo rm', 'format', 'mkfs', ':(){ :|:& };:', 'dd if=/dev/zero'];",
      "startLine": 299,
      "endLine": 300
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const lowerCommand = command.toLowerCase();\r\n\r\n    for (const pattern of dangerous) {\r\n      if (lowerCommand.includes(pattern)) {\r\n        return {\r\n          valid: false,\r\n          error: `Command ${i}: Contains potentially dangerous pattern '${pattern}'`\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return { valid: true };\r\n}",
      "startLine": 300,
      "endLine": 315
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createBashScript(commands) {",
      "startLine": 315,
      "endLine": 316
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const scriptLines = [\r\n    '#!/bin/bash',\r\n    'set -e',\r\n    'set -o pipefail',\r\n    '',\r\n    'echo \"=== BASH EXECUTION START ===\"',\r\n    `echo \"Commands to execute: ${commands.length}\"`,\r\n    'echo \"Working directory: $(pwd)\"',\r\n    'echo \"Timestamp: $(date)\"',\r\n    'echo \"\"'\r\n  ];\r\n\r\n  commands.forEach((command, index) => {\r\n    scriptLines.push(`echo \"--- Command ${index + 1}/${commands.length} ---\"`);\r\n    scriptLines.push(`echo \"$ ${command}\"`);\r\n    scriptLines.push(command);\r\n    scriptLines.push('CMD_EXIT_CODE=$?');\r\n    scriptLines.push('if [ $CMD_EXIT_CODE -ne 0 ]; then');\r\n    scriptLines.push(`  echo \"Command ${index + 1} failed with exit code $CMD_EXIT_CODE\" >&2`);\r\n    scriptLines.push('  exit $CMD_EXIT_CODE');\r\n    scriptLines.push('fi');\r\n    scriptLines.push('echo \"\"');\r\n  });\r\n\r\n  scriptLines.push('echo \"=== BASH EXECUTION COMPLETE ===\"');\r\n  scriptLines.push('echo \"All commands completed\"');\r\n\r\n  return scriptLines.join('\\n');\r\n}",
      "startLine": 316,
      "endLine": 346
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export function createToolResponse(content, isError = false) {\r\n  return {\r\n    content: [{ type: \"text\", text: content }],\r\n    isError\r\n  };\r\n}",
      "startLine": 346,
      "endLine": 353
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export function createErrorResponseUtil(message) {\r\n  return createToolResponse(`Error: ${message}`, true);\r\n}\r\n\r\n// Unified validation functions",
      "startLine": 353,
      "endLine": 358
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function validateRequiredParamsUtil(params, requiredParams) {",
      "startLine": 358,
      "endLine": 359
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\r\n  if (missingParams.length > 0) {\r\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\r\n  }\r\n}\r\n\r\n// Unified content validation for different execution types",
      "startLine": 359,
      "endLine": 366
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function validateExecutionContent(content, type) {\r\n  if (!content || (typeof content !== 'string' && !Array.isArray(content))) {\r\n    return { valid: false, error: `${type} must be a non-empty string or array` };\r\n  }\r\n\r\n  if (typeof content === 'string' && content.trim().length === 0) {\r\n    return { valid: false, error: `${type} cannot be empty or whitespace only` };\r\n  }\r\n\r\n  if (Array.isArray(content) && content.length === 0) {\r\n    return { valid: false, error: `${type} array cannot be empty` };\r\n  }\r\n\r\n  if (Array.isArray(content)) {\r\n    for (let i = 0; i < content.length; i++) {",
      "startLine": 366,
      "endLine": 381
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const item = content[i];\r\n      if (typeof item !== 'string') {\r\n        return { valid: false, error: `${type} array item ${i} must be a string` };\r\n      }\r\n      if (item.trim().length === 0) {\r\n        return { valid: false, error: `${type} array item ${i} cannot be empty` };\r\n      }\r\n    }\r\n  }\r\n\r\n  return { valid: true };\r\n}",
      "startLine": 381,
      "endLine": 394
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\r\n  return async (args) => {",
      "startLine": 394,
      "endLine": 396
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\r\n    });\r\n\r\n    try {\r\n      return await Promise.race([\r\n        handler(args),\r\n        timeoutPromise\r\n      ]);\r\n    } catch (error) {\r\n      if (error.message.includes('timed out')) {\r\n        return createErrorResponseUtil(`Tool ${toolName} timed out after ${timeoutMs}ms`);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\n// Language runtime detection cache",
      "startLine": 396,
      "endLine": 415
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "let runtimeCache = null;",
      "startLine": 415,
      "endLine": 417
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export function detectAvailableRuntimes() {\r\n  if (runtimeCache) return runtimeCache;",
      "startLine": 417,
      "endLine": 420
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const runtimes = {\r\n    nodejs: { cmd: 'node --version', available: false, version: null },\r\n    deno: { cmd: 'deno --version', available: false, version: null },\r\n    bash: { cmd: 'bash --version', available: false, version: null },\r\n    go: { cmd: 'go version', available: false, version: null },\r\n    rust: { cmd: 'rustc --version', available: false, version: null },\r\n    python: { cmd: 'python3 --version', available: false, version: null },\r\n    c: { cmd: 'gcc --version', available: false, version: null },\r\n    cpp: { cmd: 'g++ --version', available: false, version: null }\r\n  };\r\n\r\n  for (const [name, config] of Object.entries(runtimes)) {\r\n    try {",
      "startLine": 420,
      "endLine": 433
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const result = execSync(config.cmd, {\r\n        encoding: 'utf8',\r\n        timeout: 3000,\r\n        stdio: 'pipe'\r\n      });\r\n      config.available = true;\r\n      config.version = result.split('\\n')[0].trim();\r\n    } catch (error) {\r\n      config.available = false;\r\n    }\r\n  }\r\n\r\n  runtimeCache = runtimes;\r\n  return runtimes;\r\n}\r\n\r\n// Unified execution with runtime validation",
      "startLine": 433,
      "endLine": 450
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeWithRuntimeValidation(codeOrCommands, runtime, options = {}) {",
      "startLine": 450,
      "endLine": 451
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const startTime = Date.now();\r\n  const { workingDirectory, timeout = 120000 } = options;\r\n\r\n  // Validate runtime availability",
      "startLine": 451,
      "endLine": 455
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const runtimes = detectAvailableRuntimes();",
      "startLine": 455,
      "endLine": 456
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const runtimeInfo = runtimes[runtime];\r\n\r\n  if (!runtimeInfo || !runtimeInfo.available) {",
      "startLine": 456,
      "endLine": 459
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const config = EXECUTION_CONFIGS[runtime];",
      "startLine": 459,
      "endLine": 460
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const errorMessage = `${config.description} runtime not available. Install ${config.command} to use this feature.`;\r\n    return createErrorResponse(errorMessage, startTime);\r\n  }\r\n\r\n  return executeWithRuntime(codeOrCommands, runtime, options);\r\n}\r\n\r\n// Legacy functions for backward compatibility (now using unified approach)",
      "startLine": 460,
      "endLine": 468
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeGoCode(code, options = {}) {\r\n  return executeWithRuntimeValidation(code, 'go', options);\r\n}",
      "startLine": 468,
      "endLine": 472
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executePythonCode(code, options = {}) {\r\n  return executeWithRuntimeValidation(code, 'python', options);\r\n}",
      "startLine": 472,
      "endLine": 476
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeRustCode(code, options = {}) {\r\n  return executeWithRuntimeValidation(code, 'rust', options);\r\n}",
      "startLine": 476,
      "endLine": 480
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeCCode(code, options = {}) {\r\n  return executeWithRuntimeValidation(code, 'c', options);\r\n}",
      "startLine": 480,
      "endLine": 484
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export async function executeCppCode(code, options = {}) {\r\n  return executeWithRuntimeValidation(code, 'cpp', options);\r\n}",
      "startLine": 484,
      "endLine": 488
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "export const executionTools = [\r\n  {\r\n    name: \"execute\",\r\n    description: \"MANDATORY: TEST CODE IDEAS BEFORE IMPLEMENTING THEM - Execute code snippets in any languages (JS/TS, Go, Rust, Python, C, C++) with automatic runtime detection. ALWAYS USE THIS FIRST for: testing hypotheses, validating approaches, prototyping functions, debugging issues. Perfect for 'what if' scenarios before committing to implementation.\",\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        workingDirectory: {\r\n          type: \"string\",\r\n          description: \"REQUIRED: Working directory for execution.\"\r\n        },\r\n        code: {\r\n          type: \"string\",\r\n          description: \"Jcode to execute\"\r\n        },\r\n        commands: {\r\n          type: [\"string\", \"array\"],\r\n          description: \"Bash commands (single or array for planned batch executions)\"\r\n        },\r\n        runtime: {\r\n          type: \"string\",\r\n          enum: [\"nodejs\", \"deno\", \"bash\", \"go\", \"rust\", \"python\", \"c\", \"cpp\", \"auto\"],\r\n          description: \"Execution runtime (default: auto-detect)\"\r\n        },\r\n        timeout: {\r\n          type: \"number\",\r\n          description: \"Timeout in milliseconds (default: 120000)\"\r\n        }\r\n      },\r\n      required: [\"workingDirectory\"]\r\n    },\r\n    handler: createTimeoutToolHandler(async ({ code, commands, workingDirectory, runtime = \"auto\", timeout = 120000 }) => {\r\n      if (code) {",
      "startLine": 488,
      "endLine": 521
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-executor.js",
      "content": "const targetRuntime = runtime === \"auto\" ? \"nodejs\" : runtime;\r\n        return await executeWithRuntimeValidation(code, targetRuntime, { workingDirectory, timeout });\r\n      }\r\n\r\n      if (commands) {\r\n        return await executeWithRuntimeValidation(commands, 'bash', { workingDirectory, timeout });\r\n      }\r\n\r\n      return { content: [{ type: \"text\", text: \"No code or commands provided\" }] };\r\n    }, 'execute', 120000)\r\n  }\r\n];",
      "startLine": 521,
      "endLine": 532
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "#!/usr/bin/env node",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "import fs from 'fs/promises';\nimport { existsSync, readFileSync, writeFileSync, mkdirSync, readdirSync } from 'fs';",
      "startLine": 2,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "import path from 'path';",
      "startLine": 4,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "import os from 'os';",
      "startLine": 5,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "import ignore from 'ignore';",
      "startLine": 6,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const platform = {\n  arch: os.arch(),\n  platform: os.platform(),\n  isARM64: os.arch() === 'arm64',\n  isX64: os.arch() === 'x64',\n  isMacOS: os.platform() === 'darwin',\n  isLinux: os.platform() === 'linux',\n  isWindows: os.platform() === 'win32'\n};",
      "startLine": 8,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const INDEX_DIR = './code_search_index';",
      "startLine": 18,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_MODEL = 'Xenova/all-MiniLM-L6-v2';",
      "startLine": 19,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_DIM = 384; // Dimension size for the chosen model",
      "startLine": 20,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_EXTS = [\n  // JavaScript/TypeScript\n  'js', 'ts', 'jsx', 'tsx',\n  // Go\n  'go',\n  // Rust\n  'rs',\n  // Python\n  'py', 'pyx', 'pyi',\n  // C/C++\n  'c', 'cpp', 'cc', 'cxx', 'h', 'hpp', 'hh', 'hxx',\n  // Additional useful formats\n  'json', 'yaml', 'yml', 'toml', 'md', 'txt'\n];",
      "startLine": 21,
      "endLine": 35
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const DEFAULT_IGNORES = [\n  '**/node_modules/**', '**/.git/**', '**/.node_modules/**',\n  '**/dist/**', '**/build/**', '**/coverage/**', '**/.nyc_output/**',\n  '**/tmp/**', '**/temp/**', '**/.tmp/**', '**/.cache/**', '**/.parcel-cache/**',\n  '**/.next/**', '**/.nuxt/**', '**/.vuepress/**', '**/.docusaurus/**',\n  '**/public/**', '**/static/**', '**/assets/**', '**/images/**', '**/img/**',\n  '**/.vscode/**', '**/.idea/**', '**/.DS_Store/**', '**/Thumbs.db/**',\n  '**/out/**', '**/output/**', '**/generated/**', '**/gen/**',\n  '**/.angular/**', '**/.react/**', '**/.svelte-kit/**',\n  '**/storybook-static/**', '**/docs-build/**', '**/build-docs/**',\n  '**/.vite/**', '**/.turbo/**', '**/.nx/**', '**/.swc/**',\n  '**/bower_components/**', '**/jspm_packages/**', '**/.pnp/**',\n  '**/__tests__/**', '**/__mocks__/**', '**/__snapshots__/**',\n  '**/.jest/**', '**/.mocha/**', '**/.cypress/**', '**/.playwright/**',\n  '**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml',\n  '**/.npmrc', '**/.yarnrc', '**/.pnpmrc',\n  '**/test-*.js', '**/test-*.ts', '**/*.test.js', '**/*.test.ts',\n    '**/optimized-test-*/**',\n  '**/*.spec.js', '**/*.spec.ts', '**/temp-*.js', '**/ab-test-*.js',\n  '**/*.min.js', '**/*.bundle.js', '**/*.chunk.js',\n  // Language-specific ignores\n  '**/target/**', '**/Cargo.lock', // Rust\n  '**/go.sum', '**/vendor/**', // Go\n  '**/__pycache__/**', '**/*.pyc', '**/venv/**', '**/env/**', '**/.env/**', // Python\n  '**/CMakeCache.txt', '**/CMakeFiles/**', '**/*.o', '**/*.a', '**/*.so', // C/C++\n  '**/*.log', '**/*.xml', '**/*.csv',\n  '**/*.png', '**/*.jpg', '**/*.jpeg', '**/*.gif', '**/*.svg', '**/*.ico',\n  '**/*.pdf', '**/*.zip', '**/*.tar', '**/*.gz', '**/*.7z', '**/*.dmg',\n  '**/*.exe', '**/*.dll', '**/*.so', '**/*.dylib',\n  '**/coverage/**', '**/reports/**', '**/docs/**', '**/documentation/**'\n];",
      "startLine": 35,
      "endLine": 67
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_FILE_SIZE = 1024 * 1024; // 1MB for regular files",
      "startLine": 67,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_LARGE_FILE_SIZE = 5 * 1024 * 1024; // 5MB for large files",
      "startLine": 68,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_LINES_PER_CHUNK = 500; // Maximum lines per code chunk",
      "startLine": 69,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const MAX_CACHE_SIZE = 1000; // Maximum number of cached embeddings",
      "startLine": 70,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const INDEX_FILE = 'code_index.json';",
      "startLine": 72,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const VECTOR_INDEX_FILE = 'vector_index.json';",
      "startLine": 73,
      "endLine": 75
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const platformConfig = {\n  memoryLimit: platform.isARM64 ? 1024 * 1024 * 1024 : 512 * 1024 * 1024, // 1GB for ARM64, 512MB for others\n  batchSize: platform.isARM64 ? 32 : 16, // Larger batch size for ARM64\n  maxConcurrency: platform.isARM64 ? 4 : 2, // Higher concurrency for ARM64\n  timeout: platform.isARM64 ? 60000 : 30000 // Longer timeout for ARM64\n};",
      "startLine": 75,
      "endLine": 82
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let codeChunks = [];",
      "startLine": 82,
      "endLine": 83
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let embeddingExtractor = null;",
      "startLine": 83,
      "endLine": 84
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let isInitialized = false;",
      "startLine": 84,
      "endLine": 85
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let embeddingCache = new Map(); // Cache for embeddings to avoid recomputation",
      "startLine": 85,
      "endLine": 86
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let indexTimestamp = 0; // Track when index was last updated",
      "startLine": 86,
      "endLine": 88
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "class LRUCache {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n    this.cache = new Map();\n  }\n\n  get(key) {\n    if (this.cache.has(key)) {",
      "startLine": 88,
      "endLine": 96
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const value = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, value);\n      return value;\n    }\n    return null;\n  }\n\n  set(key, value) {\n    if (this.cache.size >= this.maxSize) {",
      "startLine": 96,
      "endLine": 106
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    this.cache.set(key, value);\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}",
      "startLine": 106,
      "endLine": 117
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const embeddingLRUCache = new LRUCache(MAX_CACHE_SIZE);\n\nasync function initializeEmbeddingProvider() {\n  try {\n    const { pipeline } = await import('@xenova/transformers');\n    embeddingExtractor = await pipeline('feature-extraction', DEFAULT_MODEL);\n    return true;\n  } catch (error) {\n    throw new Error(`Transformers.js initialization failed: ${error.message}`);\n  }\n}",
      "startLine": 117,
      "endLine": 129
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export function getDefaultIgnorePatterns(workingDirectory) {",
      "startLine": 129,
      "endLine": 130
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const defaultPatterns = {\n    files: [\n      '**/node_modules/**',\n      '**/.next/**',\n      '**/dist/**',\n      '**/build/**',\n      '**/out/**',\n      '**/coverage/**',\n      '**/.nyc_output/**',\n      '**/.git/**',\n      '**/.vscode/**',\n      '**/.idea/**',\n      '**/*.log',\n      '**/*.tmp',\n      '**/temp/**',\n      '**/tmp/**',\n      '**/.DS_Store',\n      '**/Thumbs.db',\n      '**/*.map',\n      '**/*.min.js',\n      '**/*.min.css',\n      '**/package-lock.json',\n      '**/yarn.lock'\n    ],\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.css', '.json', '.md'],\n    directories: [\n      'node_modules',\n      '.next',\n      'dist',\n      'build',\n      'out',\n      'coverage',\n      '.nyc_output',\n      '.git',\n      '.vscode',\n      '.idea',\n      'temp',\n      'tmp'\n    ]\n  };\n\n  // Try to read custom ignore patterns from the working directory\n  try {\n    // Check for custom search defaults",
      "startLine": 130,
      "endLine": 174
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const searchDefaultsPath = path.join(workingDirectory, '.search-defaults.json');\n    if (existsSync(searchDefaultsPath)) {",
      "startLine": 174,
      "endLine": 176
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const customDefaults = JSON.parse(readFileSync(searchDefaultsPath, 'utf8'));\n      return { ...defaultPatterns, ...customDefaults };\n    }\n\n    // Check for .gitignore",
      "startLine": 176,
      "endLine": 181
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const gitignorePath = path.join(workingDirectory, '.gitignore');\n    if (existsSync(gitignorePath)) {",
      "startLine": 181,
      "endLine": 183
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const gitignoreContent = readFileSync(gitignorePath, 'utf8');",
      "startLine": 183,
      "endLine": 184
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const gitignorePatterns = gitignoreContent\n        .split('\\n')\n        .filter(line => line.trim() && !line.startsWith('#'))\n        .map(line => line.trim());\n\n      return {\n        ...defaultPatterns,\n        customGitignore: gitignorePatterns\n      };\n    }\n  } catch (error) {\n    // If we can't read files, just return defaults\n    console.warn('Warning: Could not read ignore patterns, using defaults:', error.message);\n  }\n\n  return defaultPatterns;\n}",
      "startLine": 184,
      "endLine": 203
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createIgnoreFilter(rootDir) {",
      "startLine": 203,
      "endLine": 204
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ig = ignore();\n  ig.add(DEFAULT_IGNORES);\n\n  // Get default patterns",
      "startLine": 204,
      "endLine": 208
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const defaultPatterns = getDefaultIgnorePatterns(rootDir);\n\n  // Add any custom patterns from defaults\n  if (defaultPatterns.customGitignore) {\n    ig.add(defaultPatterns.customGitignore);\n  }\n\n  // Add file patterns from defaults\n  if (defaultPatterns.files) {\n    ig.add(defaultPatterns.files);\n  }\n\n  // Find and add all .gitignore files in the directory tree",
      "startLine": 208,
      "endLine": 221
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const addGitignoreFiles = (dir) => {\n    try {",
      "startLine": 221,
      "endLine": 223
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const entries = readdirSync(dir, { withFileTypes: true });\n\n      for (const entry of entries) {",
      "startLine": 223,
      "endLine": 226
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const fullPath = path.join(dir, entry.name);\n\n        if (entry.isFile() && entry.name === '.gitignore') {\n          try {",
      "startLine": 226,
      "endLine": 230
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const content = readFileSync(fullPath, 'utf8');\n            ig.add(content);\n          } catch (error) {\n            // Silently handle .gitignore read errors\n          }\n        } else if (entry.isDirectory() && !entry.name.startsWith('.') && !DEFAULT_IGNORES.includes(entry.name)) {\n          // Recursively add .gitignore files from subdirectories\n          addGitignoreFiles(fullPath);\n        }\n      }\n    } catch (error) {\n      // Silently handle directory read errors\n    }\n  };\n\n  addGitignoreFiles(rootDir);\n  return { ig, rootDir };\n}",
      "startLine": 230,
      "endLine": 249
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function shouldIndexFile(filePath, allowedExtensions) {",
      "startLine": 249,
      "endLine": 250
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ext = path.extname(filePath).slice(1).toLowerCase();\n  if (!ext || !allowedExtensions.includes(ext)) {\n    return false;\n  }",
      "startLine": 250,
      "endLine": 255
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const filename = path.basename(filePath);",
      "startLine": 255,
      "endLine": 256
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const excludedPatterns = [\n    /\\.min\\.js$/, /\\.bundle\\.js$/, /\\.pack\\.js$/,\n    /\\.d\\.ts$/, /\\.d\\.tsx$/,\n    /\\.map$/, /\\.css\\.map$/,\n    /^package\\.json$/, /^package-lock\\.json$/, /^yarn\\.lock$/, /^pnpm-lock\\.yaml$/,\n    /^tsconfig\\.json$/, /^jsconfig\\.json$/,\n    /\\.eslintrc\\..*$/, /\\.prettierrc\\..*$/,\n    /^LICENSE.*$/, /^README.*$/, /^.*\\.md$/, /^CHANGELOG.*$/,\n    /^Dockerfile.*$/, /^docker-compose.*\\.yml$/\n  ];\n\n  return !excludedPatterns.some(pattern => pattern.test(filename));\n}",
      "startLine": 256,
      "endLine": 270
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function detectLanguageFromPath(filePath) {",
      "startLine": 270,
      "endLine": 271
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ext = path.extname(filePath).toLowerCase();",
      "startLine": 271,
      "endLine": 272
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const languageMap = {\n    '.js': 'javascript',\n    '.jsx': 'javascript',\n    '.ts': 'typescript',\n    '.tsx': 'typescript',\n    '.go': 'go',\n    '.rs': 'rust',\n    '.py': 'python',\n    '.c': 'c',\n    '.cpp': 'cpp',\n    '.cc': 'cpp',\n    '.cxx': 'cpp',\n    '.h': 'c',\n    '.hpp': 'cpp'\n  };\n  return languageMap[ext] || 'text';\n}",
      "startLine": 272,
      "endLine": 290
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function getLanguagePatterns(language) {",
      "startLine": 290,
      "endLine": 291
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const patterns = {\n    javascript: /^(function|class|const|let|var|export|import)\\s+\\w/,\n    typescript: /^(function|class|const|let|var|export|import|interface|type|enum)\\s+\\w/,\n    go: /^(func|type|var|const|import|package)\\s+\\w/,\n    rust: /^(fn|struct|enum|impl|trait|use|mod|pub)\\s+\\w/,\n    python: /^(def|class|import|from)\\s+\\w/,\n    c: /^(int|void|char|float|double|struct|enum|typedef|#include|#define)\\s+\\w/,\n    cpp: /^(int|void|char|float|double|class|struct|namespace|template|#include|#define)\\s+\\w/\n  };\n  return patterns[language] || /^[a-zA-Z_]\\w*\\s*[({]/;\n}",
      "startLine": 291,
      "endLine": 303
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function processCodeIntoChunks(content, filePath) {",
      "startLine": 303,
      "endLine": 304
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunks = [];",
      "startLine": 304,
      "endLine": 305
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const lines = content.split('\\n');",
      "startLine": 305,
      "endLine": 306
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const language = detectLanguageFromPath(filePath);",
      "startLine": 306,
      "endLine": 307
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const languagePattern = getLanguagePatterns(language);",
      "startLine": 307,
      "endLine": 309
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let currentChunk = '';",
      "startLine": 309,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let inFunction = false;",
      "startLine": 310,
      "endLine": 311
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let inClass = false;",
      "startLine": 311,
      "endLine": 312
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let braceCount = 0;",
      "startLine": 312,
      "endLine": 313
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let chunkLineCount = 0;\n\n  for (let i = 0; i < lines.length; i++) {",
      "startLine": 313,
      "endLine": 316
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const line = lines[i];",
      "startLine": 316,
      "endLine": 317
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const trimmedLine = line.trim();\n\n    if (trimmedLine.match(languagePattern)) {\n      if (currentChunk.trim()) {\n        chunks.push({\n          content: currentChunk.trim(),\n          file: filePath,\n          language: language,\n          startLine: Math.max(0, i - currentChunk.split('\\n').length),\n          endLine: i\n        });\n      }\n      currentChunk = line;\n      braceCount = (line.match(/{/g) || []).length;\n      inFunction = trimmedLine.startsWith('function');\n      inClass = trimmedLine.startsWith('class');\n      chunkLineCount = 1;\n    } else {\n      currentChunk += '\\n' + line;\n      chunkLineCount++;\n\n      braceCount += (line.match(/{/g) || []).length;\n      braceCount -= (line.match(/}/g) || []).length;\n\n      if ((braceCount === 0 && (inFunction || inClass)) || chunkLineCount >= MAX_LINES_PER_CHUNK) {\n        chunks.push({\n          content: currentChunk.trim(),\n          file: filePath,\n          startLine: Math.max(0, i - currentChunk.split('\\n').length),\n          endLine: i\n        });\n        currentChunk = '';\n        inFunction = false;\n        inClass = false;\n        chunkLineCount = 0;\n      }\n    }\n  }\n\n  if (currentChunk.trim()) {\n    chunks.push({\n      content: currentChunk.trim(),\n      file: filePath,\n      language: language,\n      startLine: Math.max(0, lines.length - currentChunk.split('\\n').length),\n      endLine: lines.length - 1\n    });\n  }\n\n  return chunks;\n}\n\nasync function loadIndex(indexDir) {\n  try {",
      "startLine": 317,
      "endLine": 371
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexPath = path.join(indexDir, INDEX_FILE);\n    if (existsSync(indexPath)) {",
      "startLine": 371,
      "endLine": 373
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexData = JSON.parse(readFileSync(indexPath, 'utf8'));\n      codeChunks = indexData.chunks || [];\n      indexTimestamp = indexData.timestamp || 0;\n    }\n  } catch (error) {\n    // If loading fails, start fresh\n    codeChunks = [];\n    indexTimestamp = 0;\n  }\n}\n\nasync function scanDirectory(dir, ignoreFilter, files, exts) {\n  try {",
      "startLine": 373,
      "endLine": 386
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const entries = await fs.readdir(dir, { withFileTypes: true });\n\n    for (const entry of entries) {",
      "startLine": 386,
      "endLine": 389
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const fullPath = path.join(dir, entry.name);",
      "startLine": 389,
      "endLine": 390
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const relativePath = path.relative(ignoreFilter.rootDir, fullPath);\n\n      if (ignoreFilter.ig.ignores(relativePath)) {\n        continue;\n      }\n\n      if (entry.isDirectory()) {\n        await scanDirectory(fullPath, ignoreFilter, files, exts);\n      } else if (entry.isFile()) {\n        if (shouldIndexFile(fullPath, exts)) {\n          try {",
      "startLine": 390,
      "endLine": 401
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stat = await fs.stat(fullPath);\n            if (stat.size <= MAX_FILE_SIZE) { // 1MB limit\n              files.push(fullPath);\n            }\n          } catch (error) {\n            // Skip files we can't stat\n          }\n        }\n      }\n    }\n  } catch (error) {\n    // Skip directories we can't read\n  }\n}\n\nasync function getLastModifiedTime(folders) {",
      "startLine": 401,
      "endLine": 417
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let lastModified = 0;\n\n  for (const folder of folders) {\n    try {",
      "startLine": 417,
      "endLine": 421
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const files = await fs.readdir(folder, { withFileTypes: true });\n      for (const file of files) {\n        if (file.isFile()) {",
      "startLine": 421,
      "endLine": 424
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const fullPath = path.join(folder, file.name);",
      "startLine": 424,
      "endLine": 425
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stats = await fs.stat(fullPath);\n          lastModified = Math.max(lastModified, stats.mtimeMs);\n        }\n      }\n    } catch (error) {\n      // Skip directories we can't read\n    }\n  }\n\n  return lastModified;\n}\n\nasync function getEmbedding(text) {",
      "startLine": 425,
      "endLine": 438
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const cacheKey = text; // Use text as cache key",
      "startLine": 438,
      "endLine": 440
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const cached = embeddingLRUCache.get(cacheKey);\n  if (cached) {\n    return cached;\n  }",
      "startLine": 440,
      "endLine": 445
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const embedding = await embeddingExtractor(text, {\n    pooling: 'mean',\n    normalize: true\n  });\n\n  embeddingLRUCache.set(cacheKey, embedding);\n\n  return embedding;\n}",
      "startLine": 445,
      "endLine": 455
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function calculateCosineSimilarity(vecA, vecB) {\n  if (vecA.length !== vecB.length) return 0;",
      "startLine": 455,
      "endLine": 458
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let dotProduct = 0;",
      "startLine": 458,
      "endLine": 459
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let normA = 0;",
      "startLine": 459,
      "endLine": 460
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let normB = 0;\n\n  for (let i = 0; i < vecA.length; i++) {\n    dotProduct += vecA[i] * vecB[i];\n    normA += vecA[i] * vecA[i];\n    normB += vecB[i] * vecB[i];\n  }",
      "startLine": 460,
      "endLine": 468
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const denominator = Math.sqrt(normA) * Math.sqrt(normB);\n  return denominator === 0 ? 0 : dotProduct / denominator;\n}",
      "startLine": 468,
      "endLine": 472
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function initializeVectorSystem(indexDir = INDEX_DIR) {\n  if (isInitialized) return true;\n\n  try {\n    if (!existsSync(indexDir)) {\n      mkdirSync(indexDir, { recursive: true });\n    }\n\n    if (!embeddingExtractor) {\n      await initializeEmbeddingProvider();\n    }\n\n    await loadIndex(indexDir);\n\n    isInitialized = true;\n    return true;\n  } catch (error) {\n    throw new Error(`Vector system initialization failed: ${error.message}`);\n  }\n}\n\n// Process files into chunks",
      "startLine": 472,
      "endLine": 494
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export function processFile(file, codeChunks) {",
      "startLine": 494,
      "endLine": 495
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const newChunks = [];\n\n  try {",
      "startLine": 495,
      "endLine": 498
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stats = fs.statSync(file);\n    if (stats.size > MAX_FILE_SIZE) {\n      console.log(`File ${file} is large (${stats.size} bytes), truncating`);",
      "startLine": 498,
      "endLine": 501
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let content = fs.readFileSync(file, 'utf8');\n\n      if (content.length > MAX_FILE_SIZE) {\n        content = content.substring(0, MAX_FILE_SIZE);\n      }",
      "startLine": 501,
      "endLine": 507
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunks = [{\n        content,\n        file,\n        type: 'code',\n        metadata: { truncated: true, originalSize: stats.size }\n      }];\n      newChunks.push(...chunks);\n    }\n  } catch (error) {\n    console.error(`Error reading file ${file}:`, error);\n  }",
      "startLine": 507,
      "endLine": 519
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const updatedChunks = newChunks.length > 0 ? newChunks : codeChunks;",
      "startLine": 519,
      "endLine": 521
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexData = {\n    chunks: updatedChunks,\n    timestamp: Date.now(),\n    version: '1.0'\n  };\n\n  return indexData;\n}",
      "startLine": 521,
      "endLine": 530
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function syncVectorIndex(folders, exts = DEFAULT_EXTS, ignores = DEFAULT_IGNORES) {\n  if (!isInitialized) {\n    await initializeVectorSystem();\n  }",
      "startLine": 530,
      "endLine": 535
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const files = [];",
      "startLine": 535,
      "endLine": 536
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const startTime = Date.now();",
      "startLine": 536,
      "endLine": 538
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const lastModified = await getLastModifiedTime(folders);\n  if (lastModified <= indexTimestamp && codeChunks.length > 0) {\n    return codeChunks.length; // Index is up to date\n  }\n\n  for (const folder of folders) {",
      "startLine": 538,
      "endLine": 544
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ignoreFilter = createIgnoreFilter(folder);\n    await scanDirectory(folder, ignoreFilter, files, exts);\n  }",
      "startLine": 544,
      "endLine": 548
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const newChunks = [];",
      "startLine": 548,
      "endLine": 549
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let skippedFiles = 0;\n\n  for (const file of files) {\n    try {",
      "startLine": 549,
      "endLine": 553
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const stats = await fs.stat(file);\n\n      if (stats.size > MAX_LARGE_FILE_SIZE) {\n        skippedFiles++;\n        continue;\n      }",
      "startLine": 553,
      "endLine": 560
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const ext = path.extname(file).toLowerCase();\n      if (['.jpg', '.jpeg', '.png', '.gif', '.svg', '.ico', '.pdf', '.zip', '.tar', '.gz', '.exe', '.dll', '.so', '.dylib'].includes(ext)) {\n        skippedFiles++;\n        continue;\n      }",
      "startLine": 560,
      "endLine": 566
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "let content = await fs.readFile(file, 'utf8');\n      if (stats.size > MAX_FILE_SIZE) {\n        content = content.substring(0, MAX_FILE_SIZE);\n      }",
      "startLine": 566,
      "endLine": 571
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunks = processCodeIntoChunks(content, file);\n      newChunks.push(...chunks);\n    } catch (error) {\n      // Skip files that can't be processed\n    }\n  }\n\n  if (newChunks.length > codeChunks.length * 1.5 || newChunks.length < codeChunks.length * 0.5) {\n    embeddingLRUCache.clear();\n  }\n\n  codeChunks = newChunks;\n  indexTimestamp = startTime;",
      "startLine": 571,
      "endLine": 585
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const indexData = {\n    timestamp: indexTimestamp,\n    chunks: codeChunks.map(c => ({\n      file: c.file,\n      content: c.content,\n      startLine: c.startLine,\n      endLine: c.endLine\n    }))\n  };\n\n  writeFileSync(path.join(INDEX_DIR, INDEX_FILE), JSON.stringify(indexData, null, 2));\n\n  return codeChunks.length;\n}",
      "startLine": 585,
      "endLine": 600
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function queryVectorIndex(query, topK = 8) {\n  if (!isInitialized) {\n    await initializeVectorSystem();\n  }\n\n  if (codeChunks.length === 0) {\n    return [];\n  }",
      "startLine": 600,
      "endLine": 609
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const queryEmbedding = await getEmbedding(query);",
      "startLine": 609,
      "endLine": 611
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const results = [];",
      "startLine": 611,
      "endLine": 612
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batchSize = platformConfig.batchSize;\n\n  for (let i = 0; i < codeChunks.length; i += batchSize) {",
      "startLine": 612,
      "endLine": 615
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batch = codeChunks.slice(i, i + batchSize);",
      "startLine": 615,
      "endLine": 616
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batchPromises = batch.map(async (chunk) => {",
      "startLine": 616,
      "endLine": 617
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const chunkEmbedding = await getEmbedding(chunk.content);",
      "startLine": 617,
      "endLine": 618
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const similarity = calculateCosineSimilarity(queryEmbedding.data, chunkEmbedding.data);\n\n      return {\n        file: chunk.file,\n        content: chunk.content,\n        startLine: chunk.startLine,\n        endLine: chunk.endLine,\n        similarity: similarity\n      };\n    });",
      "startLine": 618,
      "endLine": 629
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n  }\n\n  return results\n    .sort((a, b) => b.similarity - a.similarity)\n    .slice(0, topK)\n    .map(r => ({\n      file: r.file,\n      content: r.content,\n      startLine: r.startLine,\n      endLine: r.endLine,\n      score: r.similarity\n    }));\n}",
      "startLine": 629,
      "endLine": 645
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function searchCode(query, workingDirectory, folders = ['.'], extensions = DEFAULT_EXTS, topK = 6) {\n  try {\n    if (!existsSync(workingDirectory)) {\n      return [];\n    }",
      "startLine": 645,
      "endLine": 651
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const initPromise = isInitialized ? Promise.resolve() : initializeVectorSystem();\n    await Promise.race([\n      initPromise,\n      new Promise((_, reject) => setTimeout(() => reject(new Error('Initialization timeout')), 10000))\n    ]);",
      "startLine": 651,
      "endLine": 657
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const absFolders = folders.map(f => path.resolve(workingDirectory, f));\n\n    await syncVectorIndex(absFolders, extensions);\n    return await queryVectorIndex(query, topK);\n\n  } catch (error) {\n    throw new Error(`Search failed: ${error.message}`);\n  }\n}",
      "startLine": 657,
      "endLine": 667
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function searchSemantic(query, options = {}) {\n  const { workingDirectory, folders = ['.'], extensions = DEFAULT_EXTS, topK = 6 } = options;\n  return await searchCode(query, workingDirectory, folders, extensions, topK);\n}",
      "startLine": 667,
      "endLine": 672
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function initialize(indexDir = INDEX_DIR) {\n  return await initializeVectorSystem(indexDir);\n}",
      "startLine": 672,
      "endLine": 676
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function syncIndex(folders, exts = DEFAULT_EXTS, ignores = DEFAULT_IGNORES) {\n  return await syncVectorIndex(folders, exts, ignores);\n}",
      "startLine": 676,
      "endLine": 680
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export async function queryIndex(query, topK = 8) {\n  return await queryVectorIndex(query, topK);\n}\n\nexport {\n  MAX_FILE_SIZE,\n  MAX_LARGE_FILE_SIZE,\n  MAX_LINES_PER_CHUNK,\n  DEFAULT_EXTS,\n  DEFAULT_IGNORES,\n  INDEX_DIR,\n  INDEX_FILE,\n  VECTOR_INDEX_FILE,\n  platformConfig,\n  embeddingLRUCache,\n  codeChunks,\n  isInitialized,\n  embeddingExtractor\n};",
      "startLine": 680,
      "endLine": 700
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}",
      "startLine": 699,
      "endLine": 705
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createErrorResponse(message) {\n  return createToolResponse(`Error: ${message}`, true);\n}",
      "startLine": 706,
      "endLine": 709
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function validateRequiredParams(params, requiredParams) {",
      "startLine": 711,
      "endLine": 712
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}",
      "startLine": 712,
      "endLine": 718
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function formatSearchResults(results, query, path) {\n  if (results.length === 0) {\n    return `No results found for \"${query}\" in ${path}`;\n  }\n\n  return `Found ${results.length} results for \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`;\n}",
      "startLine": 717,
      "endLine": 724
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\n  return async (args) => {",
      "startLine": 726,
      "endLine": 728
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\n    });\n\n    try {\n      return await Promise.race([\n        handler(args),\n        timeoutPromise\n      ]);\n    } catch (error) {\n      if (error.message.includes('timed out')) {\n        return createErrorResponse(`Tool ${toolName} timed out after ${timeoutMs}ms`);\n      }\n      throw error;\n    }\n  };\n}\n\nimport { createMCPResponse, withPagination } from './mcp-pagination.js';",
      "startLine": 728,
      "endLine": 748
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "export const searchTools = [\n  {\n    name: \"searchcode\",\n    description: \"Semantic code search optimized for technical code discovery. Supports pagination for large result sets. Use precise terms: 'useState hooks' not 'manage state', 'API authentication' not 'login system'\",\n    inputSchema: {\n      type: \"object\",\n      properties: {\n        query: { type: \"string\", description: \"Search query. Use specific technical terms: 'React hooks', 'error handling', 'database connections'\" },\n        path: { type: \"string\", description: \"Directory to search in (default: current directory)\" },\n        workingDirectory: { type: \"string\", description: \"Working directory base path\" },\n        cursor: { type: \"string\", description: \"Pagination cursor from previous search results\" },\n        pageSize: { type: \"number\", description: \"Number of results per page (default: 6)\" },\n        topK: { type: \"number\", description: \"Maximum total results to consider (default: 20)\" }\n      },\n      required: [\"query\", \"workingDirectory\"]\n    },\n    handler: createTimeoutToolHandler(withPagination(async ({ query, path = \".\", workingDirectory, cursor, pageSize = 6, topK = 20 }) => {\n      validateRequiredParams({ query, workingDirectory }, ['query', 'workingDirectory']);",
      "startLine": 748,
      "endLine": 766
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/unified-vector.js",
      "content": "const results = await searchCode(query, workingDirectory, [path], undefined, topK);\n\n      return results.map(r => ({\n        file: r.file,\n        line: `${r.startLine}-${r.endLine}`,\n        content: r.content.substring(0, 200) + (r.content.length > 200 ? '...' : ''),\n        score: r.score.toFixed(3)\n      }));\n    }, 'search-results'), 'searchcode', 45000)\n  }\n];",
      "startLine": 766,
      "endLine": 776
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "import * as path from 'node:path';\r\nimport { existsSync, statSync } from 'fs';\r\nimport { fileURLToPath } from 'node:url';\r\n\r\n// Get current directory for absolute imports",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const __filename = fileURLToPath(import.meta.url);",
      "startLine": 5,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const __dirname = path.dirname(__filename);",
      "startLine": 6,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function createErrorResponse(error, startTime, context = {}) {\r\n  return {\r\n    success: false,\r\n    error: error?.message || error || 'Unknown error occurred',\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...context\r\n  };\r\n}",
      "startLine": 8,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function createSuccessResponse(data, startTime, context = {}) {\r\n  return {\r\n    success: true,\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...data,\r\n    ...context\r\n  };\r\n}",
      "startLine": 17,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function validateRequiredParams(args, requiredParams, startTime) {",
      "startLine": 26,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const missingParams = requiredParams.filter(param => !args[param]);\r\n  if (missingParams.length > 0) {\r\n    return createErrorResponse(\r\n      new Error(`Missing required parameters: ${missingParams.join(', ')}`),\r\n      startTime\r\n    );\r\n  }\r\n  return null;\r\n}",
      "startLine": 27,
      "endLine": 37
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export const validateWorkingDirectory = (workingDirectory, defaultWorkingDir) => {\r\n  if (!workingDirectory) {\r\n    return {\r\n      valid: false,\r\n      error: 'REQUIRED PARAMETER MISSING: workingDirectory is mandatory for all tool operations. Please provide a valid directory path.',\r\n      effectiveDir: null\r\n    };\r\n  }\r\n\r\n  try {",
      "startLine": 37,
      "endLine": 47
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const resolvedPath = path.resolve(workingDirectory);\r\n\r\n    if (!existsSync(resolvedPath)) {\r\n      return {\r\n        valid: false,\r\n        error: `DIRECTORY NOT FOUND: Working directory '${workingDirectory}' does not exist. Please provide an existing directory path.`,\r\n        effectiveDir: null\r\n      };\r\n    }",
      "startLine": 47,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const stats = statSync(resolvedPath);\r\n\r\n    if (!stats.isDirectory()) {\r\n      return {\r\n        valid: false,\r\n        error: `INVALID PATH TYPE: '${workingDirectory}' exists but is not a directory. Please provide a valid directory path.`,\r\n        effectiveDir: null\r\n      };\r\n    }\r\n\r\n    return { valid: true, effectiveDir: resolvedPath };\r\n  } catch (error) {\r\n    return {\r\n      valid: false,\r\n      error: `Working directory '${workingDirectory}' is not accessible: ${error.message}`,\r\n      effectiveDir: null\r\n    };\r\n  }\r\n};",
      "startLine": 57,
      "endLine": 77
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function formatDate(date) {\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  }).format(date);\r\n}",
      "startLine": 77,
      "endLine": 87
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function generateId() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}",
      "startLine": 87,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function createToolResponse(content, isError = false) {\r\n  return {\r\n    content: [{ type: \"text\", text: content }],\r\n    isError\r\n  };\r\n}",
      "startLine": 91,
      "endLine": 98
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function createErrorResponseUtil(message) {\r\n  return createToolResponse(`Error: ${message}`, true);\r\n}\r\n\r\n\r\n// Simple error response for tools",
      "startLine": 98,
      "endLine": 104
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function createEnhancedErrorResponse(error, operationType = null, context = {}) {",
      "startLine": 104,
      "endLine": 105
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const errorMessage = error?.message || error || 'Unknown error';\r\n  return createToolResponse(`Error: ${errorMessage}`, true);\r\n}",
      "startLine": 105,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function createSuccessResponseUtil(data) {\r\n  return createToolResponse(JSON.stringify(data, null, 2));\r\n}",
      "startLine": 110,
      "endLine": 114
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function validateRequiredParamsUtil(params, requiredParams) {",
      "startLine": 114,
      "endLine": 115
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\r\n  if (missingParams.length > 0) {\r\n    throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\r\n  }\r\n}",
      "startLine": 115,
      "endLine": 121
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function getDefaultIgnorePatterns(workingDirectory) {",
      "startLine": 121,
      "endLine": 122
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const defaultPatterns = {\r\n    files: [\r\n      '**/node_modules/**',\r\n      '**/.next/**',\r\n      '**/dist/**',\r\n      '**/build/**',\r\n      '**/out/**',\r\n      '**/coverage/**',\r\n      '**/.nyc_output/**',\r\n      '**/.git/**',\r\n      '**/.vscode/**',\r\n      '**/.idea/**',\r\n      '**/*.log',\r\n      '**/*.tmp',\r\n      '**/temp/**',\r\n      '**/tmp/**',\r\n      '**/.DS_Store',\r\n      '**/Thumbs.db',\r\n      '**/*.map',\r\n      '**/*.min.js',\r\n      '**/*.min.css',\r\n      '**/package-lock.json',\r\n      '**/yarn.lock'\r\n    ],\r\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.css', '.json', '.md'],\r\n    directories: [\r\n      'node_modules',\r\n      '.next',\r\n      'dist',\r\n      'build',\r\n      'out',\r\n      'coverage',\r\n      '.nyc_output',\r\n      '.git',\r\n      '.vscode',\r\n      '.idea',\r\n      'temp',\r\n      'tmp'\r\n    ]\r\n  };\r\n\r\n  try {",
      "startLine": 122,
      "endLine": 164
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const fs = require('fs');",
      "startLine": 164,
      "endLine": 165
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const path = require('path');",
      "startLine": 165,
      "endLine": 167
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const searchDefaultsPath = path.join(workingDirectory, '.search-defaults.json');\r\n    if (fs.existsSync(searchDefaultsPath)) {",
      "startLine": 167,
      "endLine": 169
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const customDefaults = JSON.parse(fs.readFileSync(searchDefaultsPath, 'utf8'));\r\n      return { ...defaultPatterns, ...customDefaults };\r\n    }",
      "startLine": 169,
      "endLine": 173
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const gitignorePath = path.join(workingDirectory, '.gitignore');\r\n    if (fs.existsSync(gitignorePath)) {",
      "startLine": 173,
      "endLine": 175
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');",
      "startLine": 175,
      "endLine": 176
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const gitignorePatterns = gitignoreContent\r\n        .split('\\n')\r\n        .filter(line => line.trim() && !line.startsWith('#'))\r\n        .map(line => line.trim());\r\n\r\n      return {\r\n        ...defaultPatterns,\r\n        customGitignore: gitignorePatterns\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.warn('Warning: Could not read ignore patterns, using defaults:', error.message);\r\n  }\r\n\r\n  return defaultPatterns;\r\n}",
      "startLine": 176,
      "endLine": 193
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function formatSearchResults(results, query, path) {\r\n  if (results.length === 0) {\r\n    return `No results found for \"${query}\" in ${path}`;\r\n  }\r\n\r\n  return `Found ${results.length} results for \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`;\r\n}",
      "startLine": 193,
      "endLine": 201
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function formatExecutionMessage(workingDirectory, runtime = 'auto') {\r\n  return `Execution requested in ${workingDirectory} with runtime ${runtime}`;\r\n}",
      "startLine": 201,
      "endLine": 205
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function formatBatchOperationMessage(operations) {\r\n  return `Batch executing ${operations.length} operations`;\r\n}",
      "startLine": 205,
      "endLine": 209
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function formatBatchSummary(operations, successfulOps) {",
      "startLine": 209,
      "endLine": 210
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const summaryLines = [];\r\n  summaryLines.push(`Completed: ${successfulOps}/${operations.length} operations`);\r\n\r\n  if (successfulOps === operations.length) {\r\n    summaryLines.push('Status: All operations completed');\r\n  } else {\r\n    summaryLines.push('Status: Some operations encountered issues');\r\n  }\r\n\r\n  summaryLines.push('The system automatically selected and configured the appropriate tools based on your task description.');\r\n\r\n  return summaryLines.join('\\n');\r\n}",
      "startLine": 210,
      "endLine": 224
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function getDefaultValues() {\r\n  return {\r\n    runtime: 'auto',\r\n    timeout: 120000,\r\n    path: '.',\r\n    language: 'javascript',\r\n    chunkIndex: 0,\r\n    listFiles: false,\r\n    cleanup: false\r\n  };\r\n}",
      "startLine": 224,
      "endLine": 236
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export async function executeOperation(operation, errorMessage = \"Operation failed\") {\r\n  try {\r\n    return await operation();\r\n  } catch (error) {\r\n    throw new Error(`${errorMessage}: ${error.message}`);\r\n  }\r\n}",
      "startLine": 236,
      "endLine": 244
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const MAX_TOKENS = 4000;",
      "startLine": 244,
      "endLine": 245
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const CHARS_PER_TOKEN = 4;",
      "startLine": 245,
      "endLine": 246
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const TRUNCATION_BUFFER = 100;",
      "startLine": 246,
      "endLine": 247
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const MIN_PARTIAL_CHARS = 50;",
      "startLine": 247,
      "endLine": 249
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function estimateTokens(text) {\r\n  return Math.ceil(text.length / CHARS_PER_TOKEN);\r\n}",
      "startLine": 248,
      "endLine": 251
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function truncateContent(content, maxTokens = MAX_TOKENS) {\r\n  if (!content || typeof content !== 'object') return content;",
      "startLine": 253,
      "endLine": 256
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const maxChars = maxTokens * CHARS_PER_TOKEN - TRUNCATION_BUFFER;\r\n\r\n  if (Array.isArray(content)) return truncateArray(content, maxChars);\r\n  if (content.text) return truncateSingle(content, maxChars);\r\n  if (content.content?.length) return { ...content, content: truncateArray(content.content, maxChars) };\r\n\r\n  return content;\r\n}",
      "startLine": 256,
      "endLine": 265
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function truncateArray(items, maxChars) {",
      "startLine": 265,
      "endLine": 266
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "let totalChars = 0;",
      "startLine": 266,
      "endLine": 267
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const result = [];\r\n\r\n  for (let i = 0; i < items.length; i++) {",
      "startLine": 267,
      "endLine": 270
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const item = items[i];\r\n    if (!item?.text) { result.push(item); continue; }",
      "startLine": 270,
      "endLine": 273
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const itemChars = item.text.length;\r\n    if (totalChars + itemChars > maxChars) {",
      "startLine": 273,
      "endLine": 275
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const remaining = maxChars - totalChars;\r\n      if (remaining > MIN_PARTIAL_CHARS) {\r\n        result.push({ ...item, text: item.text.substring(0, remaining) + '\\n\\n[PARTIAL: Truncated]' });\r\n      }",
      "startLine": 275,
      "endLine": 280
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const omitted = items.length - i - (remaining > MIN_PARTIAL_CHARS ? 0 : 1);\r\n      if (omitted > 0) {",
      "startLine": 280,
      "endLine": 282
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const tokens = estimateRemainingTokens(items.slice(i + (remaining > MIN_PARTIAL_CHARS ? 1 : 0)));\r\n        result.push({\r\n          type: 'text',\r\n          text: `\\n[OUTPUT TRUNCATED: ${omitted} items omitted, ~${tokens} tokens, limit: ${MAX_TOKENS}]`\r\n        });\r\n      }\r\n      break;\r\n    }\r\n\r\n    totalChars += itemChars;\r\n    result.push(item);\r\n  }\r\n  return result;\r\n}",
      "startLine": 282,
      "endLine": 297
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function truncateSingle(content, maxChars) {\r\n  if (content.text.length <= maxChars) return content;",
      "startLine": 297,
      "endLine": 300
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const truncated = content.text.substring(0, maxChars);",
      "startLine": 300,
      "endLine": 301
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const removed = content.text.length - maxChars;",
      "startLine": 301,
      "endLine": 302
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const tokens = estimateTokens(content.text.substring(maxChars));\r\n\r\n  return {\r\n    ...content,\r\n    text: truncated + `\\n\\n[OUTPUT TRUNCATED: ${removed} chars, ~${tokens} tokens, limit: ${MAX_TOKENS}]`\r\n  };\r\n}",
      "startLine": 302,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "function estimateRemainingTokens(items) {",
      "startLine": 310,
      "endLine": 311
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const totalChars = items.reduce((sum, item) => sum + (item?.text?.length || 0), 0);\r\n  return estimateTokens(totalChars.toString());\r\n}",
      "startLine": 311,
      "endLine": 315
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "class PaginationManager {\r\n  constructor() {\r\n    this.cursors = new Map();\r\n    this.pageSize = 50;\r\n  }\r\n\r\n  createCursor(data, position = 0) {",
      "startLine": 315,
      "endLine": 322
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const cursorId = generateId();\r\n    this.cursors.set(cursorId, {\r\n      data,\r\n      position,\r\n      timestamp: Date.now()\r\n    });\r\n    return cursorId;\r\n  }\r\n\r\n  getCursor(cursorId) {",
      "startLine": 322,
      "endLine": 332
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const cursor = this.cursors.get(cursorId);\r\n    if (!cursor) {\r\n      throw new Error('Invalid or expired cursor');\r\n    }\r\n    return cursor;\r\n  }\r\n\r\n  removeCursor(cursorId) {\r\n    this.cursors.delete(cursorId);\r\n  }\r\n\r\n  cleanup() {",
      "startLine": 332,
      "endLine": 344
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const now = Date.now();",
      "startLine": 344,
      "endLine": 345
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const expiredTime = now - (30 * 60 * 1000);\r\n\r\n    for (const [cursorId, cursor] of this.cursors.entries()) {\r\n      if (cursor.timestamp < expiredTime) {\r\n        this.cursors.delete(cursorId);\r\n      }\r\n    }\r\n  }\r\n}",
      "startLine": 345,
      "endLine": 355
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const paginationManager = new PaginationManager();",
      "startLine": 355,
      "endLine": 357
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function createPaginatedResponse(items, cursor = null, hasNext = false) {",
      "startLine": 357,
      "endLine": 358
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const response = {\r\n    items: items.slice(0, paginationManager.pageSize),\r\n    hasNext\r\n  };\r\n\r\n  if (hasNext) {",
      "startLine": 358,
      "endLine": 364
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const remainingItems = items.slice(paginationManager.pageSize);\r\n    response.nextCursor = paginationManager.createCursor(remainingItems, paginationManager.pageSize);\r\n  }\r\n\r\n  return response;\r\n}",
      "startLine": 364,
      "endLine": 371
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function getPaginatedItems(items, cursor = null) {\r\n  paginationManager.cleanup();\r\n\r\n  if (!cursor) {\r\n    return createPaginatedResponse(items);\r\n  }\r\n\r\n  try {",
      "startLine": 371,
      "endLine": 379
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const cursorData = paginationManager.getCursor(cursor);",
      "startLine": 379,
      "endLine": 380
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const remainingItems = cursorData.data;",
      "startLine": 380,
      "endLine": 381
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const response = createPaginatedResponse(remainingItems);\r\n\r\n    if (!response.hasNext) {\r\n      paginationManager.removeCursor(cursor);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    throw new Error('Invalid cursor');\r\n  }\r\n}",
      "startLine": 381,
      "endLine": 393
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export async function handlePaginatedList(args, dataFetcher, defaultWorkingDir) {",
      "startLine": 393,
      "endLine": 394
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const startTime = Date.now();",
      "startLine": 394,
      "endLine": 396
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const paramError = validateRequiredParams(args, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 396,
      "endLine": 399
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const dirValidation = validateWorkingDirectory(args.workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }\r\n\r\n  try {",
      "startLine": 399,
      "endLine": 405
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const data = await dataFetcher(args.workingDirectory, args);",
      "startLine": 405,
      "endLine": 406
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const result = getPaginatedItems(data, args.cursor);\r\n\r\n    return createSuccessResponse(result, startTime);\r\n  } catch (error) {\r\n    return createErrorResponse(error, startTime, {\r\n      operation: 'paginated_list',\r\n      workingDirectory: args.workingDirectory\r\n    });\r\n  }\r\n}",
      "startLine": 406,
      "endLine": 417
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "export function createTimeoutToolHandler(handler, toolName = 'Unknown Tool', timeoutMs = 30000) {\r\n  return async (args) => {",
      "startLine": 417,
      "endLine": 419
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/utilities.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\r\n    });\r\n\r\n    try {\r\n      return await Promise.race([\r\n        handler(args),\r\n        timeoutPromise\r\n      ]);\r\n    } catch (error) {\r\n      if (error.message.includes('timed out')) {\r\n        return createErrorResponse(`Tool ${toolName} timed out after ${timeoutMs}ms`);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n}",
      "startLine": 419,
      "endLine": 437
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "#!/usr/bin/env node\r\n\r\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\r\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\r\nimport { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';\r\nimport { allTools } from './core/mcp-tools.js';\r\n// Server configuration constants",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const SERVER_CONFIG = {\r\n  name: 'glootie-mcp',\r\n  version: '3.2.0',\r\n  description: 'Glootie active: Never do anything before calling mcp__glootie__begin.'\r\n};\r\n\r\n// Create and configure the server",
      "startLine": 7,
      "endLine": 14
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const server = new Server(\r\n  {\r\n    name: SERVER_CONFIG.name,\r\n    version: SERVER_CONFIG.version,\r\n    description: SERVER_CONFIG.description\r\n  },\r\n  {\r\n    capabilities: {\r\n      tools: {}\r\n    }\r\n  }\r\n);\r\n\r\n// Get all available tools",
      "startLine": 14,
      "endLine": 28
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const tools = allTools;\r\n\r\n// Register list_tools handler\r\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\r\n  return {\r\n    tools: tools\r\n  };\r\n});\r\n\r\n// Register call_tool handler\r\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\r\n  const { name, arguments: args } = request.params;",
      "startLine": 28,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const tool = tools.find(t => t.name === name);\r\n  if (!tool) {\r\n    throw new Error(`Unknown tool: ${name}`);\r\n  }\r\n\r\n  // Execute the tool\r\n  try {",
      "startLine": 41,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const result = await tool.handler(args);\r\n\r\n    // If the result is already in MCP content format, return it directly\r\n    if (result && result.content) {\r\n      return result;\r\n    }\r\n\r\n    // Otherwise, wrap it in standard format\r\n    return {\r\n      content: [{ type: \"text\", text: typeof result === 'string' ? result : JSON.stringify(result, null, 2) }]\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      content: [{ type: \"text\", text: `Error: ${error.message}` }],\r\n      isError: true\r\n    };\r\n  }\r\n});\r\n\r\n// Start the server\r\nasync function main() {\r\n  // Suppress stderr warnings that are not critical",
      "startLine": 48,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const originalStderrWrite = process.stderr.write;\r\n  process.stderr.write = function(string, encoding, fd) {",
      "startLine": 70,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const message = string.toString();\r\n    // Suppress ast-grep prebuild warnings (they're harmless)\r\n    if (!message.includes('@ast-grep/lang: no prebuild for Linux ARM64')) {\r\n      return originalStderrWrite.call(process.stderr, string, encoding, fd);\r\n    }\r\n    return true;\r\n  };",
      "startLine": 72,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const transport = new StdioServerTransport();\r\n  await server.connect(transport);\r\n  console.error('MCP Glootie server running on stdio');\r\n}\r\n\r\n// Auto-start when run directly\r\nif (import.meta.url === `file://${process.argv[1]}`) {\r\n  main().catch(error => {\r\n    console.error(`Failed to start MCP Glootie server: ${error}`);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n// Re-export only essential parts\r\nexport * from './core/mcp-tools.js';\r\nexport { server };",
      "startLine": 80,
      "endLine": 95
    }
  ]
}