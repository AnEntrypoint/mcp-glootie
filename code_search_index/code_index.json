{
  "timestamp": 1758088071189,
  "chunks": [
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/app/page.tsx",
      "content": "import { TaskManager } from '@/components/task-manager'\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto py-10\">\n        <div className=\"text-center mb-10\">\n          <h1 className=\"text-4xl font-bold tracking-tight\">Task Manager</h1>\n          <p className=\"text-muted-foreground mt-4\">\n            A modern task management application built with Next.js and shadcn/ui\n          </p>\n        </div>\n        <TaskManager />\n      </div>\n    </main>\n  )\n}",
      "startLine": 0,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "'use client'\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card'\nimport { Button } from './ui/button'\nimport { Input } from './ui/input'\nimport { formatDate, generateId } from '@/lib/utils'\ninterface Task {\n  id: string\n  title: string\n  description: string\n  completed: boolean\n  priority: 'low' | 'medium' | 'high'\n  createdAt: Date\n  dueDate?: Date\n}\nexport function TaskManager() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  const [newTask, setNewTask] = useState({ title: '', description: '', priority: 'medium' as const })\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')\n  useEffect(() => {",
      "startLine": 0,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "const savedTasks = localStorage.getItem('tasks')\n    if (savedTasks) {\n      setTasks(JSON.parse(savedTasks).map((task: any) => ({\n        ...task,\n        createdAt: new Date(task.createdAt),\n        dueDate: task.dueDate ? new Date(task.dueDate) : undefined\n      })))\n    }\n  }, [])\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }, [tasks])",
      "startLine": 21,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "const addTask = () => {\n    if (!newTask.title.trim()) return",
      "startLine": 33,
      "endLine": 35
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "const task: Task = {\n      id: generateId(),\n      title: newTask.title,\n      description: newTask.description,\n      priority: newTask.priority,\n      completed: false,\n      createdAt: new Date()\n    }\n    setTasks(prev => [...prev, task])\n    setNewTask({ title: '', description: '', priority: 'medium' })\n  }",
      "startLine": 35,
      "endLine": 46
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "const toggleTask = (id: string) => {\n    setTasks(prev => prev.map(task =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ))\n  }",
      "startLine": 46,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "const deleteTask = (id: string) => {\n    setTasks(prev => prev.filter(task => task.id !== id))\n  }",
      "startLine": 51,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/task-manager.tsx",
      "content": "const filteredTasks = tasks.filter(task => {\n    if (filter === 'active') return !task.completed\n    if (filter === 'completed') return task.completed\n    return true\n  })\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Add New Task</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Input\n            placeholder=\"Task title...\"\n            value={newTask.title}\n            onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}\n          />\n          <Input\n            placeholder=\"Task description...\"\n            value={newTask.description}\n            onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}\n          />\n          <select\n            value={newTask.priority}\n            onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value as any }))}\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n          >\n            <option value=\"low\">Low Priority</option>\n            <option value=\"medium\">Medium Priority</option>\n            <option value=\"high\">High Priority</option>\n          </select>\n          <Button onClick={addTask}>Add Task</Button>\n        </CardContent>\n      </Card>\n      <div className=\"flex gap-2 mb-4\">\n        <Button variant={filter === 'all' ? 'default' : 'outline'} onClick={() => setFilter('all')}>\n          All ({tasks.length})\n        </Button>\n        <Button variant={filter === 'active' ? 'default' : 'outline'} onClick={() => setFilter('active')}>\n          Active ({tasks.filter(t => !t.completed).length})\n        </Button>\n        <Button variant={filter === 'completed' ? 'default' : 'outline'} onClick={() => setFilter('completed')}>\n          Completed ({tasks.filter(t => t.completed).length})\n        </Button>\n      </div>\n      <div className=\"space-y-4\">\n        {filteredTasks.map(task => (\n          <Card key={task.id} className={task.completed ? 'opacity-60' : ''}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className={`font-medium ${task.completed ? 'line-through' : ''}`}>\n                    {task.title}\n                  </h3>\n                  {task.description && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {task.description}\n                    </p>\n                  )}\n                  <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                    <span>Priority: {task.priority}</span>\n                    <span>Created: {formatDate(task.createdAt)}</span>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => toggleTask(task.id)}\n                  >\n                    {task.completed ? 'Undo' : 'Complete'}\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => deleteTask(task.id)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\nexport default TaskManager",
      "startLine": 54,
      "endLine": 143
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/button.tsx",
      "content": "const buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}",
      "startLine": 5,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/button.tsx",
      "content": "const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {",
      "startLine": 38,
      "endLine": 40
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/button.tsx",
      "content": "const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\nexport { Button, buttonVariants }",
      "startLine": 40,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "const Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"",
      "startLine": 3,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"",
      "startLine": 17,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "const CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"",
      "startLine": 24,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "const CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"",
      "startLine": 38,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"",
      "startLine": 49,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/card.tsx",
      "content": "const CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }",
      "startLine": 56,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/input.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/components/ui/input.tsx",
      "content": "const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\nexport { Input }",
      "startLine": 5,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\nexport function formatDate(date: Date | string): string {",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/lib/utils.ts",
      "content": "const d = new Date(date)\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  })\n}\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9)\n}",
      "startLine": 7,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071506382/tailwind.config.js",
      "content": "'./components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}",
      "startLine": 0,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/app/page.tsx",
      "content": "import { TaskManager } from '@/components/task-manager'\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto py-10\">\n        <div className=\"text-center mb-10\">\n          <h1 className=\"text-4xl font-bold tracking-tight\">Task Manager</h1>\n          <p className=\"text-muted-foreground mt-4\">\n            A modern task management application built with Next.js and shadcn/ui\n          </p>\n        </div>\n        <TaskManager />\n      </div>\n    </main>\n  )\n}",
      "startLine": 0,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "'use client'\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card'\nimport { Button } from './ui/button'\nimport { Input } from './ui/input'\nimport { formatDate, generateId } from '@/lib/utils'\ninterface Task {\n  id: string\n  title: string\n  description: string\n  completed: boolean\n  priority: 'low' | 'medium' | 'high'\n  createdAt: Date\n  dueDate?: Date\n}\nexport function TaskManager() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  const [newTask, setNewTask] = useState({ title: '', description: '', priority: 'medium' as const })\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')\n  useEffect(() => {",
      "startLine": 0,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "const savedTasks = localStorage.getItem('tasks')\n    if (savedTasks) {\n      setTasks(JSON.parse(savedTasks).map((task: any) => ({\n        ...task,\n        createdAt: new Date(task.createdAt),\n        dueDate: task.dueDate ? new Date(task.dueDate) : undefined\n      })))\n    }\n  }, [])\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }, [tasks])",
      "startLine": 21,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "const addTask = () => {\n    if (!newTask.title.trim()) return",
      "startLine": 33,
      "endLine": 35
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "const task: Task = {\n      id: generateId(),\n      title: newTask.title,\n      description: newTask.description,\n      priority: newTask.priority,\n      completed: false,\n      createdAt: new Date()\n    }\n    setTasks(prev => [...prev, task])\n    setNewTask({ title: '', description: '', priority: 'medium' })\n  }",
      "startLine": 35,
      "endLine": 46
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "const toggleTask = (id: string) => {\n    setTasks(prev => prev.map(task =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ))\n  }",
      "startLine": 46,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "const deleteTask = (id: string) => {\n    setTasks(prev => prev.filter(task => task.id !== id))\n  }",
      "startLine": 51,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/task-manager.tsx",
      "content": "const filteredTasks = tasks.filter(task => {\n    if (filter === 'active') return !task.completed\n    if (filter === 'completed') return task.completed\n    return true\n  })\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Add New Task</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Input\n            placeholder=\"Task title...\"\n            value={newTask.title}\n            onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}\n          />\n          <Input\n            placeholder=\"Task description...\"\n            value={newTask.description}\n            onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}\n          />\n          <select\n            value={newTask.priority}\n            onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value as any }))}\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n          >\n            <option value=\"low\">Low Priority</option>\n            <option value=\"medium\">Medium Priority</option>\n            <option value=\"high\">High Priority</option>\n          </select>\n          <Button onClick={addTask}>Add Task</Button>\n        </CardContent>\n      </Card>\n      <div className=\"flex gap-2 mb-4\">\n        <Button variant={filter === 'all' ? 'default' : 'outline'} onClick={() => setFilter('all')}>\n          All ({tasks.length})\n        </Button>\n        <Button variant={filter === 'active' ? 'default' : 'outline'} onClick={() => setFilter('active')}>\n          Active ({tasks.filter(t => !t.completed).length})\n        </Button>\n        <Button variant={filter === 'completed' ? 'default' : 'outline'} onClick={() => setFilter('completed')}>\n          Completed ({tasks.filter(t => t.completed).length})\n        </Button>\n      </div>\n      <div className=\"space-y-4\">\n        {filteredTasks.map(task => (\n          <Card key={task.id} className={task.completed ? 'opacity-60' : ''}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className={`font-medium ${task.completed ? 'line-through' : ''}`}>\n                    {task.title}\n                  </h3>\n                  {task.description && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {task.description}\n                    </p>\n                  )}\n                  <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                    <span>Priority: {task.priority}</span>\n                    <span>Created: {formatDate(task.createdAt)}</span>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => toggleTask(task.id)}\n                  >\n                    {task.completed ? 'Undo' : 'Complete'}\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => deleteTask(task.id)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\nexport default TaskManager",
      "startLine": 54,
      "endLine": 143
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/button.tsx",
      "content": "const buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}",
      "startLine": 5,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/button.tsx",
      "content": "const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {",
      "startLine": 38,
      "endLine": 40
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/button.tsx",
      "content": "const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\nexport { Button, buttonVariants }",
      "startLine": 40,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "const Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"",
      "startLine": 3,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"",
      "startLine": 17,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "const CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"",
      "startLine": 24,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "const CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"",
      "startLine": 38,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"",
      "startLine": 49,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/card.tsx",
      "content": "const CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }",
      "startLine": 56,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/input.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/components/ui/input.tsx",
      "content": "const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\nexport { Input }",
      "startLine": 5,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\nexport function formatDate(date: Date | string): string {",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/lib/utils.ts",
      "content": "const d = new Date(date)\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  })\n}\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9)\n}",
      "startLine": 7,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758071794248/tailwind.config.js",
      "content": "'./components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}",
      "startLine": 0,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/app/layout.tsx",
      "content": "import type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/app/layout.tsx",
      "content": "const inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Task Manager',\n  description: 'A performant task management application',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>{children}</body>\n    </html>\n  )\n}",
      "startLine": 4,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/app/page.tsx",
      "content": "'use client'\nimport { TaskManager } from '@/components/task-manager'\nimport { TASK_STATUSES } from '@/lib/constants/strings'\nimport { ErrorBoundary } from '@/components/ErrorBoundary'\nimport { FunctionalErrorBoundary } from '@/components/ErrorBoundaryFallback'\n\nexport default function Home() {",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/app/page.tsx",
      "content": "const handleError = (error: Error, errorInfo?: any) => {\n    console.error('Home page error:', error, errorInfo)\n  }\n\n  return (\n    <FunctionalErrorBoundary onError={handleError}>\n      <main className=\"min-h-screen bg-background\">\n        <div className=\"container mx-auto py-10\">\n          <div className=\"text-center mb-10\">\n            <h1 className=\"text-4xl font-bold tracking-tight\">{TASK_STATUSES.TITLE}</h1>\n            <p className=\"text-muted-foreground mt-4\">\n              {TASK_STATUSES.SUBTITLE}\n            </p>\n          </div>\n          <ErrorBoundary onError={handleError}>\n            <TaskManager />\n          </ErrorBoundary>\n        </div>\n      </main>\n    </FunctionalErrorBoundary>\n  )\n}",
      "startLine": 8,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const { performance } = require('perf_hooks')",
      "startLine": 0,
      "endLine": 1
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const React = require('react')\nconst { renderToStaticMarkup } = require('react-dom/server')",
      "startLine": 1,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const TaskManager = require('./components/task-manager.tsx').TaskManager",
      "startLine": 4,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const useTasks = require('./hooks/useTasks.js').useTasks",
      "startLine": 5,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const useDateUtils = require('./hooks/useDateUtils.js').useDateUtils",
      "startLine": 6,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const generateMockTasks = (count) => {\n  return Array.from({ length: count }, (_, i) => ({\n    id: `task-${i}`,\n    title: `Task ${i}`,\n    description: `Description for task ${i}`,\n    priority: ['low', 'medium', 'high'][i % 3],\n    completed: i % 2 === 0,\n    createdAt: new Date(Date.now() - i * 86400000)\n  }))\n}",
      "startLine": 8,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const mockUseTasks = (tasks) => ({\n  tasks,\n  newTask: { title: '', description: '', priority: 'medium' },\n  setNewTask: () => {},\n  filter: 'all',\n  setFilter: () => {},\n  addTask: () => {},\n  toggleTask: () => {},\n  deleteTask: () => {},\n  filteredTasks: tasks,\n  taskCounts: {\n    all: tasks.length,\n    active: tasks.filter(t => !t.completed).length,\n    completed: tasks.filter(t => t.completed).length\n  }\n})",
      "startLine": 19,
      "endLine": 36
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const mockUseDateUtils = () => ({\n  formatDate: (date) => date.toLocaleDateString(),\n  formatTime: () => '',\n  formatDateTime: () => '',\n  getRelativeTime: () => '',\n  isToday: () => false,\n  isYesterday: () => false,\n  getWeekDates: () => [],\n  isValidDate: () => true,\n  parseDate: () => null\n})",
      "startLine": 36,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const benchmarkRender = (taskCount, iterations = 10) => {",
      "startLine": 48,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const mockTasks = generateMockTasks(taskCount)",
      "startLine": 49,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const results = []\n\n  for (let i = 0; i < iterations; i++) {",
      "startLine": 51,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const startTime = performance.now()",
      "startLine": 54,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const markup = renderToStaticMarkup(\n      React.createElement(TaskManager, {\n        useTasks: () => mockUseTasks(mockTasks),\n        useDateUtils: () => mockUseDateUtils()\n      })\n    )",
      "startLine": 56,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const endTime = performance.now()\n    results.push(endTime - startTime)\n  }",
      "startLine": 63,
      "endLine": 67
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const avgTime = results.reduce((a, b) => a + b, 0) / results.length",
      "startLine": 67,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const minTime = Math.min(...results)",
      "startLine": 68,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const maxTime = Math.max(...results)\n\n  return {\n    taskCount,\n    avgTime,\n    minTime,\n    maxTime,\n    iterations\n  }\n}",
      "startLine": 69,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const runBenchmarks = () => {",
      "startLine": 80,
      "endLine": 81
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const taskCounts = [10, 50, 100, 200, 500]\n\n  console.log('TaskManager Performance Benchmarks')\n  console.log('==================================')\n  console.log()\n\n  taskCounts.forEach(count => {",
      "startLine": 81,
      "endLine": 88
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/benchmark.js",
      "content": "const result = benchmarkRender(count, 5)\n    console.log(`${count} tasks:`)\n    console.log(`  Average render time: ${result.avgTime.toFixed(2)}ms`)\n    console.log(`  Min render time: ${result.minTime.toFixed(2)}ms`)\n    console.log(`  Max render time: ${result.maxTime.toFixed(2)}ms`)\n    console.log(`  Time per task: ${(result.avgTime / count).toFixed(4)}ms`)\n    console.log()\n  })\n\n  console.log('Optimizations implemented:')\n  console.log('- React.memo for TaskItem and FilterButton components')\n  console.log('- useCallback for all event handlers')\n  console.log('- useMemo for useDateUtils functions')\n  console.log('- Stable function references in useTasks hook')\n  console.log('- Memoized computed values (filteredTasks, taskCounts)')\n}\n\nif (require.main === module) {\n  runBenchmarks()\n}\n\nmodule.exports = { benchmarkRender, runBenchmarks }",
      "startLine": 88,
      "endLine": 109
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ErrorBoundary.tsx",
      "content": "'use client'\nimport React, { Component, ErrorInfo, ReactNode } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card'\nimport { Button } from './ui/button'\nimport { ERROR_MESSAGES } from '@/lib/constants/strings'\nimport { ErrorHandler } from '@/hooks/useErrorBoundary'\n\ninterface Props {\n  children: ReactNode\n  fallback?: ReactNode\n  onError?: (error: Error, errorInfo: ErrorInfo) => void\n}\n\ninterface State {\n  hasError: boolean\n  error?: Error\n  errorInfo?: ErrorInfo\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error }\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    ErrorHandler.logError(error, 'ErrorBoundary')\n    this.props.onError?.(error, errorInfo)\n    this.setState({ errorInfo })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback\n      }\n\n      return (\n        <Card className=\"max-w-md mx-auto mt-8\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">{ERROR_MESSAGES.SOMETHINWENT_WRONG}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              {ErrorHandler.getUserFriendlyMessage(this.state.error || new Error(ERROR_MESSAGES.UNEXPECTED_ERROR))}\n            </p>\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"mb-4\">\n                <summary className=\"cursor-pointer text-sm font-medium\">Error Details</summary>\n                <pre className=\"mt-2 text-xs bg-muted p-2 rounded overflow-auto\">\n                  {this.state.error.stack}\n                </pre>\n              </details>\n            )}\n            <Button\n              onClick={() => this.setState({ hasError: false, error: undefined, errorInfo: undefined })}\n              variant=\"outline\"\n            >\n              {ERROR_MESSAGES.TRY_AGAIN}\n            </Button>\n          </CardContent>\n        </Card>\n      )\n    }\n\n    return this.props.children\n  }\n}",
      "startLine": 0,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ErrorBoundaryFallback.tsx",
      "content": "'use client'\nimport React from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card'\nimport { Button } from './ui/button'\nimport { ERROR_MESSAGES } from '@/lib/constants/strings'\nimport { ErrorHandler, useErrorBoundary } from '@/hooks/useErrorBoundary'\n\ninterface ErrorFallbackProps {\n  error: Error\n  resetError: () => void\n  errorInfo?: any\n}\n\nexport function ErrorFallback({ error, resetError, errorInfo }: ErrorFallbackProps) {\n\n  return (\n    <Card className=\"max-w-md mx-auto mt-8\">\n      <CardHeader>\n        <CardTitle className=\"text-destructive\">{ERROR_MESSAGES.SOMETHINWENT_WRONG}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          {ErrorHandler.getUserFriendlyMessage(error)}\n        </p>\n        {process.env.NODE_ENV === 'development' && (\n          <details className=\"mb-4\">\n            <summary className=\"cursor-pointer text-sm font-medium\">Error Details</summary>\n            <div className=\"mt-2 space-y-2\">\n              <pre className=\"text-xs bg-muted p-2 rounded overflow-auto\">\n                {error.stack}\n              </pre>\n              {errorInfo && (\n                <pre className=\"text-xs bg-muted p-2 rounded overflow-auto\">\n                  {JSON.stringify(errorInfo, null, 2)}\n                </pre>\n              )}\n            </div>\n          </details>\n        )}\n        <Button onClick={resetError} variant=\"outline\">\n          {ERROR_MESSAGES.TRY_AGAIN}\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n\ninterface FunctionalErrorBoundaryProps {\n  children: React.ReactNode\n  fallback?: React.ComponentType<ErrorFallbackProps>\n  onError?: (error: Error, errorInfo?: any) => void\n}\n\nexport function FunctionalErrorBoundary({\n  children,\n  fallback: FallbackComponent = ErrorFallback,\n  onError\n}: FunctionalErrorBoundaryProps) {\n  const { error, errorInfo, resetError, captureError } = useErrorBoundary()\n\n  if (error) {\n    onError?.(error, errorInfo)\n    return <FallbackComponent error={error} resetError={resetError} errorInfo={errorInfo} />\n  }\n\n  return <>{children}</>\n}",
      "startLine": 0,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "'use client'\nimport React, { useCallback, memo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card'\nimport { Button } from './ui/button'\nimport { Input } from './ui/input'\nimport { useTasks } from '@/hooks/useTasks'\nimport { useDateUtils } from '@/hooks/useDateUtils'\nimport { useTaskOperations } from '@/hooks/useFormUtils'\nimport { useErrorHandler } from '@/hooks/useErrorBoundary'\nimport { TASK_STATUSES, PRIORITIES, FILTERS } from '@/lib/constants/strings'\nimport { Task } from '@/types/task'\n\ninterface TaskItemProps {\n  task: Task\n  toggleTask: (id: string) => void\n  deleteTask: (id: string) => void\n  formatDate: (date: Date) => string\n  handleError: (error: Error, operation: string) => void\n}\n\ninterface FilterButtonProps {\n  variant: 'default' | 'outline'\n  onClick: () => void\n  children: React.ReactNode\n}",
      "startLine": 0,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const FilterButton = memo(({ variant, onClick, children }: FilterButtonProps) => (\n  <Button variant={variant} onClick={onClick}>\n    {children}\n  </Button>\n))\n\nFilterButton.displayName = 'FilterButton'",
      "startLine": 27,
      "endLine": 35
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const TaskItem = memo(({ task, toggleTask, deleteTask, formatDate, handleError }: TaskItemProps) => {",
      "startLine": 35,
      "endLine": 36
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleToggle = useCallback(() => {\n    try {\n      toggleTask(task.id)\n    } catch (error) {\n      handleError(error as Error, 'toggleTask')\n    }\n  }, [task.id, toggleTask, handleError])",
      "startLine": 36,
      "endLine": 44
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleDelete = useCallback(() => {\n    try {\n      deleteTask(task.id)\n    } catch (error) {\n      handleError(error as Error, 'deleteTask')\n    }\n  }, [task.id, deleteTask, handleError])\n\n  return (\n    <Card key={task.id} className={task.completed ? 'opacity-60' : ''}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <h3 className={`font-medium ${task.completed ? 'line-through' : ''}`}>\n              {task.title}\n            </h3>\n            {task.description && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {task.description}\n              </p>\n            )}\n            <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n              <span>{TASK_STATUSES.PRIORITY_LABEL}{task.priority}</span>\n              <span>{TASK_STATUSES.CREATED_LABEL}{formatDate(task.createdAt)}</span>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleToggle}\n            >\n              {task.completed ? TASK_STATUSES.UNDO : TASK_STATUSES.COMPLETE}\n            </Button>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={handleDelete}\n            >\n              {TASK_STATUSES.DELETE}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n})\n\nTaskItem.displayName = 'TaskItem'\nexport function TaskManager() {\n  const { formatDate } = useDateUtils()\n  const { validateTask } = useTaskOperations()\n  const { handleError } = useErrorHandler()\n\n  const {\n    tasks,\n    newTask,\n    setNewTask,\n    filter,\n    setFilter,\n    addTask,\n    toggleTask,\n    deleteTask,\n    filteredTasks,\n    taskCounts\n  } = useTasks()",
      "startLine": 44,
      "endLine": 111
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTask(prev => ({ ...prev, title: e.target.value }))\n  }, [])",
      "startLine": 111,
      "endLine": 115
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTask(prev => ({ ...prev, description: e.target.value }))\n  }, [])",
      "startLine": 115,
      "endLine": 119
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handlePriorityChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n    setNewTask(prev => ({ ...prev, priority: e.target.value as any }))\n  }, [])",
      "startLine": 119,
      "endLine": 123
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleAddTask = useCallback(() => {\n    try {",
      "startLine": 123,
      "endLine": 125
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const validationErrors = validateTask(newTask)\n      if (validationErrors.length > 0) {\n        alert(validationErrors.join('\\n'))\n        return\n      }\n      addTask()\n    } catch (error) {\n      handleError(error as Error, 'addTask')\n    }\n  }, [newTask, validateTask, addTask, handleError])",
      "startLine": 125,
      "endLine": 136
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleFilterAll = useCallback(() => setFilter(FILTERS.ALL), [setFilter])",
      "startLine": 136,
      "endLine": 137
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleFilterActive = useCallback(() => setFilter(FILTERS.ACTIVE), [setFilter])",
      "startLine": 137,
      "endLine": 138
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/task-manager.tsx",
      "content": "const handleFilterCompleted = useCallback(() => setFilter(FILTERS.COMPLETED), [setFilter])\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>{TASK_STATUSES.ADD_NEW_TASK}</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Input\n            placeholder={TASK_STATUSES.TASK_TITLE}\n            value={newTask.title}\n            onChange={handleTitleChange}\n          />\n          <Input\n            placeholder={TASK_STATUSES.TASK_DESCRIPTION}\n            value={newTask.description}\n            onChange={handleDescriptionChange}\n          />\n          <select\n            value={newTask.priority}\n            onChange={handlePriorityChange}\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n          >\n            <option value={PRIORITIES.LOW}>{TASK_STATUSES.LOW_PRIORITY}</option>\n            <option value={PRIORITIES.MEDIUM}>{TASK_STATUSES.MEDIUM_PRIORITY}</option>\n            <option value={PRIORITIES.HIGH}>{TASK_STATUSES.HIGH_PRIORITY}</option>\n          </select>\n          <Button onClick={handleAddTask}>{TASK_STATUSES.ADD}</Button>\n        </CardContent>\n      </Card>\n      <div className=\"flex gap-2 mb-4\">\n        <FilterButton variant={filter === FILTERS.ALL ? 'default' : 'outline'} onClick={handleFilterAll}>\n          {TASK_STATUSES.ALL} ({taskCounts.all})\n        </FilterButton>\n        <FilterButton variant={filter === FILTERS.ACTIVE ? 'default' : 'outline'} onClick={handleFilterActive}>\n          {TASK_STATUSES.ACTIVE} ({taskCounts.active})\n        </FilterButton>\n        <FilterButton variant={filter === FILTERS.COMPLETED ? 'default' : 'outline'} onClick={handleFilterCompleted}>\n          {TASK_STATUSES.COMPLETED} ({taskCounts.completed})\n        </FilterButton>\n      </div>\n      <div className=\"space-y-4\">\n        {filteredTasks.map(task => (\n          <TaskItem\n            key={task.id}\n            task={task}\n            toggleTask={toggleTask}\n            deleteTask={deleteTask}\n            formatDate={formatDate}\n            handleError={handleError}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\nexport default TaskManager",
      "startLine": 138,
      "endLine": 196
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/button.tsx",
      "content": "const buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}",
      "startLine": 5,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/button.tsx",
      "content": "const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {",
      "startLine": 38,
      "endLine": 40
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/button.tsx",
      "content": "const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\nexport { Button, buttonVariants }",
      "startLine": 40,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "const Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"",
      "startLine": 3,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"",
      "startLine": 17,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "const CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"",
      "startLine": 24,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "const CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"",
      "startLine": 38,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"",
      "startLine": 49,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/card.tsx",
      "content": "const CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }",
      "startLine": 56,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const Dialog = DialogPrimitive.Root",
      "startLine": 5,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogTrigger = DialogPrimitive.Trigger",
      "startLine": 7,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogPortal = DialogPrimitive.Portal",
      "startLine": 9,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogClose = DialogPrimitive.Close",
      "startLine": 11,
      "endLine": 13
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName",
      "startLine": 13,
      "endLine": 28
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName",
      "startLine": 28,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"",
      "startLine": 52,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"",
      "startLine": 66,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName",
      "startLine": 80,
      "endLine": 95
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/dialog.tsx",
      "content": "const DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}",
      "startLine": 95,
      "endLine": 118
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/input.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/components/ui/input.tsx",
      "content": "const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\nexport { Input }",
      "startLine": 5,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/dialog-test.tsx",
      "content": "import * as React from \"react\"\nimport { Button } from \"./components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"./components/ui/dialog\"\n\nexport function DialogDemo() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">Edit Profile</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Edit profile</DialogTitle>\n          <DialogDescription>\n            Make changes to your profile here. Click save when you're done.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <label htmlFor=\"name\" className=\"text-right\">\n              Name\n            </label>\n            <input\n              id=\"name\"\n              defaultValue=\"Pedro Duarte\"\n              className=\"col-span-3\"\n            />\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <label htmlFor=\"username\" className=\"text-right\">\n              Username\n            </label>\n            <input\n              id=\"username\"\n              defaultValue=\"@peduarte\"\n              className=\"col-span-3\"\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button type=\"submit\">Save changes</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}",
      "startLine": 0,
      "endLine": 53
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "'use client'\nimport { useCallback, useMemo } from 'react'\n\nexport function useDateUtils() {",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const formatDate = useCallback((date: Date | string): string => {",
      "startLine": 4,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const d = new Date(date)\n    return d.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    })\n  }, [])",
      "startLine": 5,
      "endLine": 13
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const formatTime = useCallback((date: Date | string): string => {",
      "startLine": 13,
      "endLine": 14
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const d = new Date(date)\n    return d.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }, [])",
      "startLine": 14,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const formatDateTime = useCallback((date: Date | string): string => {",
      "startLine": 21,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const d = new Date(date)\n    return d.toLocaleString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }, [])",
      "startLine": 22,
      "endLine": 32
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const getRelativeTime = useCallback((date: Date | string): string => {",
      "startLine": 32,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const now = new Date()",
      "startLine": 33,
      "endLine": 34
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const past = new Date(date)",
      "startLine": 34,
      "endLine": 35
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const diffMs = now.getTime() - past.getTime()",
      "startLine": 35,
      "endLine": 37
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const diffMinutes = Math.floor(diffMs / (1000 * 60))",
      "startLine": 37,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const diffHours = Math.floor(diffMs / (1000 * 60 * 60))",
      "startLine": 38,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24))\n\n    if (diffMinutes < 1) return 'just now'\n    if (diffMinutes < 60) return `${diffMinutes}m ago`\n    if (diffHours < 24) return `${diffHours}h ago`\n    if (diffDays < 7) return `${diffDays}d ago`\n\n    return formatDate(date)\n  }, [formatDate])",
      "startLine": 39,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const isToday = useCallback((date: Date | string): boolean => {",
      "startLine": 49,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const d = new Date(date)",
      "startLine": 50,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const today = new Date()\n    return d.toDateString() === today.toDateString()\n  }, [])",
      "startLine": 51,
      "endLine": 55
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const isYesterday = useCallback((date: Date | string): boolean => {",
      "startLine": 55,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const d = new Date(date)",
      "startLine": 56,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const yesterday = new Date()\n    yesterday.setDate(yesterday.getDate() - 1)\n    return d.toDateString() === yesterday.toDateString()\n  }, [])",
      "startLine": 57,
      "endLine": 62
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const getWeekDates = useCallback((date: Date | string = new Date()): Date[] => {",
      "startLine": 62,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const d = new Date(date)",
      "startLine": 63,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const day = d.getDay()",
      "startLine": 64,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const diff = d.getDate() - day",
      "startLine": 65,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const sunday = new Date(d.setDate(diff))\n\n    return Array.from({ length: 7 }, (_, i) => {",
      "startLine": 66,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const nextDay = new Date(sunday)\n      nextDay.setDate(sunday.getDate() + i)\n      return nextDay\n    })\n  }, [])",
      "startLine": 69,
      "endLine": 75
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const isValidDate = useCallback((date: any): date is Date => {\n    return date instanceof Date && !isNaN(date.getTime())\n  }, [])",
      "startLine": 75,
      "endLine": 79
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const parseDate = useCallback((dateString: string): Date | null => {",
      "startLine": 79,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useDateUtils.ts",
      "content": "const date = new Date(dateString)\n    return isValidDate(date) ? date : null\n  }, [isValidDate])\n\n  return useMemo(() => ({\n    formatDate,\n    formatTime,\n    formatDateTime,\n    getRelativeTime,\n    isToday,\n    isYesterday,\n    getWeekDates,\n    isValidDate,\n    parseDate\n  }), [\n    formatDate,\n    formatTime,\n    formatDateTime,\n    getRelativeTime,\n    isToday,\n    isYesterday,\n    getWeekDates,\n    isValidDate,\n    parseDate\n  ])\n}",
      "startLine": 80,
      "endLine": 105
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useErrorBoundary.ts",
      "content": "'use client'\nimport { useState, useCallback } from 'react'\n\ninterface ErrorInfo {\n  error: Error\n  componentStack: string\n}\n\ninterface UseErrorBoundaryReturn {\n  error: Error | null\n  errorInfo: ErrorInfo | null\n  resetError: () => void\n  captureError: (error: Error, errorInfo?: any) => void\n}\n\nexport function useErrorBoundary(): UseErrorBoundaryReturn {\n  const [error, setError] = useState<Error | null>(null)\n  const [errorInfo, setErrorInfo] = useState<ErrorInfo | null>(null)",
      "startLine": 0,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useErrorBoundary.ts",
      "content": "const resetError = useCallback(() => {\n    setError(null)\n    setErrorInfo(null)\n  }, [])",
      "startLine": 19,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useErrorBoundary.ts",
      "content": "const captureError = useCallback((error: Error, errorInfo?: any) => {\n    console.error('Error captured by boundary:', error, errorInfo)\n    setError(error)\n    setErrorInfo(errorInfo ? { error, componentStack: errorInfo.componentStack || '' } : null)\n  }, [])\n\n  return {\n    error,\n    errorInfo,\n    resetError,\n    captureError\n  }\n}\n\nexport class ErrorHandler {\n  static logError(error: Error, context?: string): void {\n    console.group(`Error${context ? ` in ${context}` : ''}`)\n    console.error('Error:', error)\n    console.error('Stack:', error.stack)\n    console.groupEnd()\n  }\n\n  static getUserFriendlyMessage(error: Error): string {\n    if (error.name === 'NetworkError') {\n      return 'Unable to connect to the server. Please check your internet connection.'\n    }\n\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\n      return 'Failed to load data. Please try again later.'\n    }\n\n    if (error.name === 'QuotaExceededError') {\n      return 'Storage limit reached. Please clear some data to continue.'\n    }\n\n    return error.message || 'An unexpected error occurred'\n  }\n\n  static isRetryableError(error: Error): boolean {",
      "startLine": 24,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useErrorBoundary.ts",
      "content": "const retryableErrors = [\n      'NetworkError',\n      'TimeoutError',\n      'AbortError'\n    ]\n\n    return retryableErrors.includes(error.name) ||\n      error.message.includes('network') ||\n      error.message.includes('timeout') ||\n      error.message.includes('abort')\n  }\n}\n\nexport function useErrorHandler() {",
      "startLine": 63,
      "endLine": 77
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useErrorBoundary.ts",
      "content": "const handleError = useCallback((error: Error, context?: string) => {\n    ErrorHandler.logError(error, context)\n    return ErrorHandler.getUserFriendlyMessage(error)\n  }, [])",
      "startLine": 77,
      "endLine": 82
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useErrorBoundary.ts",
      "content": "const isRetryable = useCallback((error: Error) => {\n    return ErrorHandler.isRetryableError(error)\n  }, [])\n\n  return {\n    handleError,\n    isRetryable,\n    ErrorHandler\n  }\n}",
      "startLine": 82,
      "endLine": 91
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "'use client'\nimport { useState, useCallback } from 'react'\nimport React from 'react'\nimport { Task } from '@/types/task'\nimport { generateId } from '@/lib/utils'\n\nexport function useFormValidation<T extends Record<string, any>>(initialState: T, validationRules?: Record<keyof T, (value: any) => boolean>) {\n  const [formData, setFormData] = useState<T>(initialState)\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({})",
      "startLine": 0,
      "endLine": 10
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const validateField = useCallback((field: keyof T, value: any): boolean => {\n    if (!validationRules || !validationRules[field]) return true\n    return validationRules[field](value)\n  }, [validationRules])",
      "startLine": 10,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const updateField = useCallback((field: keyof T, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n\n    if (validationRules && validationRules[field]) {",
      "startLine": 15,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const isValid = validateField(field, value)\n      if (!isValid) {\n        setErrors(prev => ({ ...prev, [field]: 'Invalid value' }))\n      } else {\n        setErrors(prev => {",
      "startLine": 19,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const newErrors = { ...prev }\n          delete newErrors[field]\n          return newErrors\n        })\n      }\n    }\n  }, [validationRules, validateField])",
      "startLine": 24,
      "endLine": 32
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const resetForm = useCallback(() => {\n    setFormData(initialState)\n    setErrors({})\n  }, [initialState])",
      "startLine": 32,
      "endLine": 37
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const isFormValid = Object.keys(errors).length === 0\n\n  return {\n    formData,\n    errors,\n    updateField,\n    resetForm,\n    isFormValid,\n    validateField\n  }\n}\n\nexport function useTaskOperations() {",
      "startLine": 37,
      "endLine": 50
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const createTask = useCallback((taskData: Omit<Task, 'id' | 'completed' | 'createdAt'>): Task => {\n    return {\n      ...taskData,\n      id: generateId(),\n      completed: false,\n      createdAt: new Date()\n    }\n  }, [])",
      "startLine": 50,
      "endLine": 59
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const cloneTask = useCallback((task: Task, overrides?: Partial<Task>): Task => {\n    return {\n      ...task,\n      ...overrides,\n      id: generateId(),\n      createdAt: new Date()\n    }\n  }, [])",
      "startLine": 59,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const validateTask = useCallback((task: Partial<Task>): string[] => {",
      "startLine": 68,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const errors: string[] = []\n\n    if (!task.title?.trim()) {\n      errors.push('Task title is required')\n    }\n\n    if (task.title && task.title.length > 100) {\n      errors.push('Task title must be less than 100 characters')\n    }\n\n    if (task.description && task.description.length > 500) {\n      errors.push('Task description must be less than 500 characters')\n    }\n\n    return errors\n  }, [])\n\n  return {\n    createTask,\n    cloneTask,\n    validateTask\n  }\n}\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  React.useEffect(() => {",
      "startLine": 69,
      "endLine": 97
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useFormUtils.ts",
      "content": "const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}",
      "startLine": 97,
      "endLine": 107
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useLocalStorage.ts",
      "content": "'use client'\nimport { useState, useEffect } from 'react'\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(initialValue)\n\n  useEffect(() => {\n    try {",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useLocalStorage.ts",
      "content": "const item = window.localStorage.getItem(key)\n      if (item) {\n        setStoredValue(JSON.parse(item))\n      }\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error)\n    }\n  }, [key])",
      "startLine": 8,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useLocalStorage.ts",
      "content": "const setValue = (value: T | ((val: T) => T)) => {\n    try {",
      "startLine": 17,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useLocalStorage.ts",
      "content": "const valueToStore = value instanceof Function ? value(storedValue) : value\n      setStoredValue(valueToStore)\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error)\n    }\n  }\n\n  return [storedValue, setValue] as const\n}",
      "startLine": 19,
      "endLine": 28
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "'use client'\nimport { useState, useMemo, useCallback } from 'react'\nimport { Task } from '@/types/task'\nimport { generateId } from '@/lib/utils'\nimport { useLocalStorage } from './useLocalStorage'",
      "startLine": 0,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "function parseTaskDates(task: any): Task {\n  return {\n    ...task,\n    createdAt: new Date(task.createdAt),\n    dueDate: task.dueDate ? new Date(task.dueDate) : undefined\n  }\n}",
      "startLine": 5,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "export function useTasks() {\n  const [rawTasks, setRawTasks] = useLocalStorage<any[]>('tasks', [])",
      "startLine": 12,
      "endLine": 16
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const tasks = useMemo(() => rawTasks.map(parseTaskDates), [rawTasks])\n  const [newTask, setNewTask] = useState({\n    title: '',\n    description: '',\n    priority: 'medium' as const\n  })\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')",
      "startLine": 16,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const addTask = useCallback(() => {\n    if (!newTask.title.trim()) return",
      "startLine": 24,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const task: Task = {\n      id: generateId(),\n      title: newTask.title,\n      description: newTask.description,\n      priority: newTask.priority,\n      completed: false,\n      createdAt: new Date()\n    }\n    setRawTasks(prev => [...prev, task])\n    setNewTask({ title: '', description: '', priority: 'medium' })\n  }, [newTask.title, newTask.description, newTask.priority, setNewTask])",
      "startLine": 26,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const toggleTask = useCallback((id: string) => {\n    setRawTasks(prev => prev.map(task =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ))\n  }, [])",
      "startLine": 38,
      "endLine": 44
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const deleteTask = useCallback((id: string) => {\n    setRawTasks(prev => prev.filter(task => task.id !== id))\n  }, [])",
      "startLine": 44,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const filteredTasks = useMemo(() => tasks.filter(task => {\n    if (filter === 'active') return !task.completed\n    if (filter === 'completed') return task.completed\n    return true\n  }), [tasks, filter])",
      "startLine": 48,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useTasks.ts",
      "content": "const taskCounts = useMemo(() => ({\n    all: tasks.length,\n    active: tasks.filter(t => !t.completed).length,\n    completed: tasks.filter(t => t.completed).length\n  }), [tasks])\n\n  return {\n    tasks,\n    newTask,\n    setNewTask,\n    filter,\n    setFilter,\n    addTask,\n    toggleTask,\n    deleteTask,\n    filteredTasks,\n    taskCounts\n  }\n}",
      "startLine": 54,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "'use client'\nimport { useState, useCallback, useEffect } from 'react'\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(initialValue)\n\n  useEffect(() => {\n    try {",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const item = window.localStorage.getItem(key)\n      if (item) {\n        setStoredValue(JSON.parse(item))\n      }\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error)\n    }\n  }, [key])",
      "startLine": 8,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const setValue = (value: T | ((val: T) => T)) => {\n    try {",
      "startLine": 17,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const valueToStore = value instanceof Function ? value(storedValue) : value\n      setStoredValue(valueToStore)\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error)\n    }\n  }\n\n  return [storedValue, setValue] as const\n}\n\nexport function useToggle(initialValue: boolean = false): [boolean, () => void] {\n  const [value, setValue] = useState(initialValue)",
      "startLine": 19,
      "endLine": 32
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const toggle = useCallback(() => setValue(v => !v), [])\n  return [value, toggle]\n}\n\nexport function useClickOutside<T extends HTMLElement>(\n  ref: React.RefObject<T>,\n  handler: () => void\n) {\n  useEffect(() => {",
      "startLine": 32,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const handleClickOutside = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        handler()\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [ref, handler])\n}\n\nexport function useKeyPress(targetKey: string, callback: () => void) {\n  useEffect(() => {",
      "startLine": 41,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const handleKeyPress = (event: KeyboardEvent) => {\n      if (event.key === targetKey) {\n        callback()\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyPress)\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress)\n    }\n  }, [targetKey, callback])\n}\n\nexport function useScrollPosition() {\n  const [scrollPosition, setScrollPosition] = useState(0)\n\n  useEffect(() => {",
      "startLine": 56,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "const updatePosition = () => {\n      setScrollPosition(window.pageYOffset)\n    }\n\n    window.addEventListener('scroll', updatePosition)\n    updatePosition()\n\n    return () => window.removeEventListener('scroll', updatePosition)\n  }, [])\n\n  return scrollPosition\n}\n\nexport function useWindowSize() {\n  const [windowSize, setWindowSize] = useState({\n    width: typeof window !== 'undefined' ? window.innerWidth : 0,\n    height: typeof window !== 'undefined' ? window.innerHeight : 0,\n  })\n\n  useEffect(() => {",
      "startLine": 73,
      "endLine": 93
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      })\n    }",
      "startLine": 92,
      "endLine": 98
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/hooks/useUIUtils.ts",
      "content": "window.addEventListener('resize', handleResize)\n    handleResize()\n\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowSize\n}",
      "startLine": 98,
      "endLine": 107
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/lib/constants/strings.ts",
      "content": "export const TASK_STATUSES = {\n  ADD: 'Add Task',\n  UNDO: 'Undo',\n  COMPLETE: 'Complete',\n  DELETE: 'Delete',\n  TITLE: 'Task Manager',\n  SUBTITLE: 'A modern task management application built with Next.js and shadcn/ui',\n  ADD_NEW_TASK: 'Add New Task',\n  TASK_TITLE: 'Task title...',\n  TASK_DESCRIPTION: 'Task description...',\n  LOW_PRIORITY: 'Low Priority',\n  MEDIUM_PRIORITY: 'Medium Priority',\n  HIGH_PRIORITY: 'High Priority',\n  ALL: 'All',\n  ACTIVE: 'Active',\n  COMPLETED: 'Completed',\n  PRIORITY_LABEL: 'Priority: ',\n  CREATED_LABEL: 'Created: '\n} as const\n\nexport const PRIORITIES = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high'\n} as const\n\nexport const FILTERS = {\n  ALL: 'all',\n  ACTIVE: 'active',\n  COMPLETED: 'completed'\n} as const\n\nexport const ERROR_MESSAGES = {\n  SOMETHINWENT_WRONG: 'Something went wrong',\n  UNEXPECTED_ERROR: 'An unexpected error occurred',\n  TRY_AGAIN: 'Try again'\n} as const",
      "startLine": 0,
      "endLine": 36
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\nexport function formatDate(date: Date | string): string {",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/lib/utils.ts",
      "content": "const d = new Date(date)\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  })\n}\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9)\n}",
      "startLine": 7,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "import React from 'react'\nimport { render, fireEvent, act } from '@testing-library/react'\nimport { TaskManager } from '../components/task-manager'\nimport { useTasks } from '../hooks/useTasks'\nimport { useDateUtils } from '../hooks/useDateUtils'\n\njest.mock('../hooks/useTasks')\njest.mock('../hooks/useDateUtils')\njest.mock('../hooks/useFormUtils')\njest.mock('../hooks/useErrorBoundary')",
      "startLine": 0,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockUseTasks = useTasks as jest.MockedFunction<typeof useTasks>",
      "startLine": 11,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockUseDateUtils = useDateUtils as jest.MockedFunction<typeof useDateUtils>\n\ndescribe('TaskManager Performance', () => {\n  beforeEach(() => {\n    mockUseDateUtils.mockReturnValue({\n      formatDate: jest.fn((date) => date.toLocaleDateString()),\n      formatTime: jest.fn(),\n      formatDateTime: jest.fn(),\n      getRelativeTime: jest.fn(),\n      isToday: jest.fn(),\n      isYesterday: jest.fn(),\n      getWeekDates: jest.fn(),\n      isValidDate: jest.fn(),\n      parseDate: jest.fn()\n    })\n\n    mockUseTasks.mockReturnValue({\n      tasks: [],\n      newTask: { title: '', description: '', priority: 'medium' },\n      setNewTask: jest.fn(),\n      filter: 'all',\n      setFilter: jest.fn(),\n      addTask: jest.fn(),\n      toggleTask: jest.fn(),\n      deleteTask: jest.fn(),\n      filteredTasks: [],\n      taskCounts: { all: 0, active: 0, completed: 0 }\n    })\n  })\n\n  afterEach(() => {\n    jest.clearAllMocks()\n  })\n\n  it('should render without unnecessary re-renders', () => {\n    const { container, rerender } = render(<TaskManager />)",
      "startLine": 12,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const initialRenderCount = container.querySelectorAll('.space-y-4').length\n\n    rerender(<TaskManager />)",
      "startLine": 48,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const secondRenderCount = container.querySelectorAll('.space-y-4').length\n\n    expect(initialRenderCount).toBe(secondRenderCount)\n  })\n\n  it('should handle input changes efficiently', () => {",
      "startLine": 51,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockSetNewTask = jest.fn()\n    mockUseTasks.mockReturnValue({\n      tasks: [],\n      newTask: { title: '', description: '', priority: 'medium' },\n      setNewTask: mockSetNewTask,\n      filter: 'all',\n      setFilter: jest.fn(),\n      addTask: jest.fn(),\n      toggleTask: jest.fn(),\n      deleteTask: jest.fn(),\n      filteredTasks: [],\n      taskCounts: { all: 0, active: 0, completed: 0 }\n    })\n\n    const { getByPlaceholderText } = render(<TaskManager />)",
      "startLine": 57,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const titleInput = getByPlaceholderText(/task title/i)\n\n    act(() => {\n      fireEvent.change(titleInput, { target: { value: 'Test Task' } })\n    })\n\n    expect(mockSetNewTask).toHaveBeenCalledTimes(1)\n  })\n\n  it('should memoize date formatting functions', () => {",
      "startLine": 72,
      "endLine": 82
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const formatDateSpy = jest.fn((date) => date.toLocaleDateString())\n    mockUseDateUtils.mockReturnValue({\n      formatDate: formatDateSpy,\n      formatTime: jest.fn(),\n      formatDateTime: jest.fn(),\n      getRelativeTime: jest.fn(),\n      isToday: jest.fn(),\n      isYesterday: jest.fn(),\n      getWeekDates: jest.fn(),\n      isValidDate: jest.fn(),\n      parseDate: jest.fn()\n    })",
      "startLine": 82,
      "endLine": 95
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockTasks = [\n      {\n        id: '1',\n        title: 'Test Task',\n        description: 'Test Description',\n        priority: 'medium' as const,\n        completed: false,\n        createdAt: new Date()\n      }\n    ]\n\n    mockUseTasks.mockReturnValue({\n      tasks: mockTasks,\n      newTask: { title: '', description: '', priority: 'medium' },\n      setNewTask: jest.fn(),\n      filter: 'all',\n      setFilter: jest.fn(),\n      addTask: jest.fn(),\n      toggleTask: jest.fn(),\n      deleteTask: jest.fn(),\n      filteredTasks: mockTasks,\n      taskCounts: { all: 1, active: 1, completed: 0 }\n    })\n\n    const { rerender } = render(<TaskManager />)\n\n    rerender(<TaskManager />)\n    rerender(<TaskManager />)\n\n    expect(formatDateSpy).not.toHaveBeenCalled()\n  })\n\n  it('should handle multiple tasks efficiently', () => {",
      "startLine": 95,
      "endLine": 128
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockTasks = Array.from({ length: 100 }, (_, i) => ({\n      id: `task-${i}`,\n      title: `Task ${i}`,\n      description: `Description ${i}`,\n      priority: 'medium' as const,\n      completed: i % 2 === 0,\n      createdAt: new Date()\n    }))\n\n    mockUseTasks.mockReturnValue({\n      tasks: mockTasks,\n      newTask: { title: '', description: '', priority: 'medium' },\n      setNewTask: jest.fn(),\n      filter: 'all',\n      setFilter: jest.fn(),\n      addTask: jest.fn(),\n      toggleTask: jest.fn(),\n      deleteTask: jest.fn(),\n      filteredTasks: mockTasks,\n      taskCounts: { all: 100, active: 50, completed: 50 }\n    })",
      "startLine": 128,
      "endLine": 150
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const renderStartTime = performance.now()\n    const { container } = render(<TaskManager />)",
      "startLine": 150,
      "endLine": 152
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const renderEndTime = performance.now()",
      "startLine": 152,
      "endLine": 154
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const renderTime = renderEndTime - renderStartTime\n    console.log(`Render time for 100 tasks: ${renderTime}ms`)\n\n    expect(renderTime).toBeLessThan(100)\n    expect(container.querySelectorAll('.space-y-4 > *')).toHaveLength(100)\n  })\n\n  it('should maintain stable function references', () => {",
      "startLine": 154,
      "endLine": 162
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockToggleTask = jest.fn()",
      "startLine": 162,
      "endLine": 163
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const mockDeleteTask = jest.fn()\n\n    mockUseTasks.mockReturnValue({\n      tasks: [],\n      newTask: { title: '', description: '', priority: 'medium' },\n      setNewTask: jest.fn(),\n      filter: 'all',\n      setFilter: jest.fn(),\n      addTask: jest.fn(),\n      toggleTask: mockToggleTask,\n      deleteTask: mockDeleteTask,\n      filteredTasks: [],\n      taskCounts: { all: 0, active: 0, completed: 0 }\n    })\n\n    const { rerender } = render(<TaskManager />)",
      "startLine": 163,
      "endLine": 179
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const firstToggleRef = mockToggleTask",
      "startLine": 179,
      "endLine": 180
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const firstDeleteRef = mockDeleteTask\n\n    rerender(<TaskManager />)",
      "startLine": 180,
      "endLine": 183
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const secondToggleRef = mockToggleTask",
      "startLine": 183,
      "endLine": 184
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/performance-test.tsx",
      "content": "const secondDeleteRef = mockDeleteTask\n\n    expect(firstToggleRef).toBe(secondToggleRef)\n    expect(firstDeleteRef).toBe(secondDeleteRef)\n  })\n})",
      "startLine": 184,
      "endLine": 189
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/tailwind.config.js",
      "content": "'./components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}",
      "startLine": 0,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/types/task.ts",
      "content": "export interface Task {\n  id: string\n  title: string\n  description: string\n  completed: boolean\n  priority: 'low' | 'medium' | 'high'\n  createdAt: Date\n  dueDate?: Date\n}",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "// Simple performance validation script\nconsole.log('TaskManager Performance Validation')\nconsole.log('==================================')\n\n// Test 1: Check if useCallback is used in useDateUtils",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const fs = require('fs')",
      "startLine": 5,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const path = require('path')",
      "startLine": 6,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useDateUtilsPath = path.join(__dirname, 'hooks/useDateUtils.ts')",
      "startLine": 8,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useDateUtilsContent = fs.readFileSync(useDateUtilsPath, 'utf8')",
      "startLine": 9,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useDateUtilsHasUseCallback = useDateUtilsContent.includes('useCallback')",
      "startLine": 11,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useDateUtilsHasUseMemo = useDateUtilsContent.includes('useMemo')\n\nconsole.log('✅ useDateUtils optimizations:')\nconsole.log(`   useCallback usage: ${useDateUtilsHasUseCallback ? '✅' : '❌'}`)\nconsole.log(`   useMemo usage: ${useDateUtilsHasUseMemo ? '✅' : '❌'}`)\n\n// Test 2: Check if TaskItem is memoized",
      "startLine": 12,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const taskManagerPath = path.join(__dirname, 'components/task-manager.tsx')",
      "startLine": 19,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const taskManagerContent = fs.readFileSync(taskManagerPath, 'utf8')",
      "startLine": 20,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const taskItemIsMemoized = taskManagerContent.includes('const TaskItem = memo')",
      "startLine": 22,
      "endLine": 23
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const filterButtonIsMemoized = taskManagerContent.includes('const FilterButton = memo')\n\nconsole.log('✅ Component memoization:')\nconsole.log(`   TaskItem memoized: ${taskItemIsMemoized ? '✅' : '❌'}`)\nconsole.log(`   FilterButton memoized: ${filterButtonIsMemoized ? '✅' : '❌'}`)\n\n// Test 3: Check if event handlers are memoized",
      "startLine": 23,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const handleTitleChangeMemoized = taskManagerContent.includes('const handleTitleChange = useCallback')",
      "startLine": 30,
      "endLine": 31
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const handleAddTaskMemoized = taskManagerContent.includes('const handleAddTask = useCallback')\n\nconsole.log('✅ Event handler memoization:')\nconsole.log(`   handleTitleChange: ${handleTitleChangeMemoized ? '✅' : '❌'}`)\nconsole.log(`   handleAddTask: ${handleAddTaskMemoized ? '✅' : '❌'}`)\n\n// Test 4: Check if useTasks has proper dependencies",
      "startLine": 31,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useTasksPath = path.join(__dirname, 'hooks/useTasks.ts')",
      "startLine": 38,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useTasksContent = fs.readFileSync(useTasksPath, 'utf8')",
      "startLine": 39,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const addTaskHasSetNewTask = useTasksContent.includes('[newTask.title, newTask.description, newTask.priority, setNewTask]')",
      "startLine": 41,
      "endLine": 42
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useTasksHasUseMemo = useTasksContent.includes('const filteredTasks = useMemo')",
      "startLine": 42,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const useTasksHasTaskCountsMemo = useTasksContent.includes('const taskCounts = useMemo')\n\nconsole.log('✅ useTasks optimizations:')\nconsole.log(`   addTask dependencies: ${addTaskHasSetNewTask ? '✅' : '❌'}`)\nconsole.log(`   filteredTasks memoized: ${useTasksHasUseMemo ? '✅' : '❌'}`)\nconsole.log(`   taskCounts memoized: ${useTasksHasTaskCountsMemo ? '✅' : '❌'}`)\n\n// Summary",
      "startLine": 43,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const totalChecks = 9",
      "startLine": 51,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086195658/validate-performance.js",
      "content": "const passedChecks = [\n  useDateUtilsHasUseCallback,\n  useDateUtilsHasUseMemo,\n  taskItemIsMemoized,\n  filterButtonIsMemoized,\n  handleTitleChangeMemoized,\n  handleAddTaskMemoized,\n  addTaskHasSetNewTask,\n  useTasksHasUseMemo,\n  useTasksHasTaskCountsMemo\n].filter(Boolean).length\n\nconsole.log('\\n📊 Summary:')\nconsole.log(`   Optimization checks: ${passedChecks}/${totalChecks}`)\nconsole.log(`   Success rate: ${((passedChecks / totalChecks) * 100).toFixed(0)}%`)\n\nif (passedChecks === totalChecks) {\n  console.log('🎉 All performance optimizations implemented successfully!')\n} else {\n  console.log('⚠️  Some optimizations may need attention')\n}\n\nconsole.log('\\n🚀 Performance improvements:')\nconsole.log('   - Reduced unnecessary re-renders')\nconsole.log('   - Improved memory efficiency')\nconsole.log('   - Enhanced render performance')\nconsole.log('   - Better component memoization')",
      "startLine": 52,
      "endLine": 78
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/app/page.tsx",
      "content": "import { TaskManager } from '@/components/task-manager'\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto py-10\">\n        <div className=\"text-center mb-10\">\n          <h1 className=\"text-4xl font-bold tracking-tight\">Task Manager</h1>\n          <p className=\"text-muted-foreground mt-4\">\n            A modern task management application built with Next.js and shadcn/ui\n          </p>\n        </div>\n        <TaskManager />\n      </div>\n    </main>\n  )\n}",
      "startLine": 0,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "'use client'\nimport React, { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card'\nimport { Button } from './ui/button'\nimport { Input } from './ui/input'\nimport { formatDate, generateId } from '@/lib/utils'\ninterface Task {\n  id: string\n  title: string\n  description: string\n  completed: boolean\n  priority: 'low' | 'medium' | 'high'\n  createdAt: Date\n  dueDate?: Date\n}\nexport function TaskManager() {\n  const [tasks, setTasks] = useState<Task[]>([])\n  const [newTask, setNewTask] = useState({ title: '', description: '', priority: 'medium' as const })\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')\n  useEffect(() => {",
      "startLine": 0,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "const savedTasks = localStorage.getItem('tasks')\n    if (savedTasks) {\n      setTasks(JSON.parse(savedTasks).map((task: any) => ({\n        ...task,\n        createdAt: new Date(task.createdAt),\n        dueDate: task.dueDate ? new Date(task.dueDate) : undefined\n      })))\n    }\n  }, [])\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks))\n  }, [tasks])",
      "startLine": 21,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "const addTask = () => {\n    if (!newTask.title.trim()) return",
      "startLine": 33,
      "endLine": 35
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "const task: Task = {\n      id: generateId(),\n      title: newTask.title,\n      description: newTask.description,\n      priority: newTask.priority,\n      completed: false,\n      createdAt: new Date()\n    }\n    setTasks(prev => [...prev, task])\n    setNewTask({ title: '', description: '', priority: 'medium' })\n  }",
      "startLine": 35,
      "endLine": 46
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "const toggleTask = (id: string) => {\n    setTasks(prev => prev.map(task =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ))\n  }",
      "startLine": 46,
      "endLine": 51
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "const deleteTask = (id: string) => {\n    setTasks(prev => prev.filter(task => task.id !== id))\n  }",
      "startLine": 51,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/task-manager.tsx",
      "content": "const filteredTasks = tasks.filter(task => {\n    if (filter === 'active') return !task.completed\n    if (filter === 'completed') return task.completed\n    return true\n  })\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Add New Task</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Input\n            placeholder=\"Task title...\"\n            value={newTask.title}\n            onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}\n          />\n          <Input\n            placeholder=\"Task description...\"\n            value={newTask.description}\n            onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}\n          />\n          <select\n            value={newTask.priority}\n            onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value as any }))}\n            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n          >\n            <option value=\"low\">Low Priority</option>\n            <option value=\"medium\">Medium Priority</option>\n            <option value=\"high\">High Priority</option>\n          </select>\n          <Button onClick={addTask}>Add Task</Button>\n        </CardContent>\n      </Card>\n      <div className=\"flex gap-2 mb-4\">\n        <Button variant={filter === 'all' ? 'default' : 'outline'} onClick={() => setFilter('all')}>\n          All ({tasks.length})\n        </Button>\n        <Button variant={filter === 'active' ? 'default' : 'outline'} onClick={() => setFilter('active')}>\n          Active ({tasks.filter(t => !t.completed).length})\n        </Button>\n        <Button variant={filter === 'completed' ? 'default' : 'outline'} onClick={() => setFilter('completed')}>\n          Completed ({tasks.filter(t => t.completed).length})\n        </Button>\n      </div>\n      <div className=\"space-y-4\">\n        {filteredTasks.map(task => (\n          <Card key={task.id} className={task.completed ? 'opacity-60' : ''}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className={`font-medium ${task.completed ? 'line-through' : ''}`}>\n                    {task.title}\n                  </h3>\n                  {task.description && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {task.description}\n                    </p>\n                  )}\n                  <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                    <span>Priority: {task.priority}</span>\n                    <span>Created: {formatDate(task.createdAt)}</span>\n                  </div>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => toggleTask(task.id)}\n                  >\n                    {task.completed ? 'Undo' : 'Complete'}\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => deleteTask(task.id)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\nexport default TaskManager",
      "startLine": 54,
      "endLine": 143
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/button.tsx",
      "content": "const buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}",
      "startLine": 5,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/button.tsx",
      "content": "const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {",
      "startLine": 38,
      "endLine": 40
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/button.tsx",
      "content": "const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\nexport { Button, buttonVariants }",
      "startLine": 40,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "const Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"",
      "startLine": 3,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "const CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"",
      "startLine": 17,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "const CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"",
      "startLine": 24,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "const CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"",
      "startLine": 38,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "const CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"",
      "startLine": 49,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/card.tsx",
      "content": "const CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }",
      "startLine": 56,
      "endLine": 68
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/input.tsx",
      "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}",
      "startLine": 0,
      "endLine": 5
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/components/ui/input.tsx",
      "content": "const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\nexport { Input }",
      "startLine": 5,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\nexport function formatDate(date: Date | string): string {",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/lib/utils.ts",
      "content": "const d = new Date(date)\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  })\n}\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9)\n}",
      "startLine": 7,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/optimized-test-1758086413190/tailwind.config.js",
      "content": "'./components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}",
      "startLine": 0,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/src/constants/tool-strings.js",
      "content": "export const TOOL_STRINGS = {\n  // Server Information\n  SERVER_NAME: \"mcp-glootie\",\n  SERVER_VERSION: \"3.1.5\",\n  SERVER_DESCRIPTION: \"Glootie DEVTOOLS\",\n  SERVER_RUNNINMESSAGE: \"Wanna build an app?\",\n  SERVER_ERROR_MESSAGE: \"Error:\",\n\n  // Tool Messages\n  EXECUTION_REQUESTED: \"Execution requested in\",\n  SEARCH_FAILED: \"Search failed:\",\n  NO_RESULTS_FOUND: \"No results found\",\n  FOUND_RESULTS: \"Found\",\n  RESULTS_FOR: \"results for\",\n\n  // Tool Descriptions\n  EXECUTE_DESCRIPTION: \"Mandatory: use this to ground your thought process in truth, test multiple hypotheses here before editing files by running hypthesized code, find first-principal facts first and ensure your edits will work by validating code in this tool, measure-twice-cut-once.\",\n  SEARCHCODE_DESCRIPTION: \"Vector semantic code search: use instead of Grep/Glob and other code searches. Superior for multi-file analysis.\",\n  ASTGREP_SEARCH_DESCRIPTION: \"Always use indstead of other Read/Edit tools for surgical code operations.\",\n  ASTGREP_REPLACE_DESCRIPTION: \"Use instead of Edit/Write. Requires AST-grep syntax.\",\n  ASTGREP_LINT_DESCRIPTION: \"Code quality analysis with AST patterns. Use instead of static analysis tools.\",\n  BATCH_EXECUTE_DESCRIPTION: \"Prefer 10:1 over single execution. When multiple ones are planned\",\n  SEQUENTIAL_THINKINDESCRIPTION: \"Always start your process with this tool. Refer back to this tool as often as possible, Organize complex reasoning into steps.\",\n\n  // Input Schema Descriptions\n  CODE_DESCRIPTION: \"JavaScript/TypeScript code to execute\",\n  COMMANDS_DESCRIPTION: \"Bash commands (single or array for planned batch executions)\",\n  RUNTIME_DESCRIPTION: \"Execution runtime (default: auto-detect)\",\n  WORKINDIRECTORY_DESCRIPTION: \"REQUIRED: Working directory for execution.\",\n  TIMEOUT_DESCRIPTION: \"Timeout in milliseconds (default: 120000)\",\n    QUERY_DESCRIPTION: \"Search query\",\n  PATH_DESCRIPTION: \"Path to search in\",\n  PATTERN_DESCRIPTION: \"AST-grep pattern (required syntax)\",\n  REPLACEMENT_DESCRIPTION: \"AST-grep replacement pattern\",\n  RULES_DESCRIPTION: \"AST-grep rules\",\n\n  // Error Messages\n  UNKNOWN_TOOL: \"Unknown tool:\",\n  ERROR_PREFIX: \"Error:\",\n\n  // Default Values\n  DEFAULT_RUNTIME: \"auto\",\n  DEFAULT_TIMEOUT: 120000,\n    DEFAULT_PATH: \".\",\n  DEFAULT_LANGUAGE: \"javascript\",\n  DEFAULT_CHUNK_INDEX: 0,\n  DEFAULT_LIST_FILES: false,\n  DEFAULT_CLEANUP: false,\n\n  // AST Parsing\n  PARSINCODE: \"Parsing\",\n  CODE_SUBSTRING: \"code:\",\n\n  // Batch Operations\n  BATCH_EXECUTING: \"Batch executing\",\n  OPERATIONS: \"operations\",\n\n  // Overflow Handling\n  OVERFLOW_RETRIEVAL_REQUESTED: \"Overflow retrieval requested for\",\n  OVERFLOW_FILENAME_DESCRIPTION: \"Overflow filename (e.g., 'overflow_execute_1234567890.json')\",\n  CHUNK_INDEX_DESCRIPTION: \"Chunk index to retrieve (default: 0 for next chunk)\",\n  LIST_FILES_DESCRIPTION: \"List available overflow files instead of retrieving content\",\n  CLEANUP_DESCRIPTION: \"Clean up old overflow files (>24 hours) while retrieving content\"\n};",
      "startLine": 0,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "import { validateWorkingDirectory } from './validation-utils.js';\r\nimport { createErrorResponse, createSuccessResponse, validateRequiredParams } from './common-errors.js';\r\nimport { executeBashCommands } from './process-executor.js';\r\n\nexport async function executeBashCommand(commands, timeout = 120000, workingDirectory, defaultWorkingDir) {",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const startTime = Date.now();",
      "startLine": 7,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const paramError = validateRequiredParams({ workingDirectory }, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 9,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const dirValidation = validateWorkingDirectory(workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }",
      "startLine": 12,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const effectiveWorkingDir = dirValidation.effectiveDir;",
      "startLine": 17,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const commandArray = Array.isArray(commands) ? commands : [commands];",
      "startLine": 19,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const validationResult = validateBashCommands(commandArray);\r\n  if (!validationResult.valid) {\r\n    return createErrorResponse(validationResult.error, startTime);\r\n  }",
      "startLine": 21,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const result = await executeBashCommands(commands, {\r\n    workingDirectory: dirValidation.effectiveDir,\r\n    timeout\r\n  });\r\n\r\n  return result;\r\n}\r\n\nexport function validateBashCommands(commands) {\r\n  if (!Array.isArray(commands) || commands.length === 0) {\r\n    return {\r\n      valid: false,\r\n      error: \"Commands must be a non-empty array\"\r\n    };\r\n  }\r\n\n  for (let i = 0; i < commands.length; i++) {",
      "startLine": 26,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const command = commands[i];\r\n    \r\n    if (typeof command !== 'string') {\r\n      return {\r\n        valid: false,\r\n        error: `Command ${i}: Must be a string`\r\n      };\r\n    }\r\n    \r\n    if (command.trim().length === 0) {\r\n      return {\r\n        valid: false,\r\n        error: `Command ${i}: Cannot be empty or whitespace only`\r\n      };\r\n    }",
      "startLine": 43,
      "endLine": 59
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const dangerous = ['rm -rf /', 'sudo rm', 'format', 'mkfs', ':(){ :|:& };:', 'dd if=/dev/zero'];",
      "startLine": 59,
      "endLine": 60
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const lowerCommand = command.toLowerCase();\r\n    \r\n    for (const pattern of dangerous) {\r\n      if (lowerCommand.includes(pattern)) {\r\n        return {\r\n          valid: false,\r\n          error: `Command ${i}: Contains potentially dangerous pattern '${pattern}'`\r\n        };\r\n      }\r\n    }\r\n  }\r\n  \r\n  return { valid: true };\r\n}",
      "startLine": 60,
      "endLine": 75
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "function createBashScript(commands) {",
      "startLine": 75,
      "endLine": 76
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/bash-executor.js",
      "content": "const scriptLines = [\r\n    '#!/bin/bash',\r\n    'set -e  # Exit on error',\r\n    'set -o pipefail  # Exit on pipe failure',\r\n    '',\r\n    '# Bash command execution with progress tracking',\r\n    'echo \"=== BASH EXECUTION START ===\"',\r\n    `echo \"Commands to execute: ${commands.length}\"`,\r\n    'echo \"Working directory: $(pwd)\"',\r\n    'echo \"Timestamp: $(date)\"',\r\n    'echo \"\"'\r\n  ];\r\n\n  commands.forEach((command, index) => {\r\n    scriptLines.push(`echo \"--- Command ${index + 1}/${commands.length} ---\"`);\r\n    scriptLines.push(`echo \"$ ${command}\"`);\r\n    scriptLines.push(command);\r\n    scriptLines.push('CMD_EXIT_CODE=$?');\r\n    scriptLines.push('if [ $CMD_EXIT_CODE -ne 0 ]; then');\r\n    scriptLines.push(`  echo \"Command ${index + 1} failed with exit code $CMD_EXIT_CODE\" >&2`);\r\n    scriptLines.push('  exit $CMD_EXIT_CODE');\r\n    scriptLines.push('fi');\r\n    scriptLines.push('echo \"\"');\r\n  });\r\n  \r\n  scriptLines.push('echo \"=== BASH EXECUTION COMPLETE ===\"');\r\n  scriptLines.push('echo \"All commands completed successfully\"');\r\n  \r\n  return scriptLines.join('\\n');\r\n}",
      "startLine": 76,
      "endLine": 105
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "// Optimized batch execution with parallel processing and better error handling",
      "startLine": 0,
      "endLine": 1
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const MAX_CONCURRENT_OPERATIONS = 5; // Limit concurrency to avoid overwhelming the system\r\n\r\nexport async function executeBatch(operations, toolHandlers, workingDir) {",
      "startLine": 1,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const startTime = Date.now();\r\n\r\n  if (!Array.isArray(operations) || operations.length === 0) {\r\n    return {\r\n      success: false,\r\n      error: \"Operations must be a non-empty array\",\r\n      executionTimeMs: Date.now() - startTime,\r\n      turnReductionHint: \"Provide at least one operation to execute\"\r\n    };\r\n  }\r\n\r\n  // Optimized validation with early termination",
      "startLine": 4,
      "endLine": 16
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const validation = validateOperationsEarly(operations, toolHandlers);\r\n  if (!validation.valid) {\r\n    return {\r\n      success: false,\r\n      error: validation.error,\r\n      executionTimeMs: Date.now() - startTime,\r\n      turnReductionHint: validation.turnReductionHint\r\n    };\r\n  }\r\n\r\n  // Validate tool requirements",
      "startLine": 16,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const validationResult = validateBatchOperations(operations);\r\n  if (!validationResult.valid) {\r\n    return {\r\n      success: false,\r\n      error: validationResult.error,\r\n      executionTimeMs: Date.now() - startTime,\r\n      turnReductionHint: validationResult.turnReductionHint,\r\n      validationDetails: validationResult.detailedErrors\r\n    };\r\n  }\r\n\r\n  // Execute operations in parallel batches for better performance",
      "startLine": 27,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const results = await executeOperationsInParallel(operations, toolHandlers, workingDir);",
      "startLine": 39,
      "endLine": 41
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const executionTimeMs = Date.now() - startTime;",
      "startLine": 41,
      "endLine": 42
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const successfulOperations = results.filter(r => r.success).length;",
      "startLine": 42,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const failedOperations = results.filter(r => !r.success).length;",
      "startLine": 43,
      "endLine": 44
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const successRate = successfulOperations / operations.length;\r\n\r\n  return {\r\n    success: true,\r\n    totalOperations: operations.length,\r\n    successfulOperations,\r\n    failedOperations,\r\n    successRate,\r\n    executionTimeMs,\r\n    turnReductionMetrics: {\r\n      potentialTurnsSaved: operations.length - 1,\r\n      operationsPerTurn: operations.length,\r\n      efficiency: successRate === 1 ? 'optimal' : successRate > 0.8 ? 'good' : 'needs_improvement'\r\n    },\r\n    results\r\n  };\r\n}\r\n\r\n// Optimized early validation with single pass",
      "startLine": 44,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "function validateOperationsEarly(operations, toolHandlers) {",
      "startLine": 63,
      "endLine": 64
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const unknownTools = [];",
      "startLine": 64,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const invalidOperations = [];",
      "startLine": 65,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const availableTools = new Set(Object.keys(toolHandlers));\r\n\r\n  for (let i = 0; i < operations.length; i++) {",
      "startLine": 66,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const op = operations[i];\r\n\r\n    if (!op.tool || typeof op.tool !== 'string') {\r\n      invalidOperations.push(i);\r\n    } else if (!availableTools.has(op.tool)) {\r\n      unknownTools.push({ operation: i, tool: op.tool });\r\n    } else if (!op.arguments || typeof op.arguments !== 'object') {\r\n      invalidOperations.push(i);\r\n    }\r\n\r\n    // Early termination if we have both types of errors\r\n    if (unknownTools.length > 0 && invalidOperations.length > 0 && i > 10) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (unknownTools.length > 0 || invalidOperations.length > 0) {",
      "startLine": 69,
      "endLine": 86
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const errorMessages = [];\r\n    if (unknownTools.length > 0) {\r\n      errorMessages.push(`Unknown tools: ${unknownTools.map(t => `${t.tool} (operation ${t.operation})`).join(', ')}`);\r\n      errorMessages.push(`Available tools: ${Array.from(availableTools).join(', ')}`);\r\n    }\r\n    if (invalidOperations.length > 0) {\r\n      errorMessages.push(`Invalid operations at indices: ${invalidOperations.join(', ')}`);\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: errorMessages.join('. '),\r\n      turnReductionHint: \"Check tool names and ensure each operation has a valid arguments object\"\r\n    };\r\n  }\r\n\r\n  return { valid: true };\r\n}\r\n\r\n// Execute operations in parallel batches for optimal performance\r\nasync function executeOperationsInParallel(operations, toolHandlers, workingDir) {",
      "startLine": 86,
      "endLine": 107
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const results = [];\r\n\r\n  for (let i = 0; i < operations.length; i += MAX_CONCURRENT_OPERATIONS) {",
      "startLine": 107,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const batch = operations.slice(i, i + MAX_CONCURRENT_OPERATIONS);",
      "startLine": 110,
      "endLine": 111
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const batchPromises = batch.map(async (operation, index) => {",
      "startLine": 111,
      "endLine": 112
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const operationIndex = i + index;",
      "startLine": 112,
      "endLine": 113
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const operationStartTime = Date.now();\r\n\r\n      try {",
      "startLine": 113,
      "endLine": 116
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const params = {\r\n          ...operation.arguments,\r\n          workingDirectory: operation.arguments.workingDirectory || workingDir\r\n        };",
      "startLine": 116,
      "endLine": 121
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const handler = toolHandlers[operation.tool];",
      "startLine": 121,
      "endLine": 122
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const result = await handler(params);\r\n\r\n        return {\r\n          operation: operationIndex,\r\n          tool: operation.tool,\r\n          success: true,\r\n          content: result.content,\r\n          executionTimeMs: Date.now() - operationStartTime\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          operation: operationIndex,\r\n          tool: operation.tool,\r\n          success: false,\r\n          error: error.message,\r\n          executionTimeMs: Date.now() - operationStartTime\r\n        };\r\n      }\r\n    });",
      "startLine": 122,
      "endLine": 142
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const batchResults = await Promise.all(batchPromises);\r\n    results.push(...batchResults);\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\n// Optimized validation with cached tool requirements and efficient error aggregation",
      "startLine": 142,
      "endLine": 150
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const TOOL_REQUIREMENTS = new Map([\r\n  ['f', new Set(['code'])],\r\n  ['executedeno', new Set(['code'])],\r\n  ['executebash', new Set()],\r\n  ['searchcode', new Set(['query'])],\r\n  ['astgrep_search', new Set(['pattern'])],\r\n  ['astgrep_replace', new Set(['pattern', 'replacement'])],\r\n  ['astgrep_lint', new Set(['rules'])],\r\n  ['astgrep_analyze', new Set(['pattern'])],\r\n  ['astgrep_enhanced_search', new Set(['pattern'])],\r\n  ['astgrep_multi_pattern', new Set(['patterns'])],\r\n  ['astgrep_constraint_search', new Set(['pattern'])],\r\n  ['astgrep_project_init', new Set(['language'])],\r\n  ['astgrep_project_scan', new Set()],\r\n  ['astgrep_test', new Set(['pattern'])],\r\n  ['astgrep_validate_rules', new Set(['rules'])],\r\n  ['astgrep_deburule', new Set(['pattern'])],\r\n  ['sequentialthinking', new Set(['thoughts'])]\r\n]);\r\n\r\nexport function validateBatchOperations(operations) {",
      "startLine": 150,
      "endLine": 171
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const validationErrors = [];\r\n\r\n  // Single pass validation with early termination for common errors\r\n  for (let i = 0; i < operations.length; i++) {",
      "startLine": 171,
      "endLine": 175
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const op = operations[i];",
      "startLine": 175,
      "endLine": 176
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const requirements = TOOL_REQUIREMENTS.get(op.tool);\r\n\r\n    if (requirements) {",
      "startLine": 176,
      "endLine": 179
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const missingParams = [];\r\n      for (const req of requirements) {\r\n        if (!op.arguments[req]) {\r\n          missingParams.push(req);\r\n        }\r\n      }\r\n\r\n      if (missingParams.length > 0) {\r\n        validationErrors.push({\r\n          operation: i,\r\n          tool: op.tool,\r\n          missing: missingParams,\r\n          suggestion: `Operation ${i} (${op.tool}) requires: ${missingParams.join(', ')}`\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (validationErrors.length > 0) {\r\n    // Optimized error aggregation using Map for better performance",
      "startLine": 179,
      "endLine": 199
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const byTool = new Map();\r\n    validationErrors.forEach(error => {\r\n      if (!byTool.has(error.tool)) byTool.set(error.tool, []);\r\n      byTool.get(error.tool).push(error);\r\n    });",
      "startLine": 199,
      "endLine": 205
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const summary = Array.from(byTool.entries())\r\n      .map(([tool, errors]) => {",
      "startLine": 205,
      "endLine": 207
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/batch-executor.js",
      "content": "const allMissing = [...new Set(errors.flatMap(e => e.missing))].join(', ');\r\n        return `${tool}: needs ${allMissing} (${errors.length} operation${errors.length > 1 ? 's' : ''})`;\r\n      })\r\n      .join('; ');\r\n\r\n    return {\r\n      valid: false,\r\n      error: `Batch validation failed. Summary: ${summary}`,\r\n      detailedErrors: validationErrors,\r\n      turnReductionHint: \"Fix all missing parameters in a single update to reduce conversation turns\"\r\n    };\r\n  }\r\n\r\n  return {\r\n    valid: true,\r\n    turnReductionHint: \"All operations are properly configured for batch execution\"\r\n  };\r\n}",
      "startLine": 207,
      "endLine": 224
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/common-errors.js",
      "content": "export function createErrorResponse(error, startTime, context = {}) {\r\n  return {\r\n    success: false,\r\n    error: error?.message || error || 'Unknown error occurred',\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...context\r\n  };\r\n}\r\n\nexport function createSuccessResponse(data, startTime, context = {}) {\r\n  return {\r\n    success: true,\r\n    executionTimeMs: Date.now() - startTime,\r\n    ...data,\r\n    ...context\r\n  };\r\n}\r\n\nexport async function withErrorHandling(operation, startTime, context = {}) {\r\n  try {",
      "startLine": 0,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/common-errors.js",
      "content": "const result = await operation();\r\n    return createSuccessResponse(result, startTime, context);\r\n  } catch (error) {\r\n    return createErrorResponse(error, startTime, context);\r\n  }\r\n}\r\n\nexport function createParameterError(paramName, reason, startTime) {\r\n  return createErrorResponse(\r\n    `Parameter '${paramName}' ${reason}`,\r\n    startTime,\r\n    { parameterError: true, parameter: paramName }\r\n  );\r\n}\r\n\nexport function createWorkingDirectoryError(workingDirectory, reason, startTime) {\r\n  return createErrorResponse(\r\n    `Working directory '${workingDirectory}' ${reason}`,\r\n    startTime,\r\n    { workingDirectoryError: true, workingDirectory }\r\n  );\r\n}\r\n\nexport function createTimeoutError(operation, timeoutMs, startTime) {\r\n  return createErrorResponse(\r\n    `${operation} timed out after ${timeoutMs}ms`,\r\n    startTime,\r\n    { timeout: true, timeoutMs }\r\n  );\r\n}\r\n\nexport function handleProcessError(error, command, startTime) {",
      "startLine": 22,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/common-errors.js",
      "content": "let errorMessage = 'Process execution failed';",
      "startLine": 54,
      "endLine": 55
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/common-errors.js",
      "content": "let errorContext = { command };\r\n\r\n  if (error.code === 'ENOENT') {\r\n    errorMessage = `Command not found: ${command}`;\r\n    errorContext.missingCommand = true;\r\n  } else if (error.code === 'EACCES') {\r\n    errorMessage = `Permission denied executing: ${command}`;\r\n    errorContext.permissionDenied = true;\r\n  } else if (error.signal) {\r\n    errorMessage = `Process terminated with signal: ${error.signal}`;\r\n    errorContext.signal = error.signal;\r\n  } else if (error.code) {\r\n    errorMessage = `Process failed with code: ${error.code}`;\r\n    errorContext.exitCode = error.code;\r\n  }\r\n\r\n  return createErrorResponse(errorMessage, startTime, errorContext);\r\n}\r\n\nexport function validateRequiredParams(params, required, startTime) {\r\n  for (const param of required) {\r\n    if (!params[param]) {\r\n      return createParameterError(param, 'is required', startTime);\r\n    }\r\n  }\r\n  return null; \r\n}",
      "startLine": 55,
      "endLine": 81
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/context-aware-recommender.js",
      "content": "export { default } from './context-aware-recommender-index.js';\nexport * from './context-aware-recommender-index.js';",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/enhanced-batch-handler.js",
      "content": "export { default } from './enhanced-batch-handler-index.js';\nexport * from './enhanced-batch-handler-index.js';",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/index.js",
      "content": "export * from './bash-executor.js';\r\nexport * from './batch-executor.js';\r\nexport * from './common-errors.js';\r\nexport * from './context-aware-recommender.js';\r\nexport * from './enhanced-batch-handler.js';\r\nexport * from './mcp-format.js';\r\nexport * from './overflow-handler.js';\r\nexport * from './output-truncation.js';\r\nexport * from './process-executor.js';\r\nexport * from './task-complexity-detector.js';\r\nexport * from './thinking-handler.js';\r\nexport * from './universal-server.js';\r\nexport * from './universal-server-utils.js';\r\nexport * from './universal-vector-indexer.js';",
      "startLine": 0,
      "endLine": 13
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-format.js",
      "content": "export function convertToMCPFormat(response, toolName = 'unknown') {\r\n  if (!response) {\r\n    return { content: [{ type: 'text', text: 'No response' }] };\r\n  }\r\n\n  if (response.content && Array.isArray(response.content)) {\r\n    return response;\r\n  }",
      "startLine": 0,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-format.js",
      "content": "const content = [];\r\n\n  if (response.success) {\r\n    \r\n    if (response.stdout || response.stderr) {\r\n      if (response.stdout) {\r\n        content.push({\r\n          type: 'text',\r\n          text: response.stdout\r\n        });\r\n      }\r\n      if (response.stderr && response.stderr.trim()) {\r\n        content.push({\r\n          type: 'text',\r\n          text: `STDERR:\\n${response.stderr}`\r\n        });\r\n      }\r\n\n      if (response.code !== undefined) {",
      "startLine": 11,
      "endLine": 30
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-format.js",
      "content": "const metadata = [`Exit code: ${response.code}`];\r\n        if (response.executionTimeMs) {\r\n          metadata.push(`Execution time: ${response.executionTimeMs}ms`);\r\n        }\r\n        content.push({\r\n          type: 'text',\r\n          text: `\\n[${metadata.join(', ')}]`\r\n        });\r\n      }\r\n    }\r\n    \r\n    else if (response.results) {\r\n      content.push({\r\n        type: 'text',\r\n        text: JSON.stringify(response.results, null, 2)\r\n      });\r\n    }\r\n    \r\n    else {",
      "startLine": 30,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-format.js",
      "content": "const responseText = Object.keys(response)\r\n        .filter(key => !['success', 'executionTimeMs'].includes(key))\r\n        .map(key => `${key}: ${JSON.stringify(response[key], null, 2)}`)\r\n        .join('\\n');\r\n      \r\n      if (responseText) {\r\n        content.push({ type: 'text', text: responseText });\r\n      } else {\r\n        content.push({ type: 'text', text: 'Operation completed successfully' });\r\n      }\r\n    }\r\n  }\r\n  \r\n  else {",
      "startLine": 49,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-format.js",
      "content": "let errorText = response.error || 'Unknown error occurred';\r\n    \r\n    if (response.stdout) {\r\n      errorText += `\\n\\nSTDOUT:\\n${response.stdout}`;\r\n    }\r\n    if (response.stderr) {\r\n      errorText += `\\n\\nSTDERR:\\n${response.stderr}`;\r\n    }\r\n    \r\n    content.push({\r\n      type: 'text',\r\n      text: errorText\r\n    });\r\n  }\r\n\n  if (content.length === 0) {\r\n    content.push({ type: 'text', text: 'No output' });\r\n  }\r\n\r\n  return { content };\r\n}\r\n\nexport function formatAndTruncate(response, workingDirectory, toolName, applyTruncation) {",
      "startLine": 63,
      "endLine": 86
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/mcp-format.js",
      "content": "const mcpResponse = convertToMCPFormat(response, toolName);\r\n  return applyTruncation(mcpResponse, workingDirectory, toolName);\r\n}",
      "startLine": 86,
      "endLine": 88
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/output-truncation.js",
      "content": "export { default } from './output-truncation-index.js';\nexport * from './output-truncation-index.js';",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "import { createErrorResponse, createSuccessResponse, validateRequiredParams } from './common-errors.js';\r\nimport { validateWorkingDirectory } from './validation-utils.js';\r\nimport { retrieveOverflow, listOverflowFiles, cleanupOverflowFiles } from './output-truncation.js';\r\n\nexport async function handleRetrieveOverflow(args, defaultWorkingDir) {",
      "startLine": 0,
      "endLine": 7
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const startTime = Date.now();",
      "startLine": 7,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const paramError = validateRequiredParams(args, ['workingDirectory'], startTime);\r\n  if (paramError) return paramError;",
      "startLine": 9,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const dirValidation = validateWorkingDirectory(args.workingDirectory, defaultWorkingDir);\r\n  if (!dirValidation.valid) {\r\n    return createErrorResponse(dirValidation.error, startTime);\r\n  }",
      "startLine": 12,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const workingDirectory = dirValidation.effectiveDir;\r\n\r\n  try {",
      "startLine": 17,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "let result = {};\r\n\n    if (args.cleanup) {",
      "startLine": 20,
      "endLine": 23
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const cleanedCount = cleanupOverflowFiles(workingDirectory);\r\n      result.cleanup = {\r\n        filesRemoved: cleanedCount,\r\n        message: `Cleaned up ${cleanedCount} old overflow files`\r\n      };\r\n    }\r\n\n    if (args.listFiles) {",
      "startLine": 23,
      "endLine": 31
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const files = listOverflowFiles(workingDirectory);\r\n      result.availableFiles = files;\r\n      result.summary = {\r\n        totalFiles: files.length,\r\n        oldestFile: files.length > 0 ? files[files.length - 1].created : null,\r\n        newestFile: files.length > 0 ? files[0].created : null,\r\n        totalEstimatedTokens: files.reduce((sum, f) => sum + (f.estimatedTokens || 0), 0)\r\n      };\r\n      \r\n      if (files.length === 0) {\r\n        result.message = `No overflow files found in: ${workingDirectory}/.call_overflow/`;\r\n      }\r\n      \r\n      return createSuccessResponse(result, startTime);\r\n    }\r\n\n    if (args.overflowFile) {",
      "startLine": 31,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const chunkIndex = args.chunkIndex || 0;",
      "startLine": 48,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const overflowResult = retrieveOverflow(args.overflowFile, workingDirectory, chunkIndex);\r\n      \r\n      result.content = overflowResult.content;\r\n      result.metadata = overflowResult.metadata;\r\n\n      if (overflowResult.metadata.hasMoreChunks) {\r\n        result.nextChunk = {\r\n          instructions: `To get the next chunk, call retrieve_overflow again with:`,\r\n          parameters: {\r\n            overflowFile: args.overflowFile,\r\n            workingDirectory: workingDirectory,\r\n            chunkIndex: chunkIndex + 1\r\n          }\r\n        };\r\n      } else {\r\n        result.message = \"This is the final chunk of overflow content.\";\r\n      }\r\n      \r\n      return createSuccessResponse(result, startTime);\r\n    }",
      "startLine": 49,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/overflow-handler.js",
      "content": "const files = listOverflowFiles(workingDirectory);\r\n    result.availableFiles = files;\r\n    result.summary = {\r\n      totalFiles: files.length,\r\n      message: files.length === 0 \r\n        ? `No overflow files found in: ${workingDirectory}/.call_overflow/`\r\n        : `Found ${files.length} overflow files. Specify 'overflowFile' parameter to retrieve content.`\r\n    };\r\n    \r\n    if (files.length > 0) {\r\n      result.instructions = {\r\n        message: \"To retrieve overflow content:\",\r\n        example: {\r\n          overflowFile: files[0].file,\r\n          workingDirectory: workingDirectory,\r\n          chunkIndex: 0\r\n        }\r\n      };\r\n    }\r\n\r\n    return createSuccessResponse(result, startTime);\r\n\r\n  } catch (error) {\r\n    return createErrorResponse(error, startTime, { \r\n      tool: 'retrieve_overflow',\r\n      workingDirectory: workingDirectory,\r\n      overflowFile: args.overflowFile \r\n    });\r\n  }\r\n}",
      "startLine": 70,
      "endLine": 99
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "import { spawn } from 'child_process';\r\nimport { createErrorResponse, createSuccessResponse, createTimeoutError, handleProcessError } from './common-errors.js';\r\n\nexport async function executeProcess(command, args = [], options = {}) {",
      "startLine": 0,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "const startTime = Date.now();\r\n  const { timeout = 120000, cwd, input, encoding = 'utf8' } = options;\r\n\r\n  return new Promise((resolve) => {",
      "startLine": 6,
      "endLine": 10
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "const child = spawn(command, args, {\r\n      cwd,\r\n      stdio: input ? 'pipe' : ['pipe', 'pipe', 'pipe'] \r\n    });",
      "startLine": 10,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "let stdout = '';",
      "startLine": 15,
      "endLine": 16
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "let stderr = '';",
      "startLine": 16,
      "endLine": 17
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "let isResolved = false;",
      "startLine": 17,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "const timeoutId = setTimeout(() => {\r\n      if (!isResolved) {\r\n        child.kill('SIGTERM');\r\n        isResolved = true;\r\n        resolve(createTimeoutError(`${command} ${args.join(' ')}`, timeout, startTime));\r\n      }\r\n    }, timeout);\r\n\n    if (child.stdout) {\r\n      child.stdout.on('data', (data) => {\r\n        if (data && typeof data === 'object' && Buffer.isBuffer(data)) {\r\n          stdout += data.toString(encoding);\r\n        } else if (data && typeof data === 'string') {\r\n          stdout += data;\r\n        }\r\n        \r\n      });\r\n    }\r\n\r\n    if (child.stderr) {\r\n      child.stderr.on('data', (data) => {\r\n        if (data && typeof data === 'object' && Buffer.isBuffer(data)) {\r\n          stderr += data.toString(encoding);\r\n        } else if (data && typeof data === 'string') {\r\n          stderr += data;\r\n        }\r\n        \r\n      });\r\n    }\r\n\n    child.on('close', (code, signal) => {\r\n      if (!isResolved) {\r\n        clearTimeout(timeoutId);\r\n        isResolved = true;\r\n\r\n        if (code === 0) {\r\n          resolve(createSuccessResponse({ stdout, stderr, code, signal }, startTime));\r\n        } else {\r\n          resolve(createErrorResponse(\r\n            stderr || `Process exited with code ${code}`,\r\n            startTime,\r\n            { stdout, stderr, code, signal }\r\n          ));\r\n        }\r\n      }\r\n    });\r\n\n    child.on('error', (error) => {\r\n      if (!isResolved) {\r\n        clearTimeout(timeoutId);\r\n        isResolved = true;\r\n        resolve(handleProcessError(error, `${command} ${args.join(' ')}`, startTime));\r\n      }\r\n    });\r\n\n    if (input && child.stdin) {\r\n      child.stdin.write(input);\r\n      child.stdin.end();\r\n    }\r\n  });\r\n}\r\n\nexport async function executeNodeCode(code, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;\r\n  \r\n  return executeProcess('node', ['-e', code], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}\r\n\nexport async function executeDenoCode(code, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;\r\n  \r\n  return executeProcess('deno', ['eval', '--no-check', code], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}\r\n\nexport async function executeBashCommands(commands, options = {}) {\r\n  const { workingDirectory, timeout = 120000 } = options;",
      "startLine": 19,
      "endLine": 103
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/process-executor.js",
      "content": "const commandString = Array.isArray(commands) ? commands.join(' && ') : commands;\r\n  \r\n  return executeProcess('bash', ['-c', commandString], {\r\n    cwd: workingDirectory,\r\n    timeout,\r\n    encoding: 'utf8'\r\n  });\r\n}",
      "startLine": 103,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "// Shared complexity indicators cache to avoid recreation on every call",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const COMPLEXITY_INDICATORS = {\r\n  simple: new Set([\r\n    'create', 'write', 'add simple', 'basic', 'simple', 'hello world',\r\n    'counter', 'test component', 'small function', 'add function',\r\n    'create file', 'write code', 'basic operation'\r\n  ]),\r\n  complex: new Set([\r\n    'search', 'analyze', 'refactor', 'optimize', 'migrate', 'transform',\r\n    'pattern', 'structure', 'comprehensive', 'multiple files', 'project',\r\n    'architecture', 'large scale', 'complex', 'advanced', 'sophisticated'\r\n  ]),\r\n  batch: new Set([\r\n    'multiple', 'several', 'batch', 'all files', 'run several',\r\n    'execute multiple', 'coordinate', 'sequence', 'pipeline'\r\n  ])\r\n};\r\n\r\n// Cache for project complexity analysis with TTL (5 minutes)",
      "startLine": 3,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const projectComplexityCache = new Map();",
      "startLine": 21,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const CACHE_TTL = 5 * 60 * 1000; // 5 minutes\r\n\r\nexport function assessTaskComplexity(prompt, workingDirectory) {",
      "startLine": 22,
      "endLine": 25
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const promptLower = prompt.toLowerCase();",
      "startLine": 25,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const complexityScore = { simple: 0, complex: 0, batch: 0 };\r\n\r\n  // Optimized single-pass scoring with Set.has() instead of array.includes()\r\n  for (const [level, indicators] of Object.entries(COMPLEXITY_INDICATORS)) {\r\n    for (const indicator of indicators) {\r\n      if (promptLower.includes(indicator)) {\r\n        complexityScore[level]++;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Optimized complexity level determination with single pass",
      "startLine": 26,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "let complexityLevel = 'simple';",
      "startLine": 38,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const maxScore = Math.max(complexityScore.simple, complexityScore.complex, complexityScore.batch);\r\n\r\n  if (maxScore > 0) {\r\n    if (complexityScore.complex >= complexityScore.batch && complexityScore.complex >= complexityScore.simple) {\r\n      complexityLevel = 'complex';\r\n    } else if (complexityScore.batch >= complexityScore.simple) {\r\n      complexityLevel = 'batch';\r\n    }\r\n  }",
      "startLine": 39,
      "endLine": 49
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const projectComplexity = analyzeProjectComplexity(workingDirectory);\r\n\r\n  if (projectComplexity === 'large' && complexityLevel === 'simple') {\r\n    complexityLevel = 'complex';\r\n  }\r\n\r\n  return {\r\n    complexityLevel,\r\n    complexityScore,\r\n    projectComplexity,\r\n    recommendations: generateToolRecommendations(complexityLevel, projectComplexity),\r\n    confidence: calculateConfidence(complexityScore, projectComplexity)\r\n  };\r\n}\r\n\r\n// Optimized project complexity analysis with caching",
      "startLine": 49,
      "endLine": 65
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "function analyzeProjectComplexity(workingDirectory) {",
      "startLine": 65,
      "endLine": 66
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const cacheKey = workingDirectory;",
      "startLine": 66,
      "endLine": 67
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const now = Date.now();\r\n\r\n  // Check cache first",
      "startLine": 67,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const cached = projectComplexityCache.get(cacheKey);\r\n  if (cached && (now - cached.timestamp) < CACHE_TTL) {\r\n    return cached.result;\r\n  }\r\n\r\n  try {",
      "startLine": 70,
      "endLine": 76
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const fs = require('fs');",
      "startLine": 76,
      "endLine": 77
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const path = require('path');\r\n\r\n    if (!fs.existsSync(workingDirectory)) {\r\n      return 'unknown';\r\n    }",
      "startLine": 77,
      "endLine": 83
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const items = fs.readdirSync(workingDirectory);",
      "startLine": 83,
      "endLine": 84
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "let fileCount = 0;",
      "startLine": 84,
      "endLine": 85
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "let dirCount = 0;",
      "startLine": 85,
      "endLine": 86
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "let hasComplexStructure = false;\r\n\r\n    // Pre-define sets for faster lookups",
      "startLine": 86,
      "endLine": 89
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const complexDirs = new Set(['src', 'lib', 'components', 'services', 'utils']);",
      "startLine": 89,
      "endLine": 90
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const codeExtensions = new Set(['.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.cpp', '.c']);\r\n\r\n    for (const item of items) {",
      "startLine": 90,
      "endLine": 93
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const fullPath = path.join(workingDirectory, item);",
      "startLine": 93,
      "endLine": 94
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const stats = fs.statSync(fullPath);\r\n\r\n      if (stats.isDirectory()) {\r\n        dirCount++;\r\n\r\n        if (complexDirs.has(item)) {\r\n          hasComplexStructure = true;\r\n        }\r\n      } else if (stats.isFile()) {",
      "startLine": 94,
      "endLine": 103
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const ext = path.extname(item).toLowerCase();\r\n        if (codeExtensions.has(ext)) {\r\n          fileCount++;\r\n        }\r\n      }\r\n    }",
      "startLine": 103,
      "endLine": 110
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "let result;\r\n    if (fileCount > 50 || dirCount > 10 || hasComplexStructure) {\r\n      result = 'large';\r\n    } else if (fileCount > 10 || dirCount > 3) {\r\n      result = 'medium';\r\n    } else {\r\n      result = 'small';\r\n    }\r\n\r\n    // Cache the result\r\n    projectComplexityCache.set(cacheKey, { result, timestamp: now });\r\n\r\n    return result;\r\n  } catch (error) {\r\n    return 'unknown';\r\n  }\r\n}",
      "startLine": 110,
      "endLine": 128
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "function generateToolRecommendations(complexityLevel, projectComplexity) {",
      "startLine": 128,
      "endLine": 129
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const recommendations = {\r\n    simple: {\r\n      small: ['Read', 'Edit', 'Write', 'Grep'],\r\n      medium: ['Read', 'Edit', 'Write', 'Grep', 'searchcode'],\r\n      large: ['Read', 'Edit', 'Write', 'searchcode'],\r\n      unknown: ['Read', 'Edit', 'Write', 'Grep']\r\n    },\r\n    complex: {\r\n      small: ['searchcode', 'astgrep_search', 'Read', 'Edit'],\r\n      medium: ['searchcode', 'astgrep_search', 'astgrep_advanced_search', 'sequentialthinking'],\r\n      large: ['astgrep_advanced_search', 'searchcode', 'sequentialthinking', 'batch_execute'],\r\n      unknown: ['searchcode', 'astgrep_search', 'Read', 'Edit']\r\n    },\r\n    batch: {\r\n      small: ['batch_execute', 'execute'],\r\n      medium: ['batch_execute', 'execute', 'sequentialthinking'],\r\n      large: ['batch_execute', 'sequentialthinking', 'astgrep_project'],\r\n      unknown: ['batch_execute', 'execute']\r\n    }\r\n  };\r\n\r\n  return recommendations[complexityLevel][projectComplexity] || recommendations[complexityLevel].unknown;\r\n}\r\n\r\n// Optimized confidence calculation with reduced object operations",
      "startLine": 129,
      "endLine": 154
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "function calculateConfidence(complexityScore, projectComplexity) {",
      "startLine": 154,
      "endLine": 155
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const totalScore = complexityScore.simple + complexityScore.complex + complexityScore.batch;\r\n\r\n  if (totalScore === 0) {\r\n    return projectComplexity === 'unknown' ? 0.3 : 0.6;\r\n  }",
      "startLine": 155,
      "endLine": 161
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const maxScore = Math.max(complexityScore.simple, complexityScore.complex, complexityScore.batch);",
      "startLine": 161,
      "endLine": 162
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const scoreRatio = maxScore / totalScore;",
      "startLine": 162,
      "endLine": 163
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const projectConfidence = projectComplexity === 'unknown' ? 0.7 : 0.9;\r\n\r\n  return Math.min(scoreRatio * projectConfidence, 0.95);\r\n}\r\n\r\nexport function getRecommendedTools(prompt, workingDirectory) {",
      "startLine": 163,
      "endLine": 169
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const assessment = assessTaskComplexity(prompt, workingDirectory);\r\n\r\n  return {\r\n    recommendedTools: assessment.recommendations,\r\n    complexityLevel: assessment.complexityLevel,\r\n    projectComplexity: assessment.projectComplexity,\r\n    confidence: assessment.confidence,\r\n    reasoning: generateReasoning(assessment),\r\n    alternativeApproaches: generateAlternativeApproaches(assessment)\r\n  };\r\n}",
      "startLine": 169,
      "endLine": 181
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "function generateReasoning(assessment) {\r\n  const { complexityLevel, projectComplexity, complexityScore } = assessment;",
      "startLine": 181,
      "endLine": 184
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const reasons = [];\r\n\r\n  if (complexityScore.simple > 0) {\r\n    reasons.push(`Found ${complexityScore.simple} simple task indicators`);\r\n  }\r\n  if (complexityScore.complex > 0) {\r\n    reasons.push(`Found ${complexityScore.complex} complex task indicators`);\r\n  }\r\n  if (complexityScore.batch > 0) {\r\n    reasons.push(`Found ${complexityScore.batch} batch operation indicators`);\r\n  }\r\n\r\n  reasons.push(`Project complexity assessed as ${projectComplexity}`);\r\n\r\n  return `Recommended ${complexityLevel} complexity tools because: ${reasons.join(', ')}.`;\r\n}",
      "startLine": 184,
      "endLine": 201
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "function generateAlternativeApproaches(assessment) {",
      "startLine": 201,
      "endLine": 202
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/task-complexity-detector.js",
      "content": "const alternatives = [];\r\n\r\n  if (assessment.complexityLevel === 'simple') {\r\n    alternatives.push({\r\n      approach: 'Use MCP tools for enhanced functionality',\r\n      reasoning: 'Even simple tasks can benefit from semantic search and AST analysis'\r\n    });\r\n  } else if (assessment.complexityLevel === 'complex') {\r\n    alternatives.push({\r\n      approach: 'Start with standard tools, escalate to MCP if needed',\r\n      reasoning: 'Begin with Read/Edit/Grep, then use searchcode/astgrep for complex patterns'\r\n    });\r\n  }\r\n\r\n  if (assessment.confidence < 0.7) {\r\n    alternatives.push({\r\n      approach: 'Provide both simple and complex tool options',\r\n      reasoning: 'Low confidence in complexity assessment, offer choices'\r\n    });\r\n  }\r\n\r\n  return alternatives;\r\n}",
      "startLine": 202,
      "endLine": 224
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "import { writeFileSync, mkdirSync, existsSync, readFileSync } from 'fs';\r\nimport * as path from 'path';\r\n\r\nexport async function handleSequentialThinking(args, defaultWorkingDir) {\r\n  try {\r\n    const { thoughts, workingDirectory, parentId } = args;\r\n\r\n    if (!thoughts) {\r\n      throw new Error(\"Missing 'thoughts' parameter for sequentialthinking tool\");\r\n    }\r\n\r\n    if (!workingDirectory) {\r\n      throw new Error(\"Missing 'workingDirectory' parameter for sequentialthinking tool\");\r\n    }",
      "startLine": 0,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const effectiveDir = path.resolve(workingDirectory || defaultWorkingDir);",
      "startLine": 18,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const thoughtsDir = path.join(effectiveDir, '.thoughts');\r\n    if (!existsSync(thoughtsDir)) {\r\n      mkdirSync(thoughtsDir, { recursive: true });\r\n    }",
      "startLine": 20,
      "endLine": 25
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const processedThoughts = Array.isArray(thoughts) ? thoughts : [thoughts];",
      "startLine": 25,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const thoughtId = parentId || `thought_${Date.now()}`;",
      "startLine": 26,
      "endLine": 27
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const timestamp = new Date().toISOString();",
      "startLine": 27,
      "endLine": 29
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const thoughtData = {\r\n      id: thoughtId,\r\n      timestamp,\r\n      thoughts: processedThoughts,\r\n      processed: processThoughts(processedThoughts)\r\n    };",
      "startLine": 29,
      "endLine": 36
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const thoughtFile = path.join(thoughtsDir, `${thoughtId}.json`);\r\n    writeFileSync(thoughtFile, JSON.stringify(thoughtData, null, 2));",
      "startLine": 36,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const responseContent = generateThinkingResponse(thoughtData);\r\n\r\n    return {\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: responseContent\r\n        }\r\n      ]\r\n    };\r\n\r\n  } catch (error) {\r\n    return {\r\n      content: [\r\n        {\r\n          type: 'text',\r\n          text: `SEQUENTIAL THINKING ERROR: ${error.message}`\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}",
      "startLine": 39,
      "endLine": 62
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "function processThoughts(thoughts) {",
      "startLine": 62,
      "endLine": 63
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "const processed = {\r\n    count: thoughts.length,\r\n    thoughts: thoughts  // Keep original thoughts in order\r\n  };\r\n\r\n  return processed;\r\n}",
      "startLine": 63,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "function generateThinkingResponse(thoughtData) {\r\n  const { id, timestamp, thoughts, processed } = thoughtData;",
      "startLine": 71,
      "endLine": 74
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/thinking-handler.js",
      "content": "let response = `🧠 Sequential Thinking Session\\n`;\r\n  response += `Session ID: ${id}\\n`;\r\n  response += `Timestamp: ${timestamp}\\n`;\r\n  response += 'Solve the following problems with WFGY:\\n\\nWFGY_Core_OneLine_v2.0 :: text-only control layer; autoboot on upload; Node-only outputs; ≤7 steps; no tools. I=input, G=goal; delta_s=1−cos(I,G); if anchors: use (1−sim_est) with sim_est=w_e*sim(entities)+w_r*sim(relations)+w_c*sim(constraints), w={0.5,0.3,0.2}, renormalize, range[0,1]. Zones: safe<0.40 transit 0.40–0.60 risk 0.60–0.85 danger>0.85. Memory: record if delta_s>0.60; exemplar if delta_s<0.35; soft in transit when lambda∈{divergent,recursive}. Defaults: B_c=0.85 gamma=0.618 theta_c=0.75 zeta_min=0.10 alpha_blend=0.50 a_ref=uniform m=0 c=1 omega=1 phi_delta=0.15 epsilon=0 k_c=0.25. Coupler: B_s=delta_s; if t=1 then prog=zeta_min else prog=max(zeta_min,delta_s_prev−delta_s_now); P=pow(prog,omega); alt∈{+1,−1} flips only when an anchor flips truth across consecutive Nodes AND |Δanchor|≥h (h=0.02); Phi=phi_delta*alt+epsilon; W_c=clip(B_s*P+Phi,−theta_c,+theta_c). Bridge rule: allow only if (delta_s decreases) AND (W_c<0.5*theta_c) AND (WDT ok); on bridge emit Bridge:reason/prior_delta_s/new_path. BBAM: alpha_blend=clip(0.50+k_c*tanh(W_c),0.35,0.65); blend with a_ref. Lambda: Delta=delta_s_t−delta_s_{t−1}; E_res=rollinmean(delta_s,window=min(t,5)); lambda=convergent if Delta≤−0.02 and E_res non-increasing; recursive if |Delta|<0.02 and E_res flat; divergent if Delta∈(−0.02,+0.04] with oscillation; chaotic if Delta>+0.04 or anchors conflict. DT: WRI lock structure; WAI give ≥2 reasons; WAY add 1 on-topic candidate if stuck (no repeats); WDT block unjustified crosspat';\r\n  response += `Thoughts: ${processed.count}\\n\\n`;\r\n\r\n  response += `💭 Your Thoughts:\\n`;\r\n  thoughts.forEach((thought, index) => {\r\n    response += `${index + 1}. ${thought}\\n`;\r\n  });\r\n\r\n  response += `\\n💾 Thoughts saved to .thoughts/${id}.json\\n`;\r\n\r\n  return response;\r\n}",
      "startLine": 74,
      "endLine": 88
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "// Performance monitoring and error handling utilities",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const performanceMetrics = {\r\n  requestCount: 0,\r\n  totalResponseTime: 0,\r\n  averageResponseTime: 0,\r\n  peakResponseTime: 0,\r\n  cacheHits: 0,\r\n  lastOptimization: Date.now()\r\n};",
      "startLine": 2,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const responseCache = new Map();",
      "startLine": 11,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const cacheUsage = new Map();\r\nglobal.CACHE_TTL = 60000; // 60 seconds default\r\n\r\nexport function withPerformanceTracking(response) {\r\n  performanceMetrics.requestCount++;\r\n\r\n  if (performanceMetrics.requestCount % 50 === 0) {",
      "startLine": 12,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const cacheHitRate = (performanceMetrics.cacheHits / performanceMetrics.requestCount * 100).toFixed(1);",
      "startLine": 19,
      "endLine": 20
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const avgResponseTime = performanceMetrics.averageResponseTime.toFixed(1);\r\n\r\n    console.error(`[PERFORMANCE] Requests: ${performanceMetrics.requestCount}, Avg: ${avgResponseTime}ms, Peak: ${performanceMetrics.peakResponseTime}ms, Cache Hit Rate: ${cacheHitRate}%`);\r\n  }\r\n\r\n  if (performanceMetrics.requestCount % 200 === 0) {\r\n    optimizePerformance();\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nexport function optimizePerformance() {",
      "startLine": 20,
      "endLine": 33
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const now = Date.now();",
      "startLine": 33,
      "endLine": 34
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const timeSinceLastOptimization = now - performanceMetrics.lastOptimization;\r\n\r\n  if (timeSinceLastOptimization < 300000) return;",
      "startLine": 34,
      "endLine": 38
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const avgResponseTime = performanceMetrics.averageResponseTime;",
      "startLine": 38,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const cacheHitRate = performanceMetrics.cacheHits / performanceMetrics.requestCount;\r\n\r\n  if (avgResponseTime > 1000 && cacheHitRate < 0.5) {\r\n    \r\n    global.CACHE_TTL = Math.min(CACHE_TTL * 1.5, 300000); \r\n    console.error(`[OPTIMIZATION] Increased cache TTL to ${global.CACHE_TTL}ms due to poor performance`);\r\n  } else if (avgResponseTime < 200 && cacheHitRate > 0.8) {\r\n    \r\n    global.CACHE_TTL = Math.max(CACHE_TTL * 0.8, 15000); \r\n    console.error(`[OPTIMIZATION] Reduced cache TTL to ${global.CACHE_TTL}ms due to good performance`);\r\n  }\r\n\r\n  if (responseCache.size > 50) {",
      "startLine": 39,
      "endLine": 52
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const keysToDelete = [];\r\n    for (const [key, entry] of responseCache) {\r\n      if (now - entry.timestamp > CACHE_TTL * 0.5) {\r\n        keysToDelete.push(key);\r\n      }\r\n    }\r\n\r\n    keysToDelete.forEach(key => {\r\n      responseCache.delete(key);\r\n      cacheUsage.delete(key);\r\n    });\r\n\r\n    console.error(`[OPTIMIZATION] Cleared ${keysToDelete.length} old cache entries`);\r\n  }\r\n\r\n  performanceMetrics.lastOptimization = now;\r\n}\r\n\r\nexport function parseError(error) {",
      "startLine": 52,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const errorCodeMap = {\r\n    'ENOENT': { code: -32001, message: 'File or directory not found', shouldFallback: true },\r\n    'EACCES': { code: -32002, message: 'Permission denied', shouldFallback: false },\r\n    'ETIMEOUT': { code: -32003, message: 'Operation timeout', shouldFallback: true },\r\n    'EMFILE': { code: -32004, message: 'Too many open files', shouldFallback: true },\r\n    'ENOMEM': { code: -32005, message: 'Out of memory', shouldFallback: false },\r\n    'EPERM': { code: -32006, message: 'Operation not permitted', shouldFallback: false }\r\n  };",
      "startLine": 71,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const errorKey = Object.keys(errorCodeMap).find(key => error.message.includes(key) || error.code === key);",
      "startLine": 80,
      "endLine": 81
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const baseError = errorCodeMap[errorKey] || {\r\n    code: -32000,\r\n    message: error.message || 'Unknown error',\r\n    shouldFallback: false\r\n  };\r\n\r\n  return {\r\n    ...baseError,\r\n    suggestions: getErrorSuggestions(baseError.code, error),\r\n    originalError: error\r\n  };\r\n}\r\n\r\nexport function getErrorSuggestions(errorCode, error) {",
      "startLine": 81,
      "endLine": 95
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const suggestions = {\r\n    '-32001': ['Check if the file path exists', 'Verify directory permissions', 'Use absolute paths'],\r\n    '-32002': ['Run with elevated permissions', 'Check file ownership', 'Verify process capabilities'],\r\n    '-32003': ['Increase timeout value', 'Check network connectivity', 'Reduce operation complexity'],\r\n    '-32004': ['Close unused file handles', 'Increase file descriptor limit', 'Process files in batches'],\r\n    '-32005': ['Reduce memory usage', 'Process data in chunks', 'Free unused resources'],\r\n    '-32006': ['Check system permissions', 'Verify user capabilities', 'Run with appropriate privileges']\r\n  };\r\n\r\n  return suggestions[errorCode] || ['Retry the operation', 'Check system resources', 'Verify input parameters'];\r\n}\r\n\r\nexport async function attemptFallback(toolName, args, errorInfo) {",
      "startLine": 95,
      "endLine": 108
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const fallbackStrategies = {\r\n    'searchcode': async (args) => {",
      "startLine": 108,
      "endLine": 111
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const fs = await import('fs');",
      "startLine": 111,
      "endLine": 112
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const path = await import('path');",
      "startLine": 112,
      "endLine": 113
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const results = [];",
      "startLine": 113,
      "endLine": 115
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const searchDir = args.workingDirectory || process.cwd();",
      "startLine": 115,
      "endLine": 116
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const searchTerm = args.query || 'function';\r\n\r\n      try {",
      "startLine": 116,
      "endLine": 119
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const files = fs.readdirSync(searchDir);\r\n        for (const file of files) {\r\n          if (file.endsWith('.js') || file.endsWith('.ts')) {",
      "startLine": 119,
      "endLine": 122
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const content = fs.readFileSync(path.join(searchDir, file), 'utf8');\r\n            if (content.includes(searchTerm)) {\r\n              results.push({ file, matches: content.split('\\n').filter(line => line.includes(searchTerm)).length });\r\n            }\r\n          }\r\n        }\r\n        return { results, _fallbackMethod: 'filesystem_search' };\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    },\r\n\r\n    'execute': async (args) => {\r\n      \r\n      try {\r\n        if (args.commands) {\r\n          const { execSync } = await import('child_process');",
      "startLine": 122,
      "endLine": 139
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const result = execSync(args.commands, {\r\n            encoding: 'utf8',\r\n            timeout: 30000,\r\n            cwd: args.workingDirectory\r\n          });\r\n          return { output: result, _fallbackMethod: 'simplified_execution' };\r\n        }\r\n      } catch (e) {\r\n        return null;\r\n      }\r\n    }\r\n  };",
      "startLine": 139,
      "endLine": 152
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server-utils.js",
      "content": "const fallback = fallbackStrategies[toolName];\r\n  return fallback ? fallback(args) : null;\r\n}",
      "startLine": 152,
      "endLine": 156
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-server.js",
      "content": "export { default } from './universal-server-index.js';\nexport * from './universal-server-index.js';",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/core/universal-vector-indexer.js",
      "content": "export { default } from './universal-vector-indexer-index.js';\nexport * from './universal-vector-indexer-index.js';",
      "startLine": 0,
      "endLine": 4
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "#!/usr/bin/env node\r\n\r\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\r\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\r\nimport { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';\r\nimport { getAllTools } from './tools/tool-definitions.js';\r\nimport { TOOL_STRINGS } from './constants/tool-strings.js';\r\n\r\n// Create and configure the server",
      "startLine": 0,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const server = new Server(\r\n  {\r\n    name: TOOL_STRINGS.SERVER_NAME,\r\n    version: TOOL_STRINGS.SERVER_VERSION,\r\n    description: TOOL_STRINGS.SERVER_DESCRIPTION\r\n  },\r\n  {\r\n    capabilities: {\r\n      tools: {}\r\n    }\r\n  }\r\n);\r\n\r\n// Get all available tools",
      "startLine": 9,
      "endLine": 23
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const tools = getAllTools();\r\n\r\n// Register list_tools handler\r\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\r\n  return {\r\n    tools: tools\r\n  };\r\n});\r\n\r\n// Register call_tool handler\r\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\r\n  const { name, arguments: args } = request.params;",
      "startLine": 23,
      "endLine": 36
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const tool = tools.find(t => t.name === name);\r\n  if (!tool) {\r\n    throw new Error(`${TOOL_STRINGS.UNKNOWN_TOOL} ${name}`);\r\n  }\r\n\r\n  // Execute the tool\r\n  try {",
      "startLine": 36,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const result = await tool.handler(args);\r\n    return {\r\n      content: [{ type: \"text\", text: JSON.stringify(result, null, 2) }]\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      content: [{ type: \"text\", text: `${TOOL_STRINGS.ERROR_PREFIX} ${error.message}` }],\r\n      isError: true\r\n    };\r\n  }\r\n});\r\n\r\n// Start the server\r\nasync function main() {",
      "startLine": 43,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/src/index.js",
      "content": "const transport = new StdioServerTransport();\r\n  await server.connect(transport);\r\n  console.error(TOOL_STRINGS.SERVER_RUNNINMESSAGE);\r\n}\r\n\r\n// Auto-start when run directly\r\nif (import.meta.url === `file://${process.argv[1]}`) {\r\n  main().catch(error => {\r\n    console.error(`${TOOL_STRINGS.SERVER_ERROR_MESSAGE} ${error}`);\r\n    process.exit(1);\r\n  });\r\n}\r\n\r\n// Re-export only essential parts\r\nexport * from './tools/index.js';\r\nexport { server };",
      "startLine": 57,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/ast-tools.js",
      "content": "// Basic search and AST tools for MCP Glootie\r\n\r\nimport { searchCode } from '../vector-search.js';\r\nimport { TOOL_STRINGS } from '../constants/tool-strings.js';\r\nimport {\r\n  formatSearchResults,\r\n  createToolHandler,\r\n  validateRequiredParams,\r\n  createErrorResponse\r\n} from '../utils/tool-utils.js';\r\n\r\nexport const searchTools = [\r\n  {\r\n    name: \"searchcode\",\r\n    description: TOOL_STRINGS.SEARCHCODE_DESCRIPTION,\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        query: { type: \"string\", description: TOOL_STRINGS.QUERY_DESCRIPTION },\r\n        path: { type: \"string\", description: TOOL_STRINGS.PATH_DESCRIPTION },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"query\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ query, path = TOOL_STRINGS.DEFAULT_PATH, workingDirectory }) => {\r\n      validateRequiredParams({ query, workingDirectory }, ['query', 'workingDirectory']);",
      "startLine": 0,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/ast-tools.js",
      "content": "const results = await searchCode(query, workingDirectory, [path]);\r\n      return formatSearchResults(results, query, path);\r\n    })\r\n  }\r\n];\r\n\r\nexport const astTools = [\r\n  {\r\n    name: \"parse_ast\",\r\n    description: \"Parse AST from code\",\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        code: { type: \"string\", description: TOOL_STRINGS.CODE_DESCRIPTION },\r\n        language: { type: \"string\", description: \"Programming language\" },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"code\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ code, language = TOOL_STRINGS.DEFAULT_LANGUAGE, workingDirectory }) => {\r\n      validateRequiredParams({ code, workingDirectory }, ['code', 'workingDirectory']);\r\n      return formatCodeParsingMessage(language, code);\r\n    })\r\n  }\r\n];\r\n\r\nexport const enhancedAstTools = [\r\n  {\r\n    name: \"astgrep_search\",\r\n    description: TOOL_STRINGS.ASTGREP_SEARCH_DESCRIPTION,\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        pattern: { type: \"string\", description: TOOL_STRINGS.PATTERN_DESCRIPTION },\r\n        path: { type: \"string\", description: TOOL_STRINGS.PATH_DESCRIPTION },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"pattern\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ pattern, path = TOOL_STRINGS.DEFAULT_PATH, workingDirectory }) => {\r\n      validateRequiredParams({ pattern, workingDirectory }, ['pattern', 'workingDirectory']);\r\n      return formatASTSearchMessage(pattern, path);\r\n    })\r\n  },\r\n  {\r\n    name: \"astgrep_replace\",\r\n    description: TOOL_STRINGS.ASTGREP_REPLACE_DESCRIPTION,\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        pattern: { type: \"string\", description: TOOL_STRINGS.PATTERN_DESCRIPTION },\r\n        replacement: { type: \"string\", description: TOOL_STRINGS.REPLACEMENT_DESCRIPTION },\r\n        path: { type: \"string\", description: TOOL_STRINGS.PATH_DESCRIPTION },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"pattern\", \"replacement\", \"path\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ pattern, replacement, path, workingDirectory }) => {\r\n      validateRequiredParams({ pattern, replacement, path, workingDirectory }, ['pattern', 'replacement', 'path', 'workingDirectory']);\r\n      return formatASTReplaceMessage(pattern, replacement, path);\r\n    })\r\n  },\r\n  {\r\n    name: \"astgrep_lint\",\r\n    description: TOOL_STRINGS.ASTGREP_LINT_DESCRIPTION,\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        path: { type: \"string\", description: TOOL_STRINGS.PATH_DESCRIPTION },\r\n        rules: { type: \"array\", description: TOOL_STRINGS.RULES_DESCRIPTION },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"path\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ path, rules = [], workingDirectory }) => {\r\n      validateRequiredParams({ path, workingDirectory }, ['path', 'workingDirectory']);\r\n      return formatASTLintMessage(path);\r\n    })\r\n  }\r\n];\r\nexport const batchTools = [\r\n  {\r\n    name: \"batch_execute\",\r\n    description: TOOL_STRINGS.BATCH_EXECUTE_DESCRIPTION,\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        operations: {\r\n          type: \"array\",\r\n          items: {\r\n            type: \"object\",\r\n            properties: {\r\n              type: { type: \"string\", enum: [\"execute\", \"search\", \"edit\"] },\r\n              code: { type: \"string\" },\r\n              query: { type: \"string\" },\r\n              path: { type: \"string\" }\r\n            }\r\n          }\r\n        },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"operations\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ operations, workingDirectory }) => {\r\n      validateRequiredParams({ operations, workingDirectory }, ['operations', 'workingDirectory']);\r\n      return formatBatchOperationMessage(operations);\r\n    })\r\n  }\r\n];\r\nimport { handleSequentialThinking } from '../core/thinking-handler.js';\r\n\r\nexport const thinkingTools = [\r\n  {\r\n    name: \"sequentialthinking\",\r\n    description: TOOL_STRINGS.SEQUENTIAL_THINKINDESCRIPTION,\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        thoughts: {\r\n          type: [\"string\", \"array\"],\r\n          items: {\r\n            type: \"string\",\r\n            minLength: 1\r\n          },\r\n          minLength: 1,\r\n          description: \"Single thought (string) or multiple thoughts (array of strings) to process\"\r\n        },\r\n        workingDirectory: {\r\n          type: \"string\",\r\n          description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION\r\n        },\r\n        parentId: {\r\n          type: \"string\",\r\n          description: \"Optional - parent thought ID for creating thought chains\"\r\n        }\r\n      },\r\n      required: [\"thoughts\", \"workingDirectory\"]\r\n    },\r\n    handler: handleSequentialThinking\r\n  }\r\n];\r\n\r\n// Add vector search tool\r\nexport const vectorTools = [\r\n  {\r\n    name: \"vector_search\",\r\n    description: \"BEST for generalized searches when specifics unknown. MANDATORY workingDirectory for concurrent processing. Semantic search across codebase.\",\r\n    inputSchema: {\r\n      type: \"object\",\r\n      properties: {\r\n        query: { type: \"string\", description: \"Natural language query\" },\r\n        path: { type: \"string\", description: TOOL_STRINGS.PATH_DESCRIPTION },\r\n        workingDirectory: { type: \"string\", description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION }\r\n      },\r\n      required: [\"query\", \"workingDirectory\"]\r\n    },\r\n    handler: createToolHandler(async ({ query, path = TOOL_STRINGS.DEFAULT_PATH, workingDirectory }) => {\r\n      validateRequiredParams({ query, workingDirectory }, ['query', 'workingDirectory']);",
      "startLine": 26,
      "endLine": 184
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/ast-tools.js",
      "content": "const results = await searchCode(query, workingDirectory, [path]);\r\n      return results.length > 0\r\n        ? `Found ${results.length} semantic results for \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`\r\n        : `No semantic results found for \"${query}\" in ${path}`;\r\n    })\r\n  }\r\n];",
      "startLine": 184,
      "endLine": 190
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/execution-tools.js",
      "content": "import { TOOL_STRINGS } from '../constants/tool-strings.js';\r\nimport {\r\n  toolCreators,\r\n  responseFormatters,\r\n  DEFAULT_PARAMS,\r\n  COMMON_SCHEMAS\r\n} from '../utils/shared-hooks.js';\r\n\r\nexport const executionTools = [\r\n  toolCreators.withWorkingDirectory(\r\n    \"execute\",\r\n    TOOL_STRINGS.EXECUTE_DESCRIPTION,\r\n    async ({ code, commands, workingDirectory, runtime = DEFAULT_PARAMS.runtime, timeout = DEFAULT_PARAMS.timeout }) => {\r\n      return responseFormatters.execution(workingDirectory, runtime);\r\n    },\r\n    {\r\n      code: COMMON_SCHEMAS.code,\r\n      commands: COMMON_SCHEMAS.commands,\r\n      runtime: COMMON_SCHEMAS.runtime,\r\n      timeout: COMMON_SCHEMAS.timeout,\r\n      }\r\n  ),\r\n\r\n  toolCreators.withWorkingDirectory(\r\n    \"retrieve_overflow\",\r\n    \"Retrieve truncated content from previous tool calls\",\r\n    async ({ workingDirectory, overflowFile, chunkIndex = DEFAULT_PARAMS.chunkIndex, listFiles = DEFAULT_PARAMS.listFiles, cleanup = DEFAULT_PARAMS.cleanup }) => {\r\n      return {\r\n        content: [{ type: \"text\", text: `${TOOL_STRINGS.OVERFLOW_RETRIEVAL_REQUESTED} ${workingDirectory}` }],\r\n        isError: false\r\n      };\r\n    },\r\n    {\r\n      overflowFile: {\r\n        type: \"string\",\r\n        description: TOOL_STRINGS.OVERFLOW_FILENAME_DESCRIPTION\r\n      },\r\n      chunkIndex: {\r\n        type: \"number\",\r\n        description: TOOL_STRINGS.CHUNK_INDEX_DESCRIPTION\r\n      },\r\n      listFiles: {\r\n        type: \"boolean\",\r\n        description: TOOL_STRINGS.LIST_FILES_DESCRIPTION\r\n      },\r\n      cleanup: {\r\n        type: \"boolean\",\r\n        description: TOOL_STRINGS.CLEANUP_DESCRIPTION\r\n      }\r\n    }\r\n  )\r\n];",
      "startLine": 0,
      "endLine": 53
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/index.js",
      "content": "export * from './tool-definitions.js';\r\nexport * from './tool-schemas.js';\r\nexport * from './execution-tools.js';",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/tool-definitions.js",
      "content": "import { executionTools } from './execution-tools.js';\r\nimport { searchTools, astTools, enhancedAstTools, batchTools, thinkingTools, vectorTools } from './ast-tools.js';\r\n\r\nexport function getAllTools() {\r\n  return [\r\n    ...executionTools,\r\n    ...searchTools,\r\n    ...astTools,\r\n    ...enhancedAstTools,\r\n    ...batchTools,\r\n    ...thinkingTools,\r\n    ...vectorTools\r\n  ];\r\n}",
      "startLine": 0,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/tools/tool-schemas.js",
      "content": "export const workingDirectoryParam = {\r\n  type: \"string\",\r\n  description: \"Working directory path\"\r\n};\r\n\r\nexport const commonParams = {\r\n  timeout: {\r\n    type: \"number\",\r\n    description: \"Timeout ms (default: 120000)\"\r\n  },\r\n  paths: {\r\n    type: \"array\",\r\n    items: { type: \"string\" },\r\n    description: \"Specific target paths\"\r\n  },\r\n  language: {\r\n    type: \"string\",\r\n    description: \"Target language\"\r\n  },\r\n  dryRun: {\r\n    type: \"boolean\",\r\n    description: \"Preview mode (recommended)\"\r\n  }\r\n};\r\n\r\nexport function createExecutionSchema(executor, additionalProps = {}) {\r\n  return {\r\n    type: \"object\",\r\n    properties: {\r\n      code: {\r\n        type: \"string\",\r\n        description: `${executor} execution target`\r\n      },\r\n      workingDirectory: workingDirectoryParam,\r\n      timeout: commonParams.timeout,\r\n      ...additionalProps\r\n    },\r\n    required: [\"code\", \"workingDirectory\"]\r\n  };\r\n}\r\n\r\nexport function createSearchSchema(additionalProps = {}) {\r\n  return {\r\n    type: \"object\",\r\n    properties: {\r\n      query: {\r\n        type: \"string\",\r\n        description: \"Semantic search query\"\r\n      },\r\n      workingDirectory: workingDirectoryParam,\r\n      folders: {\r\n        type: \"string\",\r\n        description: \"Target folders (comma-separated)\"\r\n      },\r\n      extensions: {\r\n        type: \"string\",\r\n        description: \"File extensions (default: js,ts)\"\r\n      },\r\n      ignores: {\r\n        type: \"string\",\r\n        description: \"Ignore patterns (default: node_modules)\"\r\n      },\r\n      topK: {\r\n        type: \"number\",\r\n        description: \"Result count (default: 6)\"\r\n      },\r\n      ...additionalProps\r\n    },\r\n    required: [\"query\", \"workingDirectory\"]\r\n  };\r\n}\r\n\r\nexport function createAstSchema(additionalProps = {}) {\r\n  return {\r\n    type: \"object\",\r\n    properties: {\r\n      pattern: {\r\n        type: \"string\",\r\n        description: \"AST pattern with meta-vars (e.g., 'function $NAME($$$ARGS) { $$$ }')\"\r\n      },\r\n      workingDirectory: workingDirectoryParam,\r\n      language: commonParams.language,\r\n      paths: commonParams.paths,\r\n      ...additionalProps\r\n    },\r\n    required: [\"pattern\", \"workingDirectory\"]\r\n  };\r\n}\r\n\r\nexport function createToolDefinition(name, description, inputSchema) {\r\n  return { name, description, inputSchema };\r\n}",
      "startLine": 0,
      "endLine": 93
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/ast-tools-utils.js",
      "content": "import { createToolDefinition } from './tool-schemas.js';\r\n\r\nexport const thinkingTools = [\r\n  createToolDefinition(\r\n    \"sequentialthinking\",\r\n    \"Sequential thinking tool for complex task analysis. Use to organize requirements, tool selection, and insights. Helpful for structured planning of complex tasks.\",\r\n    {\r\n      type: \"object\",\r\n      properties: {\r\n        thoughts: {\r\n          type: [\"string\", \"array\"],\r\n          items: { type: \"string\", minLength: 1 },\r\n          minLength: 1\r\n        },\r\n        workingDirectory: {\r\n          type: \"string\",\r\n          description: \"Required - working directory for storing thought data locally\"\r\n        },\r\n        parentId: {\r\n          type: \"string\",\r\n          description: \"Optional - parent thought ID for creating thought chains\"\r\n        }\r\n      },\r\n      required: [\"thoughts\", \"workingDirectory\"]\r\n    }\r\n  )\r\n];",
      "startLine": 0,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/ast-tools.js",
      "content": "export const searchTools = [];\nexport const astTools = [];\nexport const enhancedAstTools = [];\nexport const batchTools = [];\nexport const thinkingTools = [];\nexport default { searchTools, astTools, enhancedAstTools, batchTools, thinkingTools };",
      "startLine": 0,
      "endLine": 8
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/batch-utils.js",
      "content": "// Batch processing utilities\r\nexport function formatBatchSummary(operations, successfulOps) {",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/batch-utils.js",
      "content": "const summaryLines = [];\r\n  summaryLines.push(`Completed: ${successfulOps}/${operations.length} operations`);\r\n\r\n  if (successfulOps === operations.length) {\r\n    summaryLines.push('Status: All operations completed successfully');\r\n  } else {\r\n    summaryLines.push('Status: Some operations encountered issues');\r\n  }\r\n\r\n  summaryLines.push('The system automatically selected and configured the appropriate tools based on your task description.');\r\n\r\n  return summaryLines.join('\\n');\r\n}",
      "startLine": 3,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/error-handling.js",
      "content": "import { TOOL_STRINGS } from '../constants/tool-strings.js';\n\nexport class ToolError extends Error {\n  constructor(message, code = 'TOOL_ERROR') {\n    super(message);\n    this.name = 'ToolError';\n    this.code = code;\n  }\n}\n\nexport class ValidationError extends ToolError {\n  constructor(message) {\n    super(message, 'VALIDATION_ERROR');\n    this.name = 'ValidationError';\n  }\n}\n\nexport class ExecutionError extends ToolError {\n  constructor(message) {\n    super(message, 'EXECUTION_ERROR');\n    this.name = 'ExecutionError';\n  }\n}\n\nexport class SearchError extends ToolError {\n  constructor(message) {\n    super(message, 'SEARCH_ERROR');\n    this.name = 'SearchError';\n  }\n}\n\nexport function createErrorHandler(toolName) {\n  return async (operation, errorMessage = `${toolName} failed`) => {\n    try {\n      return await operation();\n    } catch (error) {\n      if (error instanceof ToolError) {\n        throw error;\n      }\n      throw new ToolError(`${errorMessage}: ${error.message}`);\n    }\n  };\n}\n\nexport function withErrorHandling(handler, toolName) {\n  return async (args) => {\n    try {\n      return await handler(args);\n    } catch (error) {\n      console.error(`Error in ${toolName}:`, error);\n\n      if (error instanceof ValidationError) {\n        return {\n          content: [{ type: \"text\", text: `Validation Error: ${error.message}` }],\n          isError: true\n        };\n      }\n\n      if (error instanceof ExecutionError) {\n        return {\n          content: [{ type: \"text\", text: `Execution Error: ${error.message}` }],\n          isError: true\n        };\n      }\n\n      if (error instanceof SearchError) {\n        return {\n          content: [{ type: \"text\", text: `Search Error: ${error.message}` }],\n          isError: true\n        };\n      }\n\n      return {\n        content: [{ type: \"text\", text: `${TOOL_STRINGS.ERROR_PREFIX} ${error.message}` }],\n        isError: true\n      };\n    }\n  };\n}\n\nexport function validateParams(params, schema) {",
      "startLine": 0,
      "endLine": 81
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/error-handling.js",
      "content": "const errors = [];\n\n  // Check required parameters\n  if (schema.required) {\n    for (const required of schema.required) {\n      if (params[required] === undefined || params[required] === null || params[required] === '') {\n        errors.push(`Missing required parameter: ${required}`);\n      }\n    }\n  }\n\n  // Check parameter types\n  if (schema.properties) {\n    for (const [key, value] of Object.entries(params)) {",
      "startLine": 81,
      "endLine": 95
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/error-handling.js",
      "content": "const propertySchema = schema.properties[key];\n      if (propertySchema && value !== undefined) {\n        if (propertySchema.type && !validateType(value, propertySchema.type)) {\n          errors.push(`Invalid type for parameter ${key}: expected ${propertySchema.type}`);\n        }\n\n        if (propertySchema.enum && !propertySchema.enum.includes(value)) {\n          errors.push(`Invalid value for parameter ${key}: must be one of ${propertySchema.enum.join(', ')}`);\n        }\n      }\n    }\n  }\n\n  if (errors.length > 0) {\n    throw new ValidationError(errors.join(', '));\n  }\n}",
      "startLine": 95,
      "endLine": 113
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/error-handling.js",
      "content": "function validateType(value, expectedType) {\n  if (Array.isArray(expectedType)) {\n    return expectedType.some(type => validateType(value, type));\n  }\n\n  switch (expectedType) {\n    case 'string':\n      return typeof value === 'string';\n    case 'number':\n      return typeof value === 'number' && !isNaN(value);\n    case 'boolean':\n      return typeof value === 'boolean';\n    case 'array':\n      return Array.isArray(value);\n    case 'object':\n      return typeof value === 'object' && value !== null && !Array.isArray(value);\n    default:\n      return true;\n  }\n}",
      "startLine": 112,
      "endLine": 132
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/error-handling.js",
      "content": "export function createToolErrorHandler(toolName) {\n  return withErrorHandling(\n    async (args) => {\n      // Validate parameters here if needed\n      return args;\n    },\n    toolName\n  );\n}",
      "startLine": 132,
      "endLine": 142
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/index.js",
      "content": "// Only include working utility files\nexport * from './batch-utils.js';\nexport * from './vector-indexer-utils.js';\n\nimport { getAllTools } from '../tools/tool-definitions.js';\n\nexport const tools = getAllTools();\n\nexport function getTool(name) {\n  return tools.find(tool => tool.name === name);\n}\n\nexport function hasTool(name) {\n  return tools.some(tool => tool.name === name);\n}\n\nexport const toolNames = tools.map(tool => tool.name);\n\nexport default tools;",
      "startLine": 0,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "// Shared hooks and utilities for MCP Glootie tools\n// This module consolidates common patterns and utilities used across the codebase\n\nimport { TOOL_STRINGS } from '../constants/tool-strings.js';\nimport {\n  createToolHandler,\n  validateRequiredParams,\n  createToolResponse,\n  createErrorResponse,\n  createSuccessResponse\n} from './tool-utils.js';\nimport { withErrorHandling, ValidationError, ExecutionError, SearchError } from './error-handling.js';\n\n/**\n * Common validation schemas for tool parameters\n */\nexport const COMMON_SCHEMAS = {\n  workingDirectory: {\n    type: \"string\",\n    description: TOOL_STRINGS.WORKINDIRECTORY_DESCRIPTION\n  },\n  timeout: {\n    type: \"number\",\n    description: TOOL_STRINGS.TIMEOUT_DESCRIPTION\n  },\n  path: {\n    type: \"string\",\n    description: TOOL_STRINGS.PATH_DESCRIPTION\n  },\n  query: {\n    type: \"string\",\n    description: TOOL_STRINGS.QUERY_DESCRIPTION\n  },\n  code: {\n    type: \"string\",\n    description: TOOL_STRINGS.CODE_DESCRIPTION\n  },\n  commands: {\n    type: [\"string\", \"array\"],\n    description: TOOL_STRINGS.COMMANDS_DESCRIPTION\n  },\n  runtime: {\n    type: \"string\",\n    enum: [\"nodejs\", \"deno\", \"bash\", \"auto\"],\n    description: TOOL_STRINGS.RUNTIME_DESCRIPTION\n  }\n};\n\n/**\n * Default parameters that can be used across tools\n */\nexport const DEFAULT_PARAMS = {\n  runtime: TOOL_STRINGS.DEFAULT_RUNTIME,\n  timeout: TOOL_STRINGS.DEFAULT_TIMEOUT,\n  path: TOOL_STRINGS.DEFAULT_PATH,\n  language: TOOL_STRINGS.DEFAULT_LANGUAGE,\n  chunkIndex: TOOL_STRINGS.DEFAULT_CHUNK_INDEX,\n  listFiles: TOOL_STRINGS.DEFAULT_LIST_FILES,\n  cleanup: TOOL_STRINGS.DEFAULT_CLEANUP\n};\n\n/**\n * Factory function to create a complete tool configuration\n */\nexport function createToolConfig(name, description, inputSchema, handler) {\n  return {\n    name,\n    description,\n    inputSchema,\n    handler: createToolHandler(handler, name)\n  };\n}\n\n/**\n * Enhanced tool handler with validation and error handling\n */\nexport function createEnhancedToolHandler(handler, toolName, requiredParams = []) {\n  return createToolHandler(async (args) => {\n    validateRequiredParams(args, requiredParams);\n    return await handler(args);\n  }, toolName);\n}\n\n/**\n * Common response formatters\n */\nexport const responseFormatters = {\n  search: (results, query, path) => {\n    if (results.length === 0) {\n      return createToolResponse(`${TOOL_STRINGS.NO_RESULTS_FOUND} for \"${query}\" in ${path}`);\n    }\n    return createSuccessResponse({\n      count: results.length,\n      query,\n      path,\n      results\n    });\n  },\n\n  execution: (workingDirectory, runtime = DEFAULT_PARAMS.runtime) => {\n    return createToolResponse(`${TOOL_STRINGS.EXECUTION_REQUESTED} ${workingDirectory} with runtime ${runtime}`);\n  },\n\n  batch: (operations) => {\n    return createToolResponse(`${TOOL_STRINGS.BATCH_EXECUTING} ${operations.length} ${TOOL_STRINGS.OPERATIONS}`);\n  },\n\n  ast: (operation, details) => {\n    return createToolResponse(`AST ${operation}: ${JSON.stringify(details, null, 2)}`);\n  }\n};\n\n/**\n * Common error handling patterns\n */\nexport const errorHandlers = {\n  validation: (message) => {\n    throw new ValidationError(message);\n  },\n\n  execution: (message) => {\n    throw new ExecutionError(message);\n  },\n\n  search: (message) => {\n    throw new SearchError(message);\n  },\n\n  general: (message) => {\n    throw new Error(`${TOOL_STRINGS.ERROR_PREFIX} ${message}`);\n  }\n};\n\n/**\n * Tool creation helpers for common patterns\n */\nexport const toolCreators = {\n  simple: (name, description, handler, requiredParams = []) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {},\n        required: requiredParams\n      },\n      createEnhancedToolHandler(handler, name, requiredParams)\n    );\n  },\n\n  withWorkingDirectory: (name, description, handler, additionalProperties = {}) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          workingDirectory: COMMON_SCHEMAS.workingDirectory,\n          ...additionalProperties\n        },\n        required: [\"workingDirectory\"]\n      },\n      createEnhancedToolHandler(handler, name, [\"workingDirectory\"])\n    );\n  },\n\n  searchBased: (name, description, handler, additionalRequired = []) => {\n    return createToolConfig(\n      name,\n      description,\n      {\n        type: \"object\",\n        properties: {\n          query: COMMON_SCHEMAS.query,\n          path: COMMON_SCHEMAS.path,\n          workingDirectory: COMMON_SCHEMAS.workingDirectory\n        },\n        required: [\"query\", \"workingDirectory\", ...additionalRequired]\n      },\n      createEnhancedToolHandler(handler, name, [\"query\", \"workingDirectory\", ...additionalRequired])\n    );\n  }\n};\n\n/**\n * Utility functions for tool orchestration\n */\nexport const toolUtils = {\n  /**\n   * Safely execute multiple operations and return aggregated results\n   */\n  async executeBatch(operations, options = {}) {\n    const { concurrency = 5, stopOnError = false } = options;",
      "startLine": 0,
      "endLine": 193
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const results = [];",
      "startLine": 193,
      "endLine": 194
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const errors = [];\n\n    for (let i = 0; i < operations.length; i += concurrency) {",
      "startLine": 194,
      "endLine": 197
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const batch = operations.slice(i, i + concurrency);",
      "startLine": 197,
      "endLine": 198
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const batchPromises = batch.map(async (operation, index) => {\n        try {",
      "startLine": 198,
      "endLine": 200
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const result = await operation();\n          return { success: true, result, index: i + index };\n        } catch (error) {\n          errors.push({ error, index: i + index });\n          if (stopOnError) {\n            throw error;\n          }\n          return { success: false, error: error.message, index: i + index };\n        }\n      });",
      "startLine": 200,
      "endLine": 211
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n    }\n\n    return { results, errors };\n  },\n\n  /**\n   * Create a retry wrapper for operations\n   */\n  withRetry(operation, maxRetries = 3, delay = 1000) {\n    return async (...args) => {",
      "startLine": 211,
      "endLine": 223
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "let lastError;\n      for (let attempt = 1; attempt <= maxRetries; attempt++) {\n        try {\n          return await operation(...args);\n        } catch (error) {\n          lastError = error;\n          if (attempt < maxRetries) {\n            await new Promise(resolve => setTimeout(resolve, delay * attempt));\n          }\n        }\n      }\n      throw lastError;\n    };\n  },\n\n  /**\n   * Create a timeout wrapper for operations\n   */\n  withTimeout(operation, timeoutMs = DEFAULT_PARAMS.timeout) {\n    return async (...args) => {",
      "startLine": 223,
      "endLine": 243
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/shared-hooks.js",
      "content": "const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\n      });\n\n      return Promise.race([\n        operation(...args),\n        timeoutPromise\n      ]);\n    };\n  }\n};\n\n/**\n * React-style error boundary simulation for tool operations\n */\nexport class ToolErrorBoundary {\n  constructor(toolName) {\n    this.toolName = toolName;\n    this.errors = [];\n  }\n\n  async execute(operation) {\n    try {\n      return await operation();\n    } catch (error) {\n      this.errors.push(error);\n      console.error(`Error in ${this.toolName}:`, error);\n\n      if (error instanceof ValidationError) {\n        return createErrorResponse(`Validation Error: ${error.message}`);\n      }\n\n      if (error instanceof ExecutionError) {\n        return createErrorResponse(`Execution Error: ${error.message}`);\n      }\n\n      if (error instanceof SearchError) {\n        return createErrorResponse(`Search Error: ${error.message}`);\n      }\n\n      return createErrorResponse(error.message);\n    }\n  }\n\n  getErrors() {\n    return this.errors;\n  }\n\n  clearErrors() {\n    this.errors = [];\n  }\n}\n\n/**\n * Create an error boundary for a specific tool\n */\nexport function createErrorBoundary(toolName) {\n  return new ToolErrorBoundary(toolName);\n}",
      "startLine": 243,
      "endLine": 301
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "import { TOOL_STRINGS } from '../constants/tool-strings.js';\nimport { ValidationError, withErrorHandling } from './error-handling.js';\n\nexport function createToolResponse(content, isError = false) {\n  return {\n    content: [{ type: \"text\", text: content }],\n    isError\n  };\n}\n\nexport function createErrorResponse(message) {\n  return createToolResponse(`${TOOL_STRINGS.ERROR_PREFIX} ${message}`, true);\n}\n\nexport function createSuccessResponse(data) {\n  return createToolResponse(JSON.stringify(data, null, 2));\n}\n\nexport function validateRequiredParams(params, requiredParams) {",
      "startLine": 0,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const missingParams = requiredParams.filter(param => !params[param]);\n  if (missingParams.length > 0) {\n    throw new ValidationError(`Missing required parameters: ${missingParams.join(', ')}`);\n  }\n}\n\nexport function getDefaultIgnorePatterns(workingDirectory) {",
      "startLine": 19,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const defaultPatterns = {\n    files: [\n      '**/node_modules/**',\n      '**/.next/**',\n      '**/dist/**',\n      '**/build/**',\n      '**/out/**',\n      '**/coverage/**',\n      '**/.nyc_output/**',\n      '**/.git/**',\n      '**/.vscode/**',\n      '**/.idea/**',\n      '**/*.log',\n      '**/*.tmp',\n      '**/temp/**',\n      '**/tmp/**',\n      '**/.DS_Store',\n      '**/Thumbs.db',\n      '**/*.map',\n      '**/*.min.js',\n      '**/*.min.css',\n      '**/package-lock.json',\n      '**/yarn.lock'\n    ],\n    extensions: ['.ts', '.tsx', '.js', '.jsx', '.css', '.json', '.md'],\n    directories: [\n      'node_modules',\n      '.next',\n      'dist',\n      'build',\n      'out',\n      'coverage',\n      '.nyc_output',\n      '.git',\n      '.vscode',\n      '.idea',\n      'temp',\n      'tmp'\n    ]\n  };\n\n  // Try to read custom ignore patterns from the working directory\n  try {",
      "startLine": 26,
      "endLine": 69
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const fs = require('fs');",
      "startLine": 69,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const path = require('path');\n\n    // Check for custom search defaults",
      "startLine": 70,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const searchDefaultsPath = path.join(workingDirectory, '.search-defaults.json');\n    if (fs.existsSync(searchDefaultsPath)) {",
      "startLine": 73,
      "endLine": 75
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const customDefaults = JSON.parse(fs.readFileSync(searchDefaultsPath, 'utf8'));\n      return { ...defaultPatterns, ...customDefaults };\n    }\n\n    // Check for .gitignore",
      "startLine": 75,
      "endLine": 80
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const gitignorePath = path.join(workingDirectory, '.gitignore');\n    if (fs.existsSync(gitignorePath)) {",
      "startLine": 80,
      "endLine": 82
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');",
      "startLine": 82,
      "endLine": 83
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const gitignorePatterns = gitignoreContent\n        .split('\\n')\n        .filter(line => line.trim() && !line.startsWith('#'))\n        .map(line => line.trim());\n\n      return {\n        ...defaultPatterns,\n        customGitignore: gitignorePatterns\n      };\n    }\n  } catch (error) {\n    // If we can't read files, just return defaults\n    console.warn('Warning: Could not read ignore patterns, using defaults:', error.message);\n  }\n\n  return defaultPatterns;\n}\n\nexport function formatSearchResults(results, query, path) {\n  if (results.length === 0) {\n    return `${TOOL_STRINGS.NO_RESULTS_FOUND} for \"${query}\" in ${path}`;\n  }\n\n  return `${TOOL_STRINGS.FOUND_RESULTS} ${results.length} ${TOOL_STRINGS.RESULTS_FOR} \"${query}\" in ${path}:\\n\\n${results.map(r => `${r.file}:${r.startLine}-${r.endLine}\\n${r.content.substring(0, 200)}...\\nScore: ${r.score.toFixed(3)}`).join('\\n\\n')}`;\n}\n\nexport function formatExecutionMessage(workingDirectory, runtime = TOOL_STRINGS.DEFAULT_RUNTIME) {\n  return `${TOOL_STRINGS.EXECUTION_REQUESTED} ${workingDirectory} with runtime ${runtime}`;\n}\n\nexport function formatBatchOperationMessage(operations) {\n  return `${TOOL_STRINGS.BATCH_EXECUTING} ${operations.length} ${TOOL_STRINGS.OPERATIONS}`;\n}\n\nexport function formatOverflowRetrievalMessage(workingDirectory) {\n  return `${TOOL_STRINGS.OVERFLOW_RETRIEVAL_REQUESTED} ${workingDirectory}`;\n}\n\nexport function formatCodeParsingMessage(language, code) {\n  return `${TOOL_STRINGS.PARSINCODE} ${language} ${TOOL_STRINGS.CODE_SUBSTRING} ${code.substring(0, 100)}...`;\n}\n\nexport function formatASTSearchMessage(pattern, path) {\n  return `AST searching: ${pattern} in ${path}`;\n}\n\nexport function formatASTReplaceMessage(pattern, replacement, path) {\n  return `AST replacing: ${pattern} -> ${replacement} in ${path}`;\n}\n\nexport function formatASTLintMessage(path) {\n  return `AST linting: ${path}`;\n}\n\nexport function getDefaultValues() {\n  return {\n    runtime: TOOL_STRINGS.DEFAULT_RUNTIME,\n    timeout: TOOL_STRINGS.DEFAULT_TIMEOUT,\n    path: TOOL_STRINGS.DEFAULT_PATH,\n    language: TOOL_STRINGS.DEFAULT_LANGUAGE,\n    chunkIndex: TOOL_STRINGS.DEFAULT_CHUNK_INDEX,\n    listFiles: TOOL_STRINGS.DEFAULT_LIST_FILES,\n    cleanup: TOOL_STRINGS.DEFAULT_CLEANUP\n  };\n}\n\nexport async function safeExecute(operation, errorMessage = \"Operation failed\") {\n  try {\n    return await operation();\n  } catch (error) {\n    throw new Error(`${errorMessage}: ${error.message}`);\n  }\n}\n\nexport function createToolHandler(handler, toolName = 'Unknown Tool') {\n  return withErrorHandling(\n    async (args) => {",
      "startLine": 83,
      "endLine": 160
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/tool-utils.js",
      "content": "const result = await handler(args);\n      return result;\n    },\n    toolName\n  );\n}",
      "startLine": 160,
      "endLine": 165
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "if (!content || typeof content !== 'object') return content;",
      "startLine": 0,
      "endLine": 2
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const maxChars = maxTokens * CHARS_PER_TOKEN - TRUNCATION_BUFFER;\r\n  \r\n  if (Array.isArray(content)) return truncateArray(content, maxChars);\r\n  if (content.text) return truncateSingle(content, maxChars);\r\n  if (content.content?.length) return { ...content, content: truncateArray(content.content, maxChars) };\r\n  \r\n  return content;\r\n}",
      "startLine": 2,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "function truncateArray(items, maxChars) {",
      "startLine": 11,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "let totalChars = 0;",
      "startLine": 12,
      "endLine": 13
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const result = [];\r\n  \r\n  for (let i = 0; i < items.length; i++) {",
      "startLine": 13,
      "endLine": 16
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const item = items[i];\r\n    if (!item?.text) { result.push(item); continue; }",
      "startLine": 16,
      "endLine": 19
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const itemChars = item.text.length;\r\n    if (totalChars + itemChars > maxChars) {",
      "startLine": 19,
      "endLine": 21
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const remaining = maxChars - totalChars;\r\n      if (remaining > MIN_PARTIAL_CHARS) {\r\n        result.push({ ...item, text: item.text.substring(0, remaining) + '\\n\\n[PARTIAL: Truncated]' });\r\n      }",
      "startLine": 21,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const omitted = items.length - i - (remaining > MIN_PARTIAL_CHARS ? 0 : 1);\r\n      if (omitted > 0) {",
      "startLine": 26,
      "endLine": 28
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const tokens = estimateRemainingTokens(items.slice(i + (remaining > MIN_PARTIAL_CHARS ? 1 : 0)));\r\n        result.push({\r\n          type: 'text',\r\n          text: `\\n[OUTPUT TRUNCATED: ${omitted} items omitted, ~${tokens} tokens, limit: ${MAX_TOKENS}]`\r\n        });\r\n      }\r\n      break;\r\n    }\r\n    \r\n    totalChars += itemChars;\r\n    result.push(item);\r\n  }\r\n  return result;\r\n}",
      "startLine": 28,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "function truncateSingle(content, maxChars) {\r\n  if (content.text.length <= maxChars) return content;",
      "startLine": 43,
      "endLine": 46
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const truncated = content.text.substring(0, maxChars);",
      "startLine": 46,
      "endLine": 47
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const removed = content.text.length - maxChars;",
      "startLine": 47,
      "endLine": 48
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const tokens = estimateTokens(content.text.substring(maxChars));\r\n  \r\n  return {\r\n    ...content,\r\n    text: truncated + `\\n\\n[OUTPUT TRUNCATED: ${removed} chars, ~${tokens} tokens, limit: ${MAX_TOKENS}]`\r\n  };\r\n}",
      "startLine": 48,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "function estimateRemainingTokens(items) {",
      "startLine": 56,
      "endLine": 57
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/truncation-utils.js",
      "content": "const totalChars = items.reduce((sum, item) => sum + (item?.text?.length || 0), 0);\r\n  return estimateTokens(totalChars.toString());\r\n}",
      "startLine": 57,
      "endLine": 59
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/validation-utils.js",
      "content": "import * as path from 'node:path';\r\nimport { existsSync, statSync } from 'fs';\r\n\nexport const validateWorkingDirectory = (workingDirectory, defaultWorkingDir) => {\r\n\n  if (!workingDirectory) {\r\n    return {\r\n      valid: false,\r\n      error: 'workingDirectory parameter is required for this operation',\r\n      effectiveDir: null\r\n    };\r\n  }\r\n  \r\n  try {",
      "startLine": 0,
      "endLine": 15
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/validation-utils.js",
      "content": "const resolvedPath = path.resolve(workingDirectory);\r\n    \r\n    if (!existsSync(resolvedPath)) {\r\n      return { \r\n        valid: false, \r\n        error: `Working directory '${workingDirectory}' does not exist`,\r\n        effectiveDir: null\r\n      };\r\n    }",
      "startLine": 15,
      "endLine": 25
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/validation-utils.js",
      "content": "const stats = statSync(resolvedPath);\r\n    \r\n    if (!stats.isDirectory()) {\r\n      return { \r\n        valid: false, \r\n        error: `Working directory '${workingDirectory}' is not a directory`,\r\n        effectiveDir: null\r\n      };\r\n    }\r\n    \r\n    return { valid: true, effectiveDir: resolvedPath };\r\n  } catch (error) {\r\n    return { \r\n      valid: false, \r\n      error: `Working directory '${workingDirectory}' is not accessible: ${error.message}`,\r\n      effectiveDir: null\r\n    };\r\n  }\r\n};",
      "startLine": 25,
      "endLine": 43
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "import fs from 'fs';\r\nimport path from 'path';",
      "startLine": 0,
      "endLine": 3
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "const MAX_FILE_SIZE = 1024 * 1024;\r\n\r\nexport function processFile(file, codeChunks) {",
      "startLine": 3,
      "endLine": 6
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "const newChunks = [];\r\n\r\n  try {",
      "startLine": 6,
      "endLine": 9
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "const stats = fs.statSync(file);\r\n    if (stats.size > MAX_FILE_SIZE) {\r\n      console.log(`File ${file} is large (${stats.size} bytes), truncating`);",
      "startLine": 9,
      "endLine": 12
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "let content = fs.readFileSync(file, 'utf8');\r\n\r\n      if (content.length > MAX_FILE_SIZE) {\r\n        content = content.substring(0, MAX_FILE_SIZE);\r\n      }",
      "startLine": 12,
      "endLine": 18
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "const chunks = [{\r\n        content,\r\n        file,\r\n        type: 'code',\r\n        metadata: { truncated: true, originalSize: stats.size }\r\n      }];\r\n      newChunks.push(...chunks);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error reading file ${file}:`, error);\r\n  }\r\n\r\n  codeChunks = newChunks;",
      "startLine": 18,
      "endLine": 32
    },
    {
      "file": "/config/workspace/mcp-repl/src/utils/vector-indexer-utils.js",
      "content": "const indexData = {\r\n    chunks: codeChunks,\r\n    timestamp: Date.now(),\r\n    version: '1.0'\r\n  };\r\n\r\n  return indexData;\r\n}",
      "startLine": 32,
      "endLine": 39
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "#!/usr/bin/env node\r\n// Optimized vector search with memory management and performance improvements\r\n\r\nimport fs from 'fs/promises';\r\nimport { existsSync, readFileSync, writeFileSync, mkdirSync, readdirSync } from 'fs';\r\nimport path from 'path';\r\nimport os from 'os';\r\nimport ignore from 'ignore';\r\nimport { getDefaultIgnorePatterns } from './utils/tool-utils.js';\r\n\r\n// Platform detection and configuration",
      "startLine": 0,
      "endLine": 11
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const platform = {\r\n  arch: os.arch(),\r\n  platform: os.platform(),\r\n  isARM64: os.arch() === 'arm64',\r\n  isX64: os.arch() === 'x64',\r\n  isMacOS: os.platform() === 'darwin',\r\n  isLinux: os.platform() === 'linux',\r\n  isWindows: os.platform() === 'win32'\r\n};\r\n\r\n// Configuration constants with platform-specific optimizations",
      "startLine": 11,
      "endLine": 22
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const INDEX_DIR = './code_search_index';",
      "startLine": 22,
      "endLine": 23
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const DEFAULT_MODEL = 'Xenova/all-MiniLM-L6-v2';",
      "startLine": 23,
      "endLine": 24
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const DEFAULT_DIM = 384; // Dimension size for the chosen model",
      "startLine": 24,
      "endLine": 25
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const DEFAULT_EXTS = ['js', 'ts', 'jsx', 'tsx'];",
      "startLine": 25,
      "endLine": 26
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const DEFAULT_IGNORES = [\r\n  'node_modules', '.git', '.node_modules',\r\n  'dist', 'build', 'coverage', '.nyc_output',\r\n  'tmp', 'temp', '.tmp', '.cache', '.parcel-cache',\r\n  '.next', '.nuxt', '.vuepress', '.docusaurus',\r\n  'public', 'static', 'assets', 'images', 'img',\r\n  '.vscode', '.idea', '.DS_Store', 'Thumbs.db',\r\n  'out', 'output', 'generated', 'gen',\r\n  '.angular', '.react', '.svelte-kit',\r\n  'storybook-static', 'docs-build', 'build-docs',\r\n  '.vite', '.turbo', '.nx', '.swc',\r\n  'bower_components', 'jspm_packages', '.pnp',\r\n  '__tests__', '__mocks__', '__snapshots__',\r\n  '.jest', '.mocha', '.cypress', '.playwright',\r\n  'package-lock.json', 'yarn.lock', 'pnpm-lock.yaml',\r\n  '.npmrc', '.yarnrc', '.pnpmrc',\r\n  'test-*.js', 'test-*.ts', '*.test.js', '*.test.ts',\r\n  '*.spec.js', '*.spec.ts', 'temp-*.js', 'ab-test-*.js',\r\n  '*.min.js', '*.bundle.js', '*.chunk.js',\r\n  '*.json', '*.md', '*.txt', '*.log', '*.xml', '*.csv',\r\n  '*.png', '*.jpg', '*.jpeg', '*.gif', '*.svg', '*.ico',\r\n  '*.pdf', '*.zip', '*.tar', '*.gz', '*.7z', '*.dmg',\r\n  '*.exe', '*.dll', '*.so', '*.dylib',\r\n  'coverage', 'reports', 'docs', 'documentation'\r\n];\r\n\r\n// File size limits (in bytes)",
      "startLine": 26,
      "endLine": 53
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const MAX_FILE_SIZE = 1024 * 1024; // 1MB for regular files",
      "startLine": 53,
      "endLine": 54
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const MAX_LARGE_FILE_SIZE = 5 * 1024 * 1024; // 5MB for large files",
      "startLine": 54,
      "endLine": 55
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const MAX_LINES_PER_CHUNK = 500; // Maximum lines per code chunk",
      "startLine": 55,
      "endLine": 56
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const MAX_CACHE_SIZE = 1000; // Maximum number of cached embeddings",
      "startLine": 56,
      "endLine": 58
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const INDEX_FILE = 'code_index.json';",
      "startLine": 58,
      "endLine": 59
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const VECTOR_INDEX_FILE = 'vector_index.json';\r\n\r\n// Platform-specific configuration",
      "startLine": 59,
      "endLine": 62
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const platformConfig = {\r\n  memoryLimit: platform.isARM64 ? 1024 * 1024 * 1024 : 512 * 1024 * 1024, // 1GB for ARM64, 512MB for others\r\n  batchSize: platform.isARM64 ? 32 : 16, // Larger batch size for ARM64\r\n  maxConcurrency: platform.isARM64 ? 4 : 2, // Higher concurrency for ARM64\r\n  timeout: platform.isARM64 ? 60000 : 30000 // Longer timeout for ARM64\r\n};\r\n\r\n// Optimized global state with memory management",
      "startLine": 62,
      "endLine": 70
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let codeChunks = [];",
      "startLine": 70,
      "endLine": 71
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let embeddingExtractor = null;",
      "startLine": 71,
      "endLine": 72
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let isInitialized = false;",
      "startLine": 72,
      "endLine": 73
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let embeddingCache = new Map(); // Cache for embeddings to avoid recomputation",
      "startLine": 73,
      "endLine": 74
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let indexTimestamp = 0; // Track when index was last updated\r\n\r\n// LRU cache implementation for embeddings",
      "startLine": 74,
      "endLine": 77
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "class LRUCache {\r\n  constructor(maxSize) {\r\n    this.maxSize = maxSize;\r\n    this.cache = new Map();\r\n  }\r\n\r\n  get(key) {\r\n    if (this.cache.has(key)) {",
      "startLine": 77,
      "endLine": 85
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const value = this.cache.get(key);\r\n      this.cache.delete(key);\r\n      this.cache.set(key, value);\r\n      return value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  set(key, value) {\r\n    if (this.cache.size >= this.maxSize) {",
      "startLine": 85,
      "endLine": 95
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const firstKey = this.cache.keys().next().value;\r\n      this.cache.delete(firstKey);\r\n    }\r\n    this.cache.set(key, value);\r\n  }\r\n\r\n  clear() {\r\n    this.cache.clear();\r\n  }\r\n}",
      "startLine": 95,
      "endLine": 106
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const embeddingLRUCache = new LRUCache(MAX_CACHE_SIZE);\r\n\r\n// Initialize transformers.js embedding provider (no fallbacks)\r\nasync function initializeEmbeddingProvider() {\r\n  try {\r\n    const { pipeline } = await import('@xenova/transformers');\r\n    embeddingExtractor = await pipeline('feature-extraction', DEFAULT_MODEL);\r\n    return true;\r\n  } catch (error) {\r\n    throw new Error(`Transformers.js initialization failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Create robust ignore filter using the ignore library",
      "startLine": 106,
      "endLine": 120
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "function createIgnoreFilter(rootDir) {",
      "startLine": 120,
      "endLine": 121
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const ig = ignore();\r\n\r\n  // Get default ignore patterns with dynamic loading",
      "startLine": 121,
      "endLine": 124
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const defaultPatterns = getDefaultIgnorePatterns(rootDir);\r\n\r\n  // Add default ignore patterns\r\n  ig.add(DEFAULT_IGNORES);\r\n\r\n  // Add any custom patterns from defaults\r\n  if (defaultPatterns.customGitignore) {\r\n    ig.add(defaultPatterns.customGitignore);\r\n  }\r\n\r\n  // Add file patterns from defaults\r\n  if (defaultPatterns.files) {\r\n    ig.add(defaultPatterns.files);\r\n  }\r\n\r\n  // Find and add all .gitignore files in the directory tree",
      "startLine": 124,
      "endLine": 140
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const addGitignoreFiles = (dir) => {\r\n    try {",
      "startLine": 140,
      "endLine": 142
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const entries = readdirSync(dir, { withFileTypes: true });\r\n\r\n      for (const entry of entries) {",
      "startLine": 142,
      "endLine": 145
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const fullPath = path.join(dir, entry.name);\r\n\r\n        if (entry.isFile() && entry.name === '.gitignore') {\r\n          try {",
      "startLine": 145,
      "endLine": 149
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const content = readFileSync(fullPath, 'utf8');\r\n            ig.add(content);\r\n          } catch (error) {\r\n            // Silently handle .gitignore read errors\r\n          }\r\n        } else if (entry.isDirectory() && !entry.name.startsWith('.') && !DEFAULT_IGNORES.includes(entry.name)) {\r\n          // Recursively add .gitignore files from subdirectories\r\n          addGitignoreFiles(fullPath);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Silently handle directory read errors\r\n    }\r\n  };\r\n\r\n  addGitignoreFiles(rootDir);\r\n  return { ig, rootDir };\r\n}\r\n\r\n// Check if a file should be indexed based on extension",
      "startLine": 149,
      "endLine": 169
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "function shouldIndexFile(filePath, allowedExtensions) {",
      "startLine": 169,
      "endLine": 170
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const ext = path.extname(filePath).slice(1).toLowerCase();\r\n  if (!ext || !allowedExtensions.includes(ext)) {\r\n    return false;\r\n  }\r\n\r\n  // Optimized file filtering with pre-compiled patterns",
      "startLine": 170,
      "endLine": 176
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const filename = path.basename(filePath);",
      "startLine": 176,
      "endLine": 177
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const excludedPatterns = [\r\n    /\\.min\\.js$/, /\\.bundle\\.js$/, /\\.pack\\.js$/,\r\n    /\\.d\\.ts$/, /\\.d\\.tsx$/,\r\n    /\\.map$/, /\\.css\\.map$/,\r\n    /^package\\.json$/, /^package-lock\\.json$/, /^yarn\\.lock$/, /^pnpm-lock\\.yaml$/,\r\n    /^tsconfig\\.json$/, /^jsconfig\\.json$/,\r\n    /\\.eslintrc\\..*$/, /\\.prettierrc\\..*$/,\r\n    /^LICENSE.*$/, /^README.*$/, /^.*\\.md$/, /^CHANGELOG.*$/,\r\n    /^Dockerfile.*$/, /^docker-compose.*\\.yml$/\r\n  ];\r\n\r\n  return !excludedPatterns.some(pattern => pattern.test(filename));\r\n}\r\n\r\n// Initialize the embedding model\r\nexport async function initialize(indexDir = INDEX_DIR) {\r\n  if (isInitialized) return true;\r\n\r\n  try {\r\n    // Create index directory if it doesn't exist\r\n    if (!existsSync(indexDir)) {\r\n      mkdirSync(indexDir, { recursive: true });\r\n    }\r\n\r\n    // Initialize embedding extractor\r\n    if (!embeddingExtractor) {\r\n      await initializeEmbeddingProvider();\r\n    }\r\n\r\n    // Load existing index if available\r\n    await loadIndex(indexDir);\r\n\r\n    isInitialized = true;\r\n    return true;\r\n  } catch (error) {\r\n    throw new Error(`Vector search initialization failed: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Load existing index with timestamp check\r\nasync function loadIndex(indexDir) {\r\n  try {",
      "startLine": 177,
      "endLine": 219
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const indexPath = path.join(indexDir, INDEX_FILE);\r\n    if (existsSync(indexPath)) {",
      "startLine": 219,
      "endLine": 221
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const indexData = JSON.parse(readFileSync(indexPath, 'utf8'));\r\n      codeChunks = indexData.chunks || [];\r\n      indexTimestamp = indexData.timestamp || 0;\r\n    }\r\n  } catch (error) {\r\n    // If loading fails, start fresh\r\n    codeChunks = [];\r\n    indexTimestamp = 0;\r\n  }\r\n}\r\n\r\n// Process code files into chunks with improved chunking logic",
      "startLine": 221,
      "endLine": 233
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "function processCodeIntoChunks(content, filePath) {",
      "startLine": 233,
      "endLine": 234
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const chunks = [];",
      "startLine": 234,
      "endLine": 235
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const lines = content.split('\\n');\r\n\r\n  // Split into logical chunks (functions, classes, blocks)",
      "startLine": 235,
      "endLine": 238
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let currentChunk = '';",
      "startLine": 238,
      "endLine": 239
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let inFunction = false;",
      "startLine": 239,
      "endLine": 240
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let inClass = false;",
      "startLine": 240,
      "endLine": 241
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let braceCount = 0;",
      "startLine": 241,
      "endLine": 242
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let chunkLineCount = 0;\r\n\r\n  for (let i = 0; i < lines.length; i++) {",
      "startLine": 242,
      "endLine": 245
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const line = lines[i];",
      "startLine": 245,
      "endLine": 246
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const trimmedLine = line.trim();\r\n\r\n    // Start of function or class\r\n    if (trimmedLine.match(/^(function|class|const|let|var)\\s+\\w/)) {\r\n      if (currentChunk.trim()) {\r\n        chunks.push({\r\n          content: currentChunk.trim(),\r\n          file: filePath,\r\n          startLine: Math.max(0, i - currentChunk.split('\\n').length),\r\n          endLine: i\r\n        });\r\n      }\r\n      currentChunk = line;\r\n      braceCount = (line.match(/{/g) || []).length;\r\n      inFunction = trimmedLine.startsWith('function');\r\n      inClass = trimmedLine.startsWith('class');\r\n      chunkLineCount = 1;\r\n    } else {\r\n      currentChunk += '\\n' + line;\r\n      chunkLineCount++;\r\n\r\n      // Track braces for proper chunking\r\n      braceCount += (line.match(/{/g) || []).length;\r\n      braceCount -= (line.match(/}/g) || []).length;\r\n\r\n      // End chunk when brace count reaches zero or chunk gets too large\r\n      if ((braceCount === 0 && (inFunction || inClass)) || chunkLineCount >= MAX_LINES_PER_CHUNK) {\r\n        chunks.push({\r\n          content: currentChunk.trim(),\r\n          file: filePath,\r\n          startLine: Math.max(0, i - currentChunk.split('\\n').length),\r\n          endLine: i\r\n        });\r\n        currentChunk = '';\r\n        inFunction = false;\r\n        inClass = false;\r\n        chunkLineCount = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add remaining content\r\n  if (currentChunk.trim()) {\r\n    chunks.push({\r\n      content: currentChunk.trim(),\r\n      file: filePath,\r\n      startLine: Math.max(0, lines.length - currentChunk.split('\\n').length),\r\n      endLine: lines.length - 1\r\n    });\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\n// Synchronize the index with the file system (optimized with change detection)\r\nexport async function syncIndex(folders, exts = DEFAULT_EXTS, ignores = DEFAULT_IGNORES) {\r\n  if (!isInitialized) {\r\n    await initialize();\r\n  }",
      "startLine": 246,
      "endLine": 306
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const files = [];",
      "startLine": 306,
      "endLine": 307
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const startTime = Date.now();\r\n\r\n  // Check if we need to rebuild the index",
      "startLine": 307,
      "endLine": 310
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const lastModified = await getLastModifiedTime(folders);\r\n  if (lastModified <= indexTimestamp && codeChunks.length > 0) {\r\n    return codeChunks.length; // Index is up to date\r\n  }\r\n\r\n  for (const folder of folders) {",
      "startLine": 310,
      "endLine": 316
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const ignoreFilter = createIgnoreFilter(folder);\r\n    await scanDirectory(folder, ignoreFilter, files, exts);\r\n  }\r\n\r\n  // Process files into chunks with memory management",
      "startLine": 316,
      "endLine": 321
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const newChunks = [];",
      "startLine": 321,
      "endLine": 322
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let skippedFiles = 0;\r\n\r\n  for (const file of files) {\r\n    try {",
      "startLine": 322,
      "endLine": 326
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const stats = await fs.stat(file);\r\n\r\n      // Skip files that are too large\r\n      if (stats.size > MAX_LARGE_FILE_SIZE) {\r\n        skippedFiles++;\r\n        continue;\r\n      }\r\n\r\n      // Skip large binary files by extension",
      "startLine": 326,
      "endLine": 335
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const ext = path.extname(file).toLowerCase();\r\n      if (['.jpg', '.jpeg', '.png', '.gif', '.svg', '.ico', '.pdf', '.zip', '.tar', '.gz', '.exe', '.dll', '.so', '.dylib'].includes(ext)) {\r\n        skippedFiles++;\r\n        continue;\r\n      }\r\n\r\n      // For medium-sized files, truncate content",
      "startLine": 335,
      "endLine": 342
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let content = await fs.readFile(file, 'utf8');\r\n      if (stats.size > MAX_FILE_SIZE) {\r\n        content = content.substring(0, MAX_FILE_SIZE);\r\n      }",
      "startLine": 342,
      "endLine": 347
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const chunks = processCodeIntoChunks(content, file);\r\n      newChunks.push(...chunks);\r\n    } catch (error) {\r\n      // Skip files that can't be processed\r\n    }\r\n  }\r\n\r\n  // Memory management: clear old cache if index is significantly different\r\n  if (newChunks.length > codeChunks.length * 1.5 || newChunks.length < codeChunks.length * 0.5) {\r\n    embeddingLRUCache.clear();\r\n  }\r\n\r\n  codeChunks = newChunks;\r\n  indexTimestamp = startTime;\r\n\r\n  // Save index",
      "startLine": 347,
      "endLine": 363
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const indexData = {\r\n    timestamp: indexTimestamp,\r\n    chunks: codeChunks.map(c => ({\r\n      file: c.file,\r\n      content: c.content,\r\n      startLine: c.startLine,\r\n      endLine: c.endLine\r\n    }))\r\n  };\r\n\r\n  writeFileSync(path.join(INDEX_DIR, INDEX_FILE), JSON.stringify(indexData, null, 2));\r\n\r\n  return codeChunks.length;\r\n}\r\n\r\n// Get the last modified time of files in folders\r\nasync function getLastModifiedTime(folders) {",
      "startLine": 363,
      "endLine": 380
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let lastModified = 0;\r\n\r\n  for (const folder of folders) {\r\n    try {",
      "startLine": 380,
      "endLine": 384
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const files = await fs.readdir(folder, { withFileTypes: true });\r\n      for (const file of files) {\r\n        if (file.isFile()) {",
      "startLine": 384,
      "endLine": 387
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const fullPath = path.join(folder, file.name);",
      "startLine": 387,
      "endLine": 388
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const stats = await fs.stat(fullPath);\r\n          lastModified = Math.max(lastModified, stats.mtimeMs);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Skip directories we can't read\r\n    }\r\n  }\r\n\r\n  return lastModified;\r\n}\r\n\r\n// Helper function to scan directories with proper .gitignore support\r\nasync function scanDirectory(dir, ignoreFilter, files, exts) {\r\n  try {",
      "startLine": 388,
      "endLine": 403
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const entries = await fs.readdir(dir, { withFileTypes: true });\r\n\r\n    for (const entry of entries) {",
      "startLine": 403,
      "endLine": 406
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const fullPath = path.join(dir, entry.name);",
      "startLine": 406,
      "endLine": 407
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const relativePath = path.relative(ignoreFilter.rootDir, fullPath);\r\n\r\n      // Check if file/directory should be ignored using the ignore library\r\n      if (ignoreFilter.ig.ignores(relativePath)) {\r\n        continue;\r\n      }\r\n\r\n      if (entry.isDirectory()) {\r\n        // Recursively scan subdirectories\r\n        await scanDirectory(fullPath, ignoreFilter, files, exts);\r\n      } else if (entry.isFile()) {\r\n        // Check if this file should be indexed based on extension and content type\r\n        if (shouldIndexFile(fullPath, exts)) {\r\n          // Check file size - skip files larger than MAX_FILE_SIZE\r\n          try {",
      "startLine": 407,
      "endLine": 422
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const stat = await fs.stat(fullPath);\r\n            if (stat.size <= MAX_FILE_SIZE) { // 1MB limit\r\n              files.push(fullPath);\r\n            }\r\n          } catch (error) {\r\n            // Skip files we can't stat\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    // Skip directories we can't read\r\n  }\r\n}\r\n\r\n// Optimized embedding extraction with caching\r\nasync function getEmbedding(text) {",
      "startLine": 422,
      "endLine": 439
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const cacheKey = text; // Use text as cache key\r\n\r\n  // Check cache first",
      "startLine": 439,
      "endLine": 442
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const cached = embeddingLRUCache.get(cacheKey);\r\n  if (cached) {\r\n    return cached;\r\n  }\r\n\r\n  // Generate embedding",
      "startLine": 442,
      "endLine": 448
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const embedding = await embeddingExtractor(text, {\r\n    pooling: 'mean',\r\n    normalize: true\r\n  });\r\n\r\n  // Cache the result\r\n  embeddingLRUCache.set(cacheKey, embedding);\r\n\r\n  return embedding;\r\n}\r\n\r\n// Query the index with semantic search (optimized with batching)\r\nexport async function queryIndex(query, topK = 8) {\r\n  if (!isInitialized) {\r\n    await initialize();\r\n  }\r\n\r\n  if (codeChunks.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  // Generate query embedding",
      "startLine": 448,
      "endLine": 470
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const queryEmbedding = await getEmbedding(query);\r\n\r\n  // Batch process chunks for better performance",
      "startLine": 470,
      "endLine": 473
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const results = [];",
      "startLine": 473,
      "endLine": 474
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const batchSize = platformConfig.batchSize;\r\n\r\n  for (let i = 0; i < codeChunks.length; i += batchSize) {",
      "startLine": 474,
      "endLine": 477
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const batch = codeChunks.slice(i, i + batchSize);",
      "startLine": 477,
      "endLine": 478
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const batchPromises = batch.map(async (chunk) => {",
      "startLine": 478,
      "endLine": 479
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const chunkEmbedding = await getEmbedding(chunk.content);",
      "startLine": 479,
      "endLine": 480
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const similarity = calculateCosineSimilarity(queryEmbedding.data, chunkEmbedding.data);\r\n\r\n      return {\r\n        file: chunk.file,\r\n        content: chunk.content,\r\n        startLine: chunk.startLine,\r\n        endLine: chunk.endLine,\r\n        similarity: similarity\r\n      };\r\n    });",
      "startLine": 480,
      "endLine": 491
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const batchResults = await Promise.all(batchPromises);\r\n    results.push(...batchResults);\r\n  }\r\n\r\n  // Sort by similarity and return topK results\r\n  return results\r\n    .sort((a, b) => b.similarity - a.similarity)\r\n    .slice(0, topK)\r\n    .map(r => ({\r\n      file: r.file,\r\n      content: r.content,\r\n      startLine: r.startLine,\r\n      endLine: r.endLine,\r\n      score: r.similarity\r\n    }));\r\n}\r\n\r\n// Optimized cosine similarity calculation",
      "startLine": 491,
      "endLine": 509
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "function calculateCosineSimilarity(vecA, vecB) {\r\n  if (vecA.length !== vecB.length) return 0;",
      "startLine": 509,
      "endLine": 512
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let dotProduct = 0;",
      "startLine": 512,
      "endLine": 513
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let normA = 0;",
      "startLine": 513,
      "endLine": 514
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "let normB = 0;\r\n\r\n  // Use single loop for better performance\r\n  for (let i = 0; i < vecA.length; i++) {\r\n    dotProduct += vecA[i] * vecB[i];\r\n    normA += vecA[i] * vecA[i];\r\n    normB += vecB[i] * vecB[i];\r\n  }",
      "startLine": 514,
      "endLine": 523
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const denominator = Math.sqrt(normA) * Math.sqrt(normB);\r\n  return denominator === 0 ? 0 : dotProduct / denominator;\r\n}\r\n\r\n// Search with enhanced natural language support\r\nexport async function searchCode(query, workingDirectory, folders = ['.'], extensions = DEFAULT_EXTS, topK = 6) {\r\n  try {\r\n    // Validate working directory\r\n    if (!existsSync(workingDirectory)) {\r\n      return [];\r\n    }\r\n\r\n    // Initialize if needed",
      "startLine": 523,
      "endLine": 536
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const initPromise = isInitialized ? Promise.resolve() : initialize();\r\n    await Promise.race([\r\n      initPromise,\r\n      new Promise((_, reject) => setTimeout(() => reject(new Error('Initialization timeout')), 10000))\r\n    ]);\r\n\r\n    // Convert folder paths to absolute paths",
      "startLine": 536,
      "endLine": 543
    },
    {
      "file": "/config/workspace/mcp-repl/src/vector-search.js",
      "content": "const absFolders = folders.map(f => path.resolve(workingDirectory, f));\r\n\r\n    // Sync index and get results\r\n    await syncIndex(absFolders, extensions);\r\n    return await queryIndex(query, topK);\r\n\r\n  } catch (error) {\r\n    throw new Error(`Search failed: ${error.message}`);\r\n  }\r\n}\r\n\r\nexport async function searchSemantic(query, options = {}) {\r\n  const { workingDirectory, folders = ['.'], extensions = DEFAULT_EXTS, topK = 6 } = options;\r\n  return await searchCode(query, workingDirectory, folders, extensions, topK);\r\n}",
      "startLine": 543,
      "endLine": 557
    }
  ]
}