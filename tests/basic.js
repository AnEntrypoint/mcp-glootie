/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "Simple addition",
    "code": "return 2 + 2",
    "expected": "4"
  },
  {
    "name": "String concatenation",
    "code": "return \"Hello, \" + \"World!\"",
    "expected": "Hello, World!"
  },
  {
    "name": "Object declaration",
    "code": "return { a: 1, b: 2 }",
    "expected": ({ returnValue }) => {
      if (typeof returnValue !== 'string') return false;
      try {
        const obj = JSON.parse(returnValue);
        return obj.a === 1 && obj.b === 2;
      } catch {
        return false;
      }
    }
  },
  {
    "name": "Array operations",
    "code": "const arr = [1, 2, 3]; return arr.map(x => x * 2)",
    "expected": ({ returnValue }) => {
      if (typeof returnValue === 'string') {
        // Remove all whitespace and check if the content matches
        const normalized = returnValue.replace(/\s+/g, '');
        return normalized === '[2,4,6]';
      }
      return false;
    }
  },
  {
    "name": "Console output",
    "code": "console.log(\"Testing console output\"); return \"done\"",
    "expected": ({ returnValue, logs }) => {
      // Check logs for the console output
      return logs && logs.some(log => log.includes("Testing console output"));
    }
  },
  {
    "name": "Multiple statements",
    "code": "let x = 10; x = x * 2; return x",
    "expected": "20"
  },
  {
    "name": "Empty return",
    "code": "return",
    "expected": "[object Object]"
  },
  {
    "name": "No return statement",
    "code": "const x = 42",
    "expected": "[object Object]"
  }
];
