/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "JSON stringify basic",
    "code": "return JSON.stringify({ a: 1, b: 2 });",
    "expectedResult": "{\"a\":1,\"b\":2}",
    "expected": "{\"a\":1,\"b\":2}"
  },
  {
    "name": "JSON stringify with replacer",
    "code": "return JSON.stringify({ a: 1, b: 2, c: 3 }, [\"a\", \"c\"]);",
    "expectedResult": "{\"a\":1,\"c\":3}",
    "expected": "{\"a\":1,\"c\":3}"
  },
  {
    "name": "JSON stringify with spacing",
    "code": "const pretty = JSON.stringify({ a: 1, b: 2 }, null, 2); return pretty.includes(\"\\n\");",
    "expectedResult": "true",
    "expected": "true"
  },
  {
    "name": "JSON stringify with replacer function",
    "code": "return JSON.stringify({ a: 1, b: 2 }, (key, value) => key === \"a\" ? value * 10 : value);",
    "expectedResult": "{\"a\":10,\"b\":2}",
    "expected": "{\"a\":10,\"b\":2}"
  },
  {
    "name": "JSON parse basic",
    "code": "return JSON.parse('{\"name\":\"John\",\"age\":30}').name;",
    "expectedResult": "John",
    "expected": "John"
  },
  {
    "name": "JSON parse with reviver",
    "code": "return JSON.parse('{\"date\":\"2022-01-01\"}', (key, value) => key === \"date\" ? new Date(value) : value).date.getFullYear();",
    "expectedResult": "2022",
    "expected": "2022"
  },
  {
    "name": "JSON stringify circular reference handling",
    "code": "const obj = { a: 1 }; obj.self = obj; try { JSON.stringify(obj); return \"Should fail\"; } catch (e) { return \"Circular reference caught\"; }",
    "expectedResult": "Circular reference caught",
    "expected": "Circular reference caught"
  },
  {
    "name": "JSON.stringify special values",
    "code": "return JSON.stringify({ a: undefined, b: null, c: NaN, d: Infinity });",
    "expectedResult": "{\"b\":null,\"c\":null,\"d\":null}",
    "expected": "{\"b\":null,\"c\":null,\"d\":null}"
  },
  {
    "name": "JSON parse error handling",
    "code": "try { JSON.parse(\"{invalid json}\"); return \"Should fail\"; } catch (e) { return \"Invalid JSON caught\"; }",
    "expectedResult": "Invalid JSON caught",
    "expected": "Invalid JSON caught"
  },
  {
    "name": "JSON stringify/parse round trip",
    "code": "const obj = { a: 1, b: \"test\", c: true, d: [1, 2, 3] }; return JSON.stringify(obj) === JSON.stringify(JSON.parse(JSON.stringify(obj)));",
    "expectedResult": "true",
    "expected": "true"
  }
];