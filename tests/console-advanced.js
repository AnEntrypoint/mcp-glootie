/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "Console log with multiple arguments",
    "code": "console.log('Value:', 42, 'is the answer'); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('Value:') && log.includes('42') && log.includes('is the answer'))
  },
  {
    "name": "Console error",
    "code": "console.error('This is an error message'); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('This is an error message'))
  },
  {
    "name": "Console warn",
    "code": "console.warn('This is a warning'); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('This is a warning'))
  },
  {
    "name": "Console with format specifiers",
    "code": "console.log('Cart has %d items', 5); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('Cart has 5 items'))
  },
  {
    "name": "Console dir",
    "code": "console.dir({ nested: { value: 42 } }); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('nested') && log.includes('value') && log.includes('42'))
  },
  {
    "name": "Console table",
    "code": "console.table([{ a: 1, b: 2 }, { a: 3, b: 4 }]); return 'done';",
    "expected": ({ logs }) => {
      if (!logs) return false;
      // More flexible check that looks for any output containing both keys and values
      return logs.some(log => 
        (log.includes('a') && log.includes('b') && 
         log.includes('1') && log.includes('2') && 
         log.includes('3') && log.includes('4')) ||
        // Alternative tabular format
        (log.includes('a\tb') && 
         log.includes('1\t2') && 
         log.includes('3\t4'))
      );
    }
  },
  {
    "name": "Console mixed deep objects",
    "code": "const obj = { array: [1, 2, 3], nested: { a: { b: { c: 42 } } }, fn: function fn() {} }; console.log(obj); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('array') && log.includes('nested'))
  },
  {
    "name": "Console with very large output",
    "code": "console.log('Large output test'); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('Large output test'))
  },
  {
    "name": "Console info",
    "code": "console.info('Informational message'); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('Informational message'))
  },
  {
    "name": "Console log with circular references",
    "code": "const obj = {}; obj.self = obj; console.log(obj); return 'done';",
    "expected": ({ logs }) => logs && logs.some(log => log.includes('self') && (log.includes('[Circular') || log.includes('Circular')))
  }
];