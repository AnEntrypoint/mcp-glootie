/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "Basic regex test",
    "code": "return /hello/.test(\"hello world\");",
    "expectedResult": "true",
    "expected": "true"
  },
  {
    "name": "Regex with flags",
    "code": "return /hello/i.test(\"HELLO world\");",
    "expectedResult": "true",
    "expected": "true"
  },
  {
    "name": "Regex match",
    "code": "return \"hello world\".match(/world/)[0];",
    "expectedResult": "world",
    "expected": "world"
  },
  {
    "name": "Regex match with multiple results",
    "code": "const matches = \"test1 test2 test3\".match(/test\\d/g); return matches.join(\", \");",
    "expectedResult": "test1, test2, test3",
    "expected": "test1, test2, test3"
  },
  {
    "name": "Regex replace",
    "code": "return \"hello world\".replace(/world/, \"javascript\");",
    "expectedResult": "hello javascript",
    "expected": "hello javascript"
  },
  {
    "name": "Regex replace with function",
    "code": "return \"hello world\".replace(/world/, match => match.toUpperCase());",
    "expectedResult": "hello WORLD",
    "expected": "hello WORLD"
  },
  {
    "name": "Regex replace all",
    "code": "return \"test1 test2 test3\".replace(/test/g, \"unit\");",
    "expectedResult": "unit1 unit2 unit3",
    "expected": "unit1 unit2 unit3"
  },
  {
    "name": "Regex capture groups",
    "code": "const match = \"hello-123\".match(/^([a-z]+)-([0-9]+)$/); return match[1] + \":\" + match[2];",
    "expectedResult": "hello:123",
    "expected": "hello:123"
  },
  {
    "name": "Regex named capture groups",
    "code": "const match = \"hello-123\".match(/^(?<text>[a-z]+)-(?<num>[0-9]+)$/); return match.groups.text + \":\" + match.groups.num;",
    "expectedResult": "hello:123",
    "expected": "hello:123"
  },
  {
    "name": "Regex split",
    "code": "return \"a,b,c\".split(/,/).join(\"|\");",
    "expectedResult": "a|b|c",
    "expected": "a|b|c"
  },
  {
    "name": "RegExp constructor",
    "code": "return new RegExp(\"world\").test(\"hello world\");",
    "expectedResult": "true",
    "expected": "true"
  },
  {
    "name": "RegExp constructor with flags",
    "code": "return new RegExp(\"hello\", \"i\").test(\"HELLO world\");",
    "expectedResult": "true",
    "expected": "true"
  }
];