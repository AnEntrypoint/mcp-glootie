/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "Create Buffer",
    "code": "const buf = Buffer.from(\"hello\"); return buf.toString();",
    "expectedResult": "hello",
    "expected": "hello"
  },
  {
    "name": "Buffer concatenation",
    "code": "const buf1 = Buffer.from(\"hello \"); const buf2 = Buffer.from(\"world\"); return Buffer.concat([buf1, buf2]).toString();",
    "expectedResult": "hello world",
    "expected": "hello world"
  },
  {
    "name": "Buffer encoding",
    "code": "const buf = Buffer.from(\"hello\", \"utf8\"); return buf.toString(\"hex\");",
    "expectedResult": "68656c6c6f",
    "expected": "68656c6c6f"
  },
  {
    "name": "Buffer slice",
    "code": "const buf = Buffer.from(\"hello world\"); return buf.slice(0, 5).toString();",
    "expectedResult": "hello",
    "expected": "hello"
  },
  {
    "name": "Buffer write",
    "code": "const buf = Buffer.alloc(5); buf.write(\"hello\"); return buf.toString();",
    "expectedResult": "hello",
    "expected": "hello"
  },
  {
    "name": "String Decoder",
    "code": "// Using TextDecoder directly instead of StringDecoder\nconst decoder = new TextDecoder('utf8');\nconst buf = Buffer.from('âœ“');\nconst result = decoder.decode(buf);\nreturn result.length;",
    "expected": "1"
  },
  {
    "name": "Typed arrays",
    "code": "const arr = new Uint8Array([1, 2, 3]); return Array.from(arr);",
    "expectedResult": "1, 2, 3",
    "expected": ({ returnValue }) => {
      if (typeof returnValue === 'string') {
        // Normalize the string by removing whitespace
        const normalized = returnValue.replace(/\s+/g, '');
        return normalized === '[1,2,3]';
      }
      return false;
    }
  },
  {
    "name": "Convert Buffer to TypedArray",
    "code": "const buf = Buffer.from([1, 2, 3]); const arr = Uint8Array.from(buf); return Array.from(arr);",
    "expectedResult": "1, 2, 3",
    "expected": ({ returnValue }) => {
      if (typeof returnValue === 'string') {
        // Normalize the string by removing whitespace
        const normalized = returnValue.replace(/\s+/g, '');
        return normalized === '[1,2,3]';
      }
      return false;
    }
  }
];