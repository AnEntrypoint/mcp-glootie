/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "Syntax error",
    "code": "const x = {; return x;",
    "expectedError": "SyntaxError",
    "expected": ({ returnValue, isError }) => {
      if (isError) return true; // Accept any error for an error test
      
      // For string return values, check for SyntaxError
      return typeof returnValue === 'string' && 
             (returnValue.includes('SyntaxError') || 
              returnValue.includes('syntax error'));
    }
  },
  {
    "name": "Reference error",
    "code": "try { return undefinedVariable; } catch (err) { return err.name + ': ' + err.message; }",
    "expectedError": "ReferenceError",
    "expected": ({ returnValue, isError }) => {
      if (isError && returnValue.includes('ReferenceError')) return true;
      
      // For string return values, check for ReferenceError
      return typeof returnValue === 'string' && 
             (returnValue.includes('ReferenceError') || 
              returnValue.includes('not defined'));
    }
  },
  {
    "name": "Type error",
    "code": "const x = null; return x.property;",
    "expectedError": "TypeError",
    "expected": ({ returnValue, isError }) => {
      if (isError) return true; // Accept any error for an error test
      
      // For string return values, check for TypeError
      return typeof returnValue === 'string' && 
             (returnValue.includes('TypeError') || 
              returnValue.includes('Cannot read properties'));
    }
  },
  {
    "name": "Custom error",
    "code": "throw new Error(\"Custom test error\");",
    "expectedError": "Custom test error",
    "expected": ({ returnValue, isError }) => {
      if (isError) return true; // Accept any error for an error test
      
      // For string return values, check for the custom error message
      return typeof returnValue === 'string' && 
             returnValue.includes('Custom test error');
    }
  }
];