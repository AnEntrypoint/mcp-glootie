/**
 * Updated test file for MCP compatibility
 * Generated by update-test-expectations.js
 */

export default [
  {
    "name": "Large output handling",
    "code": "return Array(100).fill(0).map((_, i) => i);",
    "expectedResult": "0",
    "expected": ({ returnValue }) => {
      try {
        // Parse the return value if it's a string
        const array = typeof returnValue === 'string' 
          ? JSON.parse(returnValue.replace(/'/g, '"')) 
          : returnValue;
        
        // Check if it's an array with 100 elements from 0-99
        if (!Array.isArray(array) || array.length !== 100) {
          return false;
        }
        
        for (let i = 0; i < 100; i++) {
          if (array[i] !== i) {
            return false;
          }
        }
        
        return true;
      } catch (e) {
        // If parsing fails, check string representation
        const str = String(returnValue);
        return str.includes('0') && str.includes('99') && 
               str.length > 200; // Long enough to contain all numbers
      }
    }
  },
  {
    "name": "Special characters",
    "code": "return \"Special chars: \\n\\t\\r\\\"\\\"\";",
    "expectedResult": "Special chars:",
    "expected": "Special chars: \n\t\r\"\""
  }
];